Changeset created on Wed Jul  7 13:36:11 UTC 2010 by Seek You Too

Description: Adds support for faster drop-in-replacement of Document.addToIndexWith

    The Python implementation of addToIndexWith can now optionally be replaced with the faster C++ implementation in the lucenegcjutil package.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.0-Edurep/version_9

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/meresco/components/facetindex/document.py version_10.addToIndexWithPerformanceTest/meresco/components/facetindex/document.py
--- version_9/meresco/components/facetindex/document.py	2010-07-06 07:18:16.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/meresco/components/facetindex/document.py	2010-07-07 09:49:16.000000000 +0000
@@ -34,6 +34,26 @@
 
 from java.io import StringReader, Reader
 
+
+def _pyAddToIndexWith(indexWriter, identifier, values):
+    document = LuceneDocument()
+    document.add(Field(IDFIELD, identifier, Field.Store.YES, Field.Index.UN_TOKENIZED) % Fieldable)
+    for key, value, tokenize in values:
+        document.add(Field(
+                key,
+                value,
+                Field.Store.NO,
+                Field.Index.TOKENIZED if tokenize else Field.Index.UN_TOKENIZED
+            ) % Fieldable)
+    indexWriter.addDocument(document)
+    return document
+
+try:
+    from lucenegcjutil import addToIndexWith
+except:
+    addToIndexWith = _pyAddToIndexWith
+
+
 IDFIELD = '__id__'
 
 def tokenize(aString):
@@ -77,16 +97,7 @@
         self._fields.append((aKey, aValue, tokenize))
 
     def addToIndexWith(self, anIndexWriter):
-        document = LuceneDocument()
-        document.add(Field(IDFIELD, self.identifier, Field.Store.YES, Field.Index.UN_TOKENIZED) % Fieldable)
-        for key, value, tokenize in self._fields:
-            document.add(Field(
-                    key,
-                    value, 
-                    Field.Store.NO,
-                    Field.Index.TOKENIZED if tokenize else Field.Index.UN_TOKENIZED
-                ) % Fieldable)
-        anIndexWriter.addDocument(document)
+        return addToIndexWith(anIndexWriter, self.identifier, self._fields)
 
     def validate(self):
         if self._fields == []:
@@ -113,7 +124,7 @@
         if item not in seen:
             seen.add(item)
             yield item
-            
+
 
 class DocDict(object):
     def __init__(self, keysMethod, valuesMethod):
@@ -130,5 +141,5 @@
     get = __getitem__
 
     def items(self):
-        return ((key, self[key]) for key in self.keys()) 
- 
+        return ((key, self[key]) for key in self.keys())
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/test/facetindex/documenttest.py version_10.addToIndexWithPerformanceTest/test/facetindex/documenttest.py
--- version_9/test/facetindex/documenttest.py	2010-07-06 07:18:13.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/test/facetindex/documenttest.py	2010-07-07 09:49:15.000000000 +0000
@@ -30,7 +30,8 @@
 
 import unittest
 from cq2utils import CallTrace
-from meresco.components.facetindex.document import IDFIELD, Document, DocumentException, tokenize
+from meresco.components.facetindex.document import IDFIELD, Document, DocumentException, tokenize, _pyAddToIndexWith
+from meresco.components.facetindex.merescolucene import iterJ
 
 class DocumentTest(unittest.TestCase):
 
@@ -93,7 +94,6 @@
         d = Document('1234')
         d.addIndexedField('x', 'a')
         d.addIndexedField('x', 'b')
-        d.addToIndexWith(CallTrace("IndexWriter"))
         self.assertEquals([IDFIELD, 'x', 'x'], d.fields())
 
     def testAsDict(self):
@@ -155,6 +155,10 @@
         self.assertEquals(['value1', 'value2'], d.asDict().get('field1'))
         self.assertEquals(['nothing'], d.asDict().get('doesnotexist', ['nothing']))
 
+    def testPyAddToIndexWith(self):
+        indexWriter = CallTrace('indexWriter')
+        luceneDoc = _pyAddToIndexWith(indexWriter, 'identifier1', [("key", "value", False), ("key", "anothervalue", False)])
+        self.assertEquals([u"value", u"anothervalue"], list(iterJ(luceneDoc.getValues("key"))))
+
 #def testDictUniqueKeysElements(self):
 
-        
\ No newline at end of file
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/test/facetindex/fields2lucenedocumenttest.py version_10.addToIndexWithPerformanceTest/test/facetindex/fields2lucenedocumenttest.py
--- version_9/test/facetindex/fields2lucenedocumenttest.py	2010-07-06 07:18:13.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/test/facetindex/fields2lucenedocumenttest.py	2010-07-07 09:49:15.000000000 +0000
@@ -29,16 +29,17 @@
 #
 ## end license ##
 from unittest import TestCase
-from cq2utils import CallTrace
+from cq2utils import CallTrace, CQ2TestCase
 from meresco.core import be, Transparant, Observable
 from meresco.core import TransactionScope, ResourceManager, Transaction
 
 from meresco.components.facetindex import Fields2LuceneDocumentTx, Document
-from meresco.components.facetindex.merescolucene import iterJ
+from meresco.components.facetindex.merescolucene import iterJ, IndexWriter, merescoStandardAnalyzer
 
-class Fields2LuceneDocumentTest(TestCase):
+class Fields2LuceneDocumentTest(CQ2TestCase):
 
     def setUp(self):
+        CQ2TestCase.setUp(self)
         self.observert = CallTrace('Observert', ignoredAttributes=['_observers'])
         class Splitter(Transparant):
             def addFields(this, tupleList, identifier='fixedId'):
@@ -84,17 +85,15 @@
         self.assertEquals([Document], [type(arg) for arg in self.observert.calledMethods[1].args])
 
         document = self.observert.calledMethods[1].args[0]
-        indexwriter = CallTrace('IndexWriter')
-        document.addToIndexWith(indexwriter)
-        luceneDocument = indexwriter.calledMethods[0].args[0]
+        indexwriter = IndexWriter(self.tempdir, merescoStandardAnalyzer, True)
+        luceneDocument = document.addToIndexWith(indexwriter)
         self.assertEquals([u'TermOne', u'TermTwo'], list(iterJ(luceneDocument.getValues('a'))))
 
     def testTokenizedIsNotForgotten(self):
         list(self.body.all.addFields([('a', '1'), ('a', 'termone termtwo'), ('b', 'termone termtwo')]))
         document = self.observert.calledMethods[1].args[0]
-        indexwriter = CallTrace('IndexWriter')
-        document.addToIndexWith(indexwriter)
-        luceneDocument = indexwriter.calledMethods[0].args[0]
+        indexwriter = IndexWriter(self.tempdir, merescoStandardAnalyzer, True)
+        luceneDocument = document.addToIndexWith(indexwriter)
         self.assertTrue(luceneDocument.getField('a').isTokenized())
         self.assertFalse(luceneDocument.getField('b').isTokenized())
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/test/facetindex/performancetuningtest.py version_10.addToIndexWithPerformanceTest/test/facetindex/performancetuningtest.py
--- version_9/test/facetindex/performancetuningtest.py	2010-07-06 07:18:13.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/test/facetindex/performancetuningtest.py	2010-07-07 09:58:59.000000000 +0000
@@ -35,7 +35,7 @@
 from os.path import join
 
 from meresco.components.facetindex import DocSetList, DocSet, Trie, IntegerList, LuceneIndex, Document
-from meresco.components.facetindex.merescolucene import Term, IndexReader, asFloat, iterJ
+from meresco.components.facetindex.merescolucene import Term, IndexReader, asFloat, iterJ, IndexWriter, merescoStandardAnalyzer
 from lucenetestcase import LuceneTestCase
 from cq2utils import CallTrace
 
@@ -247,6 +247,21 @@
         self.assertTiming(0.004, tsave, 0.020)
         self.assertTiming(0.10, tload, 0.50)
 
+    def testDocumentAddToIndexWith(self):
+        # Note: running with lucenegcjutil package installed should be notably faster than without
+        indexWriter = IndexWriter(self.tempdir, merescoStandardAnalyzer, True)
+        t = 0.0
+        n = 200
+        for i in xrange(n):
+            document = Document(str(i))
+            for i in xrange(100):
+                terms = ' '.join(['t€rm'+str(randint(0, 1000)) for j in xrange(5)])
+                document.addIndexedField('field%duntokenized' % i, terms, False)
+                document.addIndexedField('field%dtokenized' % i, terms, True)
+            t0 = time()
+            document.addToIndexWith(indexWriter)
+            t += time() - t0
+        self.assertTiming(0.02, t/n, 0.05)
 
 # Some tests on Juicer with EduRep 8/2008:
 # (1st time)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/test/ngram/ngramtest.py version_10.addToIndexWithPerformanceTest/test/ngram/ngramtest.py
--- version_9/test/ngram/ngramtest.py	2010-07-06 07:18:13.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/test/ngram/ngramtest.py	2010-07-07 09:49:15.000000000 +0000
@@ -100,8 +100,8 @@
             self.indexingDna.do.addDict(document)
 
         self.addWord = addWord
-    
-        
+
+
 
     def testOneWord(self):
         self.addWord('appelboom')
@@ -116,7 +116,7 @@
         self.assertEquals(str, type(self.suggestionsFor('ar')[1][0]))
         self.assertEquals((False, ['ideeën']), self.suggestionsFor('ee'))
         self.assertEquals((False, ['škvarla']), self.suggestionsFor('Škvarla'))
-        
+
 
     def testNgram(self):
         self.assertEquals(set(['bo', 'oo', 'om', 'boo', 'oom', 'boom']), set(ngrams('boom', N=4)))
@@ -182,7 +182,7 @@
             self.addWord('field0value%s' % i, fieldname='field0')
         inclusive, suggestions = self.suggestionsFor('val', 'field0')
         self.assertEquals(set(['field0value0', 'field0value1', 'field0value2']), set(suggestions))
-        
+
 
     def assertSuggestions(self, expected, term, suggester, ngramQuerySamples):
         ngramindex = CallTrace('ngramindex')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_9/test/performancetests.sh version_10.addToIndexWithPerformanceTest/test/performancetests.sh
--- version_9/test/performancetests.sh	2010-07-06 07:18:14.000000000 +0000
+++ version_10.addToIndexWithPerformanceTest/test/performancetests.sh	2010-07-07 09:53:26.000000000 +0000
@@ -24,4 +24,4 @@
 ## end license ##
 
 export PYTHONPATH=.
-python2.5 _performancetests.py
+python2.5 _performancetests.py "$@"
