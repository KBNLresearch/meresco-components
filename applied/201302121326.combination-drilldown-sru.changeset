Changeset created on Tue Feb 12 13:26:15 UTC 2013 by Seecr (Seek You Too B.V.)

Description: Added combination drilldown to SRU

    Combination drilldown (a.k.a. pivotting) is now supported as an SRU-Request.
    Implementation is backwards compatible, though the new output uses a different
    xmlschema and a slightly different xml output. The default format can be
    configured in the constructor of SRUTermDrilldown.

    New format also supports json output for drilldown.

Baseline version: 4.4.4

From e616f26c2b0b399f09547d5bfdcf040b22c0d38a Mon Sep 17 00:00:00 2001
From: Seecr <development@seecr.nl>
Date: Tue, 12 Feb 2013 09:45:20 +0100
Subject: [PATCH 1/6] TJ/HM: xsds published on meresco.org.

---
 .../xml_generic/schemas/drilldown-20070730.xsd     |   54 +++++++++++
 .../schemas/facetedResults-20120917.xsd            |   99 ++++++++++++++++++++
 .../xml_generic/schemas/refinement-20100923.xsd    |   21 ++++
 3 files changed, 174 insertions(+), 0 deletions(-)
 create mode 100644 meresco/components/xml_generic/schemas/drilldown-20070730.xsd
 create mode 100644 meresco/components/xml_generic/schemas/facetedResults-20120917.xsd
 create mode 100644 meresco/components/xml_generic/schemas/refinement-20100923.xsd

diff --git a/meresco/components/xml_generic/schemas/drilldown-20070730.xsd b/meresco/components/xml_generic/schemas/drilldown-20070730.xsd
new file mode 100644
index 0000000..270b8b3
--- /dev/null
+++ b/meresco/components/xml_generic/schemas/drilldown-20070730.xsd
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schema targetNamespace="http://meresco.org/namespace/drilldown" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dd="http://meresco.org/namespace/drilldown">
+
+	<element name="drilldown" type="dd:drilldownType"/>
+	<complexType name="drilldownType">
+        <all minOccurs="1" maxOccurs="1">
+				<element ref="dd:term-drilldown" minOccurs="0" maxOccurs="1"></element>
+				<element ref="dd:field-drilldown" minOccurs="0" maxOccurs="1"></element>
+		</all>
+	</complexType>
+
+	<element name="term-drilldown" type="dd:termDrilldownType"/>
+	<complexType name="termDrilldownType">
+		<sequence minOccurs="1" maxOccurs="unbounded">
+			<element ref="dd:navigator"></element>
+		</sequence>
+    </complexType>
+    
+	<element name="field-drilldown" type="dd:fieldDrilldownType"/>
+    <complexType name="fieldDrilldownType">
+		<sequence minOccurs="1" maxOccurs="unbounded">
+			<element ref="dd:field"></element>
+		</sequence>
+    </complexType>
+
+	<element name="navigator" type="dd:navigatorType"></element>
+	<complexType name="navigatorType">
+		<sequence maxOccurs="unbounded" minOccurs="1">
+			<element ref="dd:item"></element>
+		</sequence>
+		<attribute name="name" type="string" use="required"></attribute>
+	</complexType>
+
+	<element name="item" type="dd:itemType"></element>
+	<complexType name="itemType">
+		<simpleContent>
+			<extension base="string">
+				<attribute name="count" type="int" use="required">
+				</attribute>
+			</extension>
+		</simpleContent>
+	</complexType>
+
+	<element name="field" type="dd:fieldType"></element>
+	<complexType name="fieldType">
+		<simpleContent>
+			<extension base="int">
+				<attribute name="name" type="string" use="required">
+				</attribute>
+			</extension>
+		</simpleContent>
+	</complexType>
+
+</schema>
diff --git a/meresco/components/xml_generic/schemas/facetedResults-20120917.xsd b/meresco/components/xml_generic/schemas/facetedResults-20120917.xsd
new file mode 100644
index 0000000..ec543f4
--- /dev/null
+++ b/meresco/components/xml_generic/schemas/facetedResults-20120917.xsd
@@ -0,0 +1,99 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+    Search Web Services searchRetrieve Version 1.0
+    OASIS Committee Specification Draft 01
+    7 September 2011
+    Source: http://docs.oasis-open.org/search-ws/searchRetrieve/v1.0/csd01/schemas/
+    Copyright (c) OASIS Open 2011.  All Rights Reserved.
+-->
+
+<!--  
+Editor: Ray Denenberg, Library of Congress.  rden@loc.gov 
+***** 
+-->
+
+<!--
+20120917: Added "displayTerm" element to termDefinition, Seecr <beheer@seecr.nl>
+          Allowed "terms" to be an empty collection, Seecr <beheer@seecr.nl>
+-->
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" 
+xmlns="http://docs.oasis-open.org/ns/search-ws/facetedResults" 
+targetNamespace="http://docs.oasis-open.org/ns/search-ws/facetedResults"
+elementFormDefault="qualified" 
+attributeFormDefault="unqualified" >
+	<!-- Root Declaration -->
+	<xs:element name="facetedResults" type="facetedResultsDefinition"/>
+	<!-- End Root Declaration -->
+	<!--  -->
+	<!--facetedResultsDefinition-->
+	<xs:complexType name="facetedResultsDefinition">
+		<xs:choice>
+			<xs:element ref="datasource" maxOccurs="unbounded"/>
+			<xs:element ref="facet" maxOccurs="unbounded"/>
+		</xs:choice>
+	</xs:complexType>
+	<!-- datasourceDefinition -->
+	<xs:complexType name="datasourceDefinition">
+		<xs:sequence>
+			<xs:element ref="datasourceDisplayLabel" minOccurs="0"/>
+			<xs:element ref="datasourceDescription" minOccurs="0"/>
+			<xs:element ref="baseURL" minOccurs="0"/>
+			<xs:element ref="facets"/>
+		</xs:sequence>
+	</xs:complexType>
+	<!--  -->
+	<!-- facetsDefinition -->
+	<xs:complexType name="facetsDefinition">
+		<xs:sequence>
+			<xs:element ref="facet" maxOccurs="unbounded"/>
+		</xs:sequence>
+	</xs:complexType>
+	<!-- facetDefinition  -->
+	<xs:complexType name="facetDefinition">
+		<xs:sequence>
+			<xs:element ref="facetDisplayLabel" minOccurs="0"/>
+			<xs:element ref="facetDescription" minOccurs="0"/>
+			<xs:element ref="index" minOccurs="0"/>
+			<xs:element ref="relation" minOccurs="0"/>
+			<xs:element ref="terms"/>
+		</xs:sequence>
+	</xs:complexType>
+	<!--  termsDefinition-->
+	<xs:complexType name="termsDefinition">
+		<xs:sequence>
+			<xs:element ref="term" minOccurs="0" maxOccurs="unbounded"/>
+		</xs:sequence>
+	</xs:complexType>
+	<!--  termDefinition-->
+	<xs:complexType name="termDefinition">
+		<xs:sequence>
+            <xs:element ref="displayTerm" minOccurs="0"/>
+            <xs:element ref="actualTerm"/>
+			<xs:element ref="query" minOccurs="0"/>
+			<xs:element ref="requestUrl" minOccurs="0"/>
+			<xs:element ref="count"/>
+		</xs:sequence>
+	</xs:complexType>
+	<!--  -->
+	<!--  Element Declarations -->
+	<!--  -->
+	<xs:element name="actualTerm" type="xs:string"/>
+	<xs:element name="baseURL" type="xs:string"/>
+	<xs:element name="count" type="xs:integer"/>
+	<xs:element name="datasource" type="datasourceDefinition"/>
+	<xs:element name="datasourceDescription" type="xs:string"/>
+	<xs:element name="datasourceDisplayLabel" type="xs:string"/>
+	<xs:element name="displayTerm" type="xs:string"/>
+	<xs:element name="facet" type="facetDefinition"/>
+	<xs:element name="facetBaseURL" type="xs:string"/>
+	<xs:element name="facetDisplayLabel" type="xs:string"/>
+	<xs:element name="facetDescription" type="xs:string"/>
+	<xs:element name="facets" type="facetsDefinition"/>
+	<xs:element name="index" type="xs:string"/>
+	<xs:element name="term" type="termDefinition"/>
+	<xs:element name="terms" type="termsDefinition"/>
+	<xs:element name="query" type="xs:string"/>
+	<xs:element name="relation" type="xs:string"/>
+	<xs:element name="requestUrl" type="xs:anyURI"/>
+	<!--  -->
+</xs:schema>
diff --git a/meresco/components/xml_generic/schemas/refinement-20100923.xsd b/meresco/components/xml_generic/schemas/refinement-20100923.xsd
new file mode 100644
index 0000000..31de60a
--- /dev/null
+++ b/meresco/components/xml_generic/schemas/refinement-20100923.xsd
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schema targetNamespace="http://meresco.org/namespace/refinement" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:mr="http://meresco.org/namespace/refinement">
+
+    <element name="refinement" type="mr:refinementType"/>
+	<complexType name="refinementType">
+		<sequence minOccurs="1" maxOccurs="unbounded">
+			<element ref="mr:field"></element>
+		</sequence>
+    </complexType>
+
+    <element name="field" type="mr:fieldType"/>
+    <complexType name="fieldType">
+        <sequence minOccurs="1" maxOccurs="unbounded">
+            <element ref="mr:term"></element>
+        </sequence>
+        <attribute name="name" type="string"/>
+    </complexType>
+
+    <element name="term" type="string"/>
+
+</schema>
-- 
1.7.2.5


From b5288089d501266b1a33d97095bbedadcda1e310 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 11 Feb 2013 14:47:35 +0100
Subject: [PATCH 2/6] HM/TJ: Change x-term-drilldown requests

- Multiple values now allowed for x-term-drilldown
  ?...&x-term-drilldown=field1,field2 is equivalent to ?...&x-term-drilldown=field1&x-term-drilldown=field2
- Support for drilldown pivots
  x-term-drilldown=field1/field2 will add a pivot request.
---
 meresco/components/sru/sruhandler.py |   31 ++++++++++++++++++-------------
 test/sru/sruhandlertest.py           |   21 +++++++++++++++++----
 2 files changed, 35 insertions(+), 17 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index 1044d25..eba4f3e 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -7,8 +7,8 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# Copyright (C) 2011-2012 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2013 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 SURF http://www.surf.nl
 # 
 # This file is part of "Meresco Components"
@@ -63,6 +63,7 @@ class SruHandler(Observable):
         self._includeQueryTimes = includeQueryTimes
         self._querySuggestionsCount = querySuggestionsCount
         self._drilldownMaximumMaximumResults = drilldownMaximumMaximumResults
+        self._drilldownMaximumTerms = DEFAULT_MAXIMUM_TERMS if self._drilldownMaximumMaximumResults is None else min(DEFAULT_MAXIMUM_TERMS, self._drilldownMaximumMaximumResults)
 
     def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sruArguments=None, diagnostics=None, **kwargs):
         SRU_IS_ONE_BASED = 1
@@ -245,25 +246,29 @@ class SruHandler(Observable):
             raise Exception("Unknown Record Packing: %s" % recordPacking)
 
     def _parseDrilldownArgs(self, x_term_drilldown):
-        if x_term_drilldown == None or len(x_term_drilldown) != 1:
+        if x_term_drilldown == None or len(x_term_drilldown) < 1:
             return
 
-        def splitTermAndMaximum(fieldname):
-            maxTerms = DEFAULT_MAXIMUM_TERMS if self._drilldownMaximumMaximumResults is None else min(DEFAULT_MAXIMUM_TERMS, self._drilldownMaximumMaximumResults)
-            splitted = fieldname.rsplit(":", 1)
+        def splitTermAndMaximum(request):
+            result = dict(fieldname=request, maxTerms=self._drilldownMaximumTerms, sortBy=self._drilldownSortBy)
+            splitted = request.rsplit(":", 1)
             if len(splitted) == 2:
                 try:
-                    fieldname, maxTerms = splitted[0], int(splitted[1])
+                    result['fieldname'], result['maxTerms'] = splitted[0], int(splitted[1])
                     if self._drilldownMaximumMaximumResults is not None:
-                        if maxTerms > self._drilldownMaximumMaximumResults:
-                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults > %s' % (fieldname, self._drilldownMaximumMaximumResults))
-                        elif maxTerms < 1:
-                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults < 1' % fieldname)
+                        if result['maxTerms'] > self._drilldownMaximumMaximumResults:
+                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults > %s' % (result['fieldname'], self._drilldownMaximumMaximumResults))
+                        elif result['maxTerms'] < 1:
+                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults < 1' % result['fieldname'])
                 except ValueError:
                     pass
-            return dict(fieldname=fieldname, maxTerms=maxTerms, sortBy=self._drilldownSortBy)
+            return result
 
-        return [splitTermAndMaximum(fieldname) for fieldname in x_term_drilldown[0].split(",")]
+        def parseRequest(request):
+            if '/' in request:
+                return [splitTermAndMaximum(f) for f in request.split('/')]
+            return splitTermAndMaximum(request)
+        return [parseRequest(singleRequest) for request in x_term_drilldown for singleRequest in request.split(",") if singleRequest.strip()]
 
     def _createDiagnostic(self, uri, message, details):
         additionalDiagnosticDetails = compose(self.all.additionalDiagnosticDetails())
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index 77882a1..46d0e24 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -8,8 +8,8 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# Copyright (C) 2011-2012 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2013 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 SURF http://www.surf.nl
 # Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
@@ -43,7 +43,7 @@ from weightless.core import compose, be
 
 from cqlparser import parseString
 
-from meresco.components.sru.sruparser import MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, UNSUPPORTED_VERSION, UNSUPPORTED_OPERATION, UNSUPPORTED_PARAMETER_VALUE, QUERY_FEATURE_UNSUPPORTED, SruException
+from meresco.components.sru.sruparser import SruException
 from meresco.components.sru import SruHandler, SruParser
 from meresco.components.sru.sruhandler import DRILLDOWN_SORTBY_COUNT
 from meresco.components.drilldown import SRUTermDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
@@ -93,7 +93,7 @@ class SruHandlerTest(SeecrTestCase):
         component.addObserver(observer)
 
         result = "".join(list(component._writeEchoedSearchRetrieveRequest(sruArguments=sruArguments)))
-        
+
         drilldownRequestData = DRILLDOWN_HEADER \
         + """<dd:term-drilldown>field0,field1</dd:term-drilldown>"""\
         + DRILLDOWN_FOOTER
@@ -784,6 +784,19 @@ class SruHandlerTest(SeecrTestCase):
             self.assertTrue("<details>Zo maar iets - additional details</details>" in response, response)
 
 
+    def testParseDrilldownArguments(self):
+        handler = SruHandler(drilldownSortBy='count')
+        self.assertEquals(None, handler._parseDrilldownArgs([]))
+        self.assertEquals([], handler._parseDrilldownArgs(['']))
+        self.assertEquals([{'fieldname':'field', 'maxTerms':10, 'sortBy':'count'}], handler._parseDrilldownArgs(['field']))
+        self.assertEquals([{'fieldname':'field', 'maxTerms':10, 'sortBy':'count'}], handler._parseDrilldownArgs(['field,']))
+        self.assertEquals([{'fieldname':'field', 'maxTerms':20, 'sortBy':'count'}], handler._parseDrilldownArgs(['field:20']))
+        self.assertEquals([{'fieldname':'field', 'maxTerms':20, 'sortBy':'count'}, {'fieldname':'field2', 'maxTerms':10, 'sortBy':'count'}], handler._parseDrilldownArgs(['field:20,field2']))
+        self.assertEquals([[{'fieldname':'field', 'maxTerms':20, 'sortBy':'count'}, {'fieldname':'field2', 'maxTerms':10, 'sortBy':'count'}]], handler._parseDrilldownArgs(['field:20/field2']))
+        self.assertEquals([[{'fieldname':'field', 'maxTerms':20, 'sortBy':'count'}, {'fieldname':'field2', 'maxTerms':10, 'sortBy':'count'}],{'fieldname':'field3', 'maxTerms':10, 'sortBy':'count'}], handler._parseDrilldownArgs(['field:20/field2,field3']))
+        self.assertEquals([{'fieldname':'field', 'maxTerms':20, 'sortBy':'count'}, {'fieldname':'field2', 'maxTerms':10, 'sortBy':'count'}], handler._parseDrilldownArgs(['field:20','field2']))
+
+
 def xpath(lxmlNode, path):
     return lxmlNode.xpath(path, namespaces=namespaces)
 
-- 
1.7.2.5


From 7763b27c95d440b9a6eaf9c0f5e5a99ef63f82ad Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Mon, 11 Feb 2013 16:51:22 +0100
Subject: [PATCH 3/6] HM/TJ: added json or extended xml format for drilldown

- backwards compatible , extendedFormat=False by default
- extended xml format supports pivots
- json format supports pivots
- x-drilldown-format parameter can set the requested format

Still WIP: new xsd.
---
 meresco/components/drilldown/srutermdrilldown.py |   57 +++++++--
 test/drilldown/srutermdrilldowntest.py           |  133 +++++++++++++++++++++-
 2 files changed, 173 insertions(+), 17 deletions(-)

diff --git a/meresco/components/drilldown/srutermdrilldown.py b/meresco/components/drilldown/srutermdrilldown.py
index 549cc12..be2e073 100644
--- a/meresco/components/drilldown/srutermdrilldown.py
+++ b/meresco/components/drilldown/srutermdrilldown.py
@@ -3,8 +3,8 @@
 # "Meresco Components" are components to build searchengines, repositories
 # and archives, based on "Meresco Core". 
 # 
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# Copyright (C) 2012 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012-2013 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -25,41 +25,60 @@
 ## end license ##
 
 from meresco.core import Observable, decorateWith
-from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
+from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 from xml.sax.saxutils import escape as xmlEscape, quoteattr
 from traceback import print_exc
+from simplejson import dumps
 
 from meresco.components.sru.diagnostic import generalSystemError
 
 from weightless.core import compose
 
+FORMAT_XML = 'xml'
+FORMAT_JSON = 'json'
+
 class SRUTermDrilldown(Observable):
-                
-    def extraResponseData(self, drilldownData, **kwargs):
+
+    def __init__(self, defaultFormat=FORMAT_XML, extendedFormat=False):
+        Observable.__init__(self)
+        if not extendedFormat and defaultFormat != FORMAT_XML:
+            raise ValueError("Format '%s' only supported when using extendedFormat." % defaultFormat)
+        if defaultFormat not in [FORMAT_JSON, FORMAT_XML]:
+            raise ValueError("Format '%s' not supported." % defaultFormat)
+        self._dd_item = self._dd_item_new if extendedFormat else self._dd_item_old
+        self._defaultFormat = defaultFormat
+
+    def extraResponseData(self, drilldownData, sruArguments, **kwargs):
         if drilldownData is None:
             return
+        outputFormat = sruArguments.get('x-drilldown-format', [self._defaultFormat])[0]
         try:
-            yield self._termDrilldown(drilldownData)
+            yield self._termDrilldown(drilldownData, format=outputFormat)
         except Exception, e:
             print_exc()
             yield DRILLDOWN_HEADER + "<dd:term-drilldown>"
-            yield generalSystemError(xmlEscape(e.message))
+            yield generalSystemError(xmlEscape(e.args[0]))
             yield "</dd:term-drilldown>" + DRILLDOWN_FOOTER
             return
 
     @decorateWith(DRILLDOWN_HEADER + "<dd:term-drilldown>", "</dd:term-drilldown>" + DRILLDOWN_FOOTER)
     @compose
-    def _termDrilldown(self, drilldownData):
-        for facet in drilldownData:
-            yield self._dd_navigator(facet['fieldname'], facet['terms'])
+    def _termDrilldown(self, drilldownData, format):
+        if format == 'xml':
+            for facet in drilldownData:
+                yield self._dd_navigator(facet['fieldname'], facet['terms'])
+        elif format == 'json':
+            yield dumps(drilldownData, indent=4)
+        else:
+            raise ValueError("Expected x-drilldown-format to be one of: %s" % str([FORMAT_XML, FORMAT_JSON]))
 
     def _dd_navigator(self, fieldname, terms):
         try:
             firstTerm = terms[0]
             yield '<dd:navigator name=%s>' % quoteattr(fieldname)
-            yield '<dd:item count=%s>%s</dd:item>' % (quoteattr(str(firstTerm['count'])), xmlEscape(str(firstTerm['term'])))
+            yield self._dd_item(firstTerm)
             for term in terms[1:]:
-                yield '<dd:item count=%s>%s</dd:item>' % (quoteattr(str(term['count'])), xmlEscape(str(term['term'])))
+                yield self._dd_item(term)
             yield '</dd:navigator>'
         except IndexError:
             yield '<dd:navigator name=%s/>' % quoteattr(fieldname)
@@ -67,7 +86,19 @@ class SRUTermDrilldown(Observable):
         except Exception, e:
             yield generalSystemError(xmlEscape(str(e)))
             return
-        
+
+    def _dd_item_new(self, term):
+        yield '<dd:item count=%s value=%s' % (quoteattr(str(term['count'])), quoteattr(str(term['term'])))
+        if 'pivot' in term:
+            yield '>'
+            yield self._dd_navigator(term['pivot']['fieldname'], term['pivot']['terms'])
+            yield '</dd:item>'
+        else:
+            yield '/>'
+
+    def _dd_item_old(self, term):
+        yield '<dd:item count=%s>%s</dd:item>' % (quoteattr(str(term['count'])), xmlEscape(str(term['term'])))
+
     @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
     def echoedExtraRequestData(self, sruArguments, **kwargs):
         if 'x-term-drilldown' in sruArguments and len(sruArguments['x-term-drilldown']) == 1:
diff --git a/test/drilldown/srutermdrilldowntest.py b/test/drilldown/srutermdrilldowntest.py
index 9b0b382..1e51a4f 100644
--- a/test/drilldown/srutermdrilldowntest.py
+++ b/test/drilldown/srutermdrilldowntest.py
@@ -7,8 +7,8 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
-# Copyright (C) 2011-2012 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011-2013 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2013 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -30,9 +30,15 @@
 
 from seecr.test import SeecrTestCase
 from weightless.core import compose
+from lxml.etree import parse
+from StringIO import StringIO
+from simplejson import loads
+
+from seecr.test.io import stderr_replace_decorator
 
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 from meresco.components.drilldown import SRUTermDrilldown
+from meresco.xml import xpathFirst
 
 class SRUTermDrilldownTest(SeecrTestCase):
     def testSRUTermDrilldown(self):
@@ -44,7 +50,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
                 {'fieldname': 'field2', 'terms': [{'term': 'value2_0', 'count': 3}, {'term': 'value2_1', 'count': 2}, {'term': 'value2_2', 'count': 1}]}
         ]
 
-        response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData)))
+        response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))
         
         self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
     <dd:item count="14">value0_0</dd:item>
@@ -59,6 +65,85 @@ class SRUTermDrilldownTest(SeecrTestCase):
     <dd:item count="1">value2_2</dd:item>
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
 
+    def testSRUTermDrilldownWithPivots(self):
+        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+
+        drilldownData = [
+                {
+                    'fieldname': 'field0',
+                    'terms': [
+                        {
+                            'term': 'value0',
+                            'count': 1,
+                            'pivot': {
+                                'fieldname': 'field1',
+                                'terms': [
+                                    {
+                                        'term': 'value0_0',
+                                        'count': 10,
+                                    },
+                                    {
+                                        'term': 'value0_1',
+                                        'count': 20
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            'term': 'value1',
+                            'count': 2
+                        }
+                    ]
+                }
+            ]
+
+        response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))
+
+        self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
+    <dd:item count="1" value="value0">
+        <dd:navigator name="field1">
+            <dd:item count="10" value="value0_0"/>
+            <dd:item count="20" value="value0_1"/>
+        </dd:navigator>
+    </dd:item>
+    <dd:item count="2" value="value1"/>
+</dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
+
+    def testSRUTermDrilldownWithPivotsInJson(self):
+        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+
+        drilldownData = [
+                {
+                    'fieldname': 'field0',
+                    'terms': [
+                        {
+                            'term': 'value0',
+                            'count': 1,
+                            'pivot': {
+                                'fieldname': 'field1',
+                                'terms': [
+                                    {
+                                        'term': 'value0_0',
+                                        'count': 10,
+                                    },
+                                    {
+                                        'term': 'value0_1',
+                                        'count': 20
+                                    }
+                                ]
+                            }
+                        },
+                        {
+                            'term': 'value1',
+                            'count': 2
+                        }
+                    ]
+                }
+            ]
+
+        response = parse(StringIO(''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={'x-drilldown-format': ['json']})))))
+
+        self.assertEquals(drilldownData, loads(xpathFirst(response, '//drilldown:term-drilldown/text()')))
 
     def testDrilldownNoResults(self):
         sruTermDrilldown = SRUTermDrilldown()
@@ -66,7 +151,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
                 {'fieldname': 'field0', 'terms': []},
             ]
 
-        composedGenerator = compose(sruTermDrilldown.extraResponseData(drilldownData))
+        composedGenerator = compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={}))
         result = "".join(composedGenerator)
 
         expected = DRILLDOWN_HEADER + """
@@ -76,6 +161,46 @@ class SRUTermDrilldownTest(SeecrTestCase):
         """ + DRILLDOWN_FOOTER
         self.assertEqualsWS(expected, result)
 
+    def testDefaultFormat(self):
+        self.assertRaises(ValueError, lambda: SRUTermDrilldown(defaultFormat='json'))
+        self.assertRaises(ValueError, lambda: SRUTermDrilldown(extendedFormat=True, defaultFormat='text'))
+        sruTermDrilldown = SRUTermDrilldown(defaultFormat='json', extendedFormat=True)
+        drilldownData = [
+                {
+                    'fieldname': 'field0',
+                    'terms': [
+                        {
+                            'term': 'value0',
+                            'count': 1,
+                        }
+                    ]
+                }
+            ]
+
+        response = parse(StringIO(''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))))
+
+        self.assertEquals(drilldownData, loads(xpathFirst(response, '//drilldown:term-drilldown/text()')))
+
+    @stderr_replace_decorator
+    def testWrongFormat(self):
+        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+        drilldownData = [
+                {
+                    'fieldname': 'field0',
+                    'terms': [
+                        {
+                            'term': 'value0',
+                            'count': 1,
+                        }
+                    ]
+                }
+            ]
+
+        response = parse(StringIO(''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={'x-drilldown-format':'text'})))))
+
+        self.assertEqualsWS("Expected x-drilldown-format to be one of: ['xml', 'json']", xpathFirst(response, '//drilldown:term-drilldown/diag:diagnostic/diag:message/text()'))
+
+
     def testEchoedExtraRequestData(self):
         component = SRUTermDrilldown()
 
-- 
1.7.2.5


From 726f0b2f95763383e5b2a7b450501190b18346ac Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Tue, 12 Feb 2013 09:57:19 +0100
Subject: [PATCH 4/6] TJ/HM: Default old 2007 drilldown format

---
 meresco/components/drilldown/srutermdrilldown.py |   17 ++++++++++-------
 test/drilldown/srutermdrilldowntest.py           |   14 +++++++-------
 test/sru/sruhandlertest.py                       |    2 +-
 3 files changed, 18 insertions(+), 15 deletions(-)

diff --git a/meresco/components/drilldown/srutermdrilldown.py b/meresco/components/drilldown/srutermdrilldown.py
index be2e073..1295000 100644
--- a/meresco/components/drilldown/srutermdrilldown.py
+++ b/meresco/components/drilldown/srutermdrilldown.py
@@ -34,18 +34,16 @@ from meresco.components.sru.diagnostic import generalSystemError
 
 from weightless.core import compose
 
+FORMAT_OLD_XML = 'xml2007'
 FORMAT_XML = 'xml'
 FORMAT_JSON = 'json'
 
 class SRUTermDrilldown(Observable):
 
-    def __init__(self, defaultFormat=FORMAT_XML, extendedFormat=False):
+    def __init__(self, defaultFormat=FORMAT_OLD_XML):
         Observable.__init__(self)
-        if not extendedFormat and defaultFormat != FORMAT_XML:
-            raise ValueError("Format '%s' only supported when using extendedFormat." % defaultFormat)
-        if defaultFormat not in [FORMAT_JSON, FORMAT_XML]:
+        if defaultFormat not in [FORMAT_JSON, FORMAT_XML, FORMAT_OLD_XML]:
             raise ValueError("Format '%s' not supported." % defaultFormat)
-        self._dd_item = self._dd_item_new if extendedFormat else self._dd_item_old
         self._defaultFormat = defaultFormat
 
     def extraResponseData(self, drilldownData, sruArguments, **kwargs):
@@ -64,11 +62,16 @@ class SRUTermDrilldown(Observable):
     @decorateWith(DRILLDOWN_HEADER + "<dd:term-drilldown>", "</dd:term-drilldown>" + DRILLDOWN_FOOTER)
     @compose
     def _termDrilldown(self, drilldownData, format):
-        if format == 'xml':
+        if format == FORMAT_XML:
+            self._dd_item = self._dd_item_new
             for facet in drilldownData:
                 yield self._dd_navigator(facet['fieldname'], facet['terms'])
-        elif format == 'json':
+        elif format == FORMAT_JSON:
             yield dumps(drilldownData, indent=4)
+        elif format == FORMAT_OLD_XML:
+            self._dd_item = self._dd_item_old
+            for facet in drilldownData:
+                yield self._dd_navigator(facet['fieldname'], facet['terms'])
         else:
             raise ValueError("Expected x-drilldown-format to be one of: %s" % str([FORMAT_XML, FORMAT_JSON]))
 
diff --git a/test/drilldown/srutermdrilldowntest.py b/test/drilldown/srutermdrilldowntest.py
index 1e51a4f..4319cc8 100644
--- a/test/drilldown/srutermdrilldowntest.py
+++ b/test/drilldown/srutermdrilldowntest.py
@@ -38,6 +38,7 @@ from seecr.test.io import stderr_replace_decorator
 
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 from meresco.components.drilldown import SRUTermDrilldown
+from meresco.components.drilldown.srutermdrilldown import FORMAT_JSON, FORMAT_XML
 from meresco.xml import xpathFirst
 
 class SRUTermDrilldownTest(SeecrTestCase):
@@ -51,7 +52,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
         ]
 
         response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))
-        
+
         self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
     <dd:item count="14">value0_0</dd:item>
 </dd:navigator>
@@ -66,7 +67,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
 
     def testSRUTermDrilldownWithPivots(self):
-        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+        sruTermDrilldown = SRUTermDrilldown(defaultFormat=FORMAT_XML)
 
         drilldownData = [
                 {
@@ -110,7 +111,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
 
     def testSRUTermDrilldownWithPivotsInJson(self):
-        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+        sruTermDrilldown = SRUTermDrilldown(defaultFormat=FORMAT_JSON)
 
         drilldownData = [
                 {
@@ -162,9 +163,8 @@ class SRUTermDrilldownTest(SeecrTestCase):
         self.assertEqualsWS(expected, result)
 
     def testDefaultFormat(self):
-        self.assertRaises(ValueError, lambda: SRUTermDrilldown(defaultFormat='json'))
-        self.assertRaises(ValueError, lambda: SRUTermDrilldown(extendedFormat=True, defaultFormat='text'))
-        sruTermDrilldown = SRUTermDrilldown(defaultFormat='json', extendedFormat=True)
+        self.assertRaises(ValueError, lambda: SRUTermDrilldown(defaultFormat='text'))
+        sruTermDrilldown = SRUTermDrilldown(defaultFormat='json')
         drilldownData = [
                 {
                     'fieldname': 'field0',
@@ -183,7 +183,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
 
     @stderr_replace_decorator
     def testWrongFormat(self):
-        sruTermDrilldown = SRUTermDrilldown(extendedFormat=True)
+        sruTermDrilldown = SRUTermDrilldown()
         drilldownData = [
                 {
                     'fieldname': 'field0',
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index 46d0e24..db474db 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -149,7 +149,7 @@ class SruHandlerTest(SeecrTestCase):
                 {'fieldname': 'field2', 'terms': [{'term': 'value2_0', 'count': 3}, {'term': 'value2_1', 'count': 2}, {'term': 'value2_2', 'count': 1}]}
             ]
         sruHandler.addObserver(sruTermDrilldown)
-        result = "".join(sruHandler._writeExtraResponseData(drilldownData=drilldownData, **arguments))
+        result = "".join(sruHandler._writeExtraResponseData(drilldownData=drilldownData, sruArguments={}, **arguments))
         self.assertEqualsWS("""<srw:extraResponseData><dd:drilldown\n    xmlns:dd="http://meresco.org/namespace/drilldown"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/drilldown-20070730.xsd"><dd:term-drilldown><dd:navigator name="field0"><dd:item count="14">value0_0</dd:item></dd:navigator><dd:navigator name="field1"><dd:item count="13">value1_0</dd:item><dd:item count="11">value1_1</dd:item></dd:navigator><dd:navigator name="field2"><dd:item count="3">value2_0</dd:item><dd:item count="2">value2_1</dd:item><dd:item count="1">value2_2</dd:item></dd:navigator></dd:term-drilldown></dd:drilldown></srw:extraResponseData>""" , result)
 
     def testDrilldownResultInExecuteQuery(self):
-- 
1.7.2.5


From 3c00ffb8e99ff9a91ea7e5ce0b5e8723d4fbb76c Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Tue, 12 Feb 2013 12:01:54 +0100
Subject: [PATCH 5/6] TJ/HM: New drilldown xsd for support with facets and json format

---
 meresco/components/drilldown/drilldown.py          |    9 ++-
 meresco/components/drilldown/srutermdrilldown.py   |   24 ++++---
 .../xml_generic/schemas/drilldown-20130212.xsd     |   63 ++++++++++++++++++++
 test/drilldown/srutermdrilldowntest.py             |   44 ++++++++++++--
 4 files changed, 121 insertions(+), 19 deletions(-)
 create mode 100644 meresco/components/xml_generic/schemas/drilldown-20130212.xsd

diff --git a/meresco/components/drilldown/drilldown.py b/meresco/components/drilldown/drilldown.py
index 952a030..f6ea8b2 100644
--- a/meresco/components/drilldown/drilldown.py
+++ b/meresco/components/drilldown/drilldown.py
@@ -29,8 +29,13 @@
 
 DEFAULT_MAXIMUM_TERMS = 10
 
-DRILLDOWN_HEADER = """<dd:drilldown
+_DRILLDOWN_XSD_2007 = "drilldown-20070730.xsd"
+_DRILLDOWN_XSD_2013 = "drilldown-20130212.xsd"
+_DRILLDOWN_HEADER = """<dd:drilldown
     xmlns:dd="http://meresco.org/namespace/drilldown"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/drilldown-20070730.xsd">"""
+    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/%s">"""
+
+DRILLDOWN_HEADER = _DRILLDOWN_HEADER % _DRILLDOWN_XSD_2007
+
 DRILLDOWN_FOOTER = "</dd:drilldown>"
\ No newline at end of file
diff --git a/meresco/components/drilldown/srutermdrilldown.py b/meresco/components/drilldown/srutermdrilldown.py
index 1295000..2315de0 100644
--- a/meresco/components/drilldown/srutermdrilldown.py
+++ b/meresco/components/drilldown/srutermdrilldown.py
@@ -24,8 +24,8 @@
 # 
 ## end license ##
 
-from meresco.core import Observable, decorateWith
-from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
+from meresco.core import Observable, decorateWith, decorate
+from drilldown import _DRILLDOWN_HEADER, _DRILLDOWN_XSD_2007, _DRILLDOWN_XSD_2013, DRILLDOWN_FOOTER
 from xml.sax.saxutils import escape as xmlEscape, quoteattr
 from traceback import print_exc
 from simplejson import dumps
@@ -50,16 +50,17 @@ class SRUTermDrilldown(Observable):
         if drilldownData is None:
             return
         outputFormat = sruArguments.get('x-drilldown-format', [self._defaultFormat])[0]
+        drilldownHeader = _DRILLDOWN_HEADER % (_DRILLDOWN_XSD_2007 if outputFormat == FORMAT_OLD_XML else _DRILLDOWN_XSD_2013)
         try:
-            yield self._termDrilldown(drilldownData, format=outputFormat)
+            yield decorate(drilldownHeader, self._termDrilldown(drilldownData, format=outputFormat), DRILLDOWN_FOOTER)
         except Exception, e:
             print_exc()
-            yield DRILLDOWN_HEADER + "<dd:term-drilldown>"
+            yield drilldownHeader + "<dd:term-drilldown>"
             yield generalSystemError(xmlEscape(e.args[0]))
             yield "</dd:term-drilldown>" + DRILLDOWN_FOOTER
             return
 
-    @decorateWith(DRILLDOWN_HEADER + "<dd:term-drilldown>", "</dd:term-drilldown>" + DRILLDOWN_FOOTER)
+    @decorateWith("<dd:term-drilldown>", "</dd:term-drilldown>")
     @compose
     def _termDrilldown(self, drilldownData, format):
         if format == FORMAT_XML:
@@ -67,7 +68,7 @@ class SRUTermDrilldown(Observable):
             for facet in drilldownData:
                 yield self._dd_navigator(facet['fieldname'], facet['terms'])
         elif format == FORMAT_JSON:
-            yield dumps(drilldownData, indent=4)
+            yield "<dd:json>%s</dd:json>" % dumps(drilldownData, indent=4)
         elif format == FORMAT_OLD_XML:
             self._dd_item = self._dd_item_old
             for facet in drilldownData:
@@ -102,9 +103,12 @@ class SRUTermDrilldown(Observable):
     def _dd_item_old(self, term):
         yield '<dd:item count=%s>%s</dd:item>' % (quoteattr(str(term['count'])), xmlEscape(str(term['term'])))
 
-    @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
     def echoedExtraRequestData(self, sruArguments, **kwargs):
         if 'x-term-drilldown' in sruArguments and len(sruArguments['x-term-drilldown']) == 1:
-            yield "<dd:term-drilldown>"
-            yield xmlEscape(sruArguments['x-term-drilldown'][0])
-            yield "</dd:term-drilldown>"
+            outputFormat = sruArguments.get('x-drilldown-format', [self._defaultFormat])[0]
+            drilldownHeader = _DRILLDOWN_HEADER % (_DRILLDOWN_XSD_2007 if outputFormat == FORMAT_OLD_XML else _DRILLDOWN_XSD_2013)
+            yield drilldownHeader
+            yield "<dd:term-drilldown>%s</dd:term-drilldown>" % xmlEscape(sruArguments['x-term-drilldown'][0])
+            if 'x-drilldown-format' in sruArguments:
+                yield "<dd:drilldown-format>%s</dd:drilldown-format>" % xmlEscape(outputFormat)
+            yield DRILLDOWN_FOOTER
diff --git a/meresco/components/xml_generic/schemas/drilldown-20130212.xsd b/meresco/components/xml_generic/schemas/drilldown-20130212.xsd
new file mode 100644
index 0000000..8f8fc69
--- /dev/null
+++ b/meresco/components/xml_generic/schemas/drilldown-20130212.xsd
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schema targetNamespace="http://meresco.org/namespace/drilldown" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dd="http://meresco.org/namespace/drilldown">
+
+    <element name="drilldown" type="dd:drilldownType"/>
+    <complexType name="drilldownType">
+        <all minOccurs="1" maxOccurs="1">
+                <element ref="dd:term-drilldown" minOccurs="0" maxOccurs="1"></element>
+                <element ref="dd:field-drilldown" minOccurs="0" maxOccurs="1"></element>
+        </all>
+    </complexType>
+
+    <element name="term-drilldown" type="dd:termDrilldownType"/>
+    <complexType name="termDrilldownType">
+        <choice minOccurs="1" maxOccurs="1">
+            <element ref="dd:json"></element>
+            <sequence minOccurs="1" maxOccurs="unbounded">
+                <element ref="dd:navigator"></element>
+            </sequence>
+        </choice>
+    </complexType>
+
+    <element name="field-drilldown" type="dd:fieldDrilldownType"/>
+    <complexType name="fieldDrilldownType">
+        <sequence minOccurs="1" maxOccurs="unbounded">
+            <element ref="dd:field"></element>
+        </sequence>
+    </complexType>
+
+    <element name="navigator" type="dd:navigatorType"></element>
+    <complexType name="navigatorType">
+        <sequence maxOccurs="unbounded" minOccurs="1">
+            <element ref="dd:item"></element>
+        </sequence>
+        <attribute name="name" type="string" use="required"></attribute>
+    </complexType>
+
+    <element name="item" type="dd:itemType"></element>
+    <complexType name="itemType">
+        <sequence maxOccurs="unbounded" minOccurs="0">
+            <element ref="dd:navigator"></element>
+        </sequence>
+        <attribute name="count" type="int" use="required"></attribute>
+        <attribute name="value" type="string" use="required"></attribute>
+    </complexType>
+
+    <element name="field" type="dd:fieldType"></element>
+    <complexType name="fieldType">
+        <simpleContent>
+            <extension base="int">
+                <attribute name="name" type="string" use="required">
+                </attribute>
+            </extension>
+        </simpleContent>
+    </complexType>
+
+    <element name="json" type="dd:jsonType"></element>
+    <complexType name="jsonType">
+        <simpleContent>
+            <extension base="string"></extension>
+        </simpleContent>
+    </complexType>
+
+</schema>
diff --git a/test/drilldown/srutermdrilldowntest.py b/test/drilldown/srutermdrilldowntest.py
index 4319cc8..03344a5 100644
--- a/test/drilldown/srutermdrilldowntest.py
+++ b/test/drilldown/srutermdrilldowntest.py
@@ -30,16 +30,20 @@
 
 from seecr.test import SeecrTestCase
 from weightless.core import compose
-from lxml.etree import parse
+from lxml.etree import parse, XML
 from StringIO import StringIO
 from simplejson import loads
+from os.path import join, dirname, basename
 
 from seecr.test.io import stderr_replace_decorator
 
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
+from meresco.components.drilldown.drilldown import _DRILLDOWN_HEADER, _DRILLDOWN_XSD_2013
 from meresco.components.drilldown import SRUTermDrilldown
 from meresco.components.drilldown.srutermdrilldown import FORMAT_JSON, FORMAT_XML
-from meresco.xml import xpathFirst
+from meresco.components.xml_generic.validate import assertValid
+from meresco.components.xml_generic import schemasPath
+from meresco.xml import xpathFirst, namespaces
 
 class SRUTermDrilldownTest(SeecrTestCase):
     def testSRUTermDrilldown(self):
@@ -66,6 +70,9 @@ class SRUTermDrilldownTest(SeecrTestCase):
     <dd:item count="1">value2_2</dd:item>
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
 
+        xsdFilename = self._getXsdFilename(response)
+        assertValid(response, join(schemasPath, xsdFilename))
+
     def testSRUTermDrilldownWithPivots(self):
         sruTermDrilldown = SRUTermDrilldown(defaultFormat=FORMAT_XML)
 
@@ -100,7 +107,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
 
         response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))
 
-        self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
+        self.assertEqualsWS(_DRILLDOWN_HEADER % _DRILLDOWN_XSD_2013 + """<dd:term-drilldown><dd:navigator name="field0">
     <dd:item count="1" value="value0">
         <dd:navigator name="field1">
             <dd:item count="10" value="value0_0"/>
@@ -109,6 +116,8 @@ class SRUTermDrilldownTest(SeecrTestCase):
     </dd:item>
     <dd:item count="2" value="value1"/>
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
+        xsdFilename = self._getXsdFilename(response)
+        assertValid(response, join(schemasPath, xsdFilename))
 
     def testSRUTermDrilldownWithPivotsInJson(self):
         sruTermDrilldown = SRUTermDrilldown(defaultFormat=FORMAT_JSON)
@@ -142,9 +151,12 @@ class SRUTermDrilldownTest(SeecrTestCase):
                 }
             ]
 
-        response = parse(StringIO(''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={'x-drilldown-format': ['json']})))))
+        response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={'x-drilldown-format': ['json']})))
+        self.assertEquals(drilldownData, loads(xpathFirst(XML(response), '//drilldown:term-drilldown/drilldown:json/text()')))
+
+        xsdFilename = self._getXsdFilename(response)
+        assertValid(response, join(schemasPath, xsdFilename))
 
-        self.assertEquals(drilldownData, loads(xpathFirst(response, '//drilldown:term-drilldown/text()')))
 
     def testDrilldownNoResults(self):
         sruTermDrilldown = SRUTermDrilldown()
@@ -179,7 +191,7 @@ class SRUTermDrilldownTest(SeecrTestCase):
 
         response = parse(StringIO(''.join(compose(sruTermDrilldown.extraResponseData(drilldownData, sruArguments={})))))
 
-        self.assertEquals(drilldownData, loads(xpathFirst(response, '//drilldown:term-drilldown/text()')))
+        self.assertEquals(drilldownData, loads(xpathFirst(response, '//drilldown:term-drilldown/drilldown:json/text()')))
 
     @stderr_replace_decorator
     def testWrongFormat(self):
@@ -205,7 +217,25 @@ class SRUTermDrilldownTest(SeecrTestCase):
         component = SRUTermDrilldown()
 
         result = "".join(list(component.echoedExtraRequestData(sruArguments={'x-term-drilldown': ['field0,field1'], 'version': '1.1'}, version='1.1')))
-        
+
         self.assertEqualsWS(DRILLDOWN_HEADER \
         + """<dd:term-drilldown>field0,field1</dd:term-drilldown>"""\
         + DRILLDOWN_FOOTER, result)
+
+    def testEchoedExtraRequestDataWithDrilldownFormat(self):
+        component = SRUTermDrilldown()
+
+        result = "".join(list(component.echoedExtraRequestData(sruArguments={'x-term-drilldown': ['field0,field1'], 'version': '1.1', 'x-drilldown-format': ['json']}, version='1.1')))
+
+        self.assertEqualsWS(_DRILLDOWN_HEADER % _DRILLDOWN_XSD_2013 \
+        + """<dd:term-drilldown>field0,field1</dd:term-drilldown>"""\
+        + """<dd:drilldown-format>json</dd:drilldown-format>"""\
+        + DRILLDOWN_FOOTER, result)
+
+    def _getXsdFilename(self, response):
+        schemaLocation = xpathFirst(XML(response), '/drilldown:drilldown/@xsi:schemaLocation')
+        namespace, xsd = schemaLocation.split()
+        self.assertEquals(namespaces['drilldown'], namespace)
+        self.assertEquals('http://meresco.org/files/xsd', dirname(xsd))
+        return basename(xsd)
+
-- 
1.7.2.5


From 79cf9f6c14fc8d5c52eced746cde8288c6ce6c62 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Tue, 12 Feb 2013 14:11:52 +0100
Subject: [PATCH 6/6] HM/TJ: extraRequestData response with valid xsd for new drilldown-format.

---
 meresco/components/drilldown/srutermdrilldown.py   |   19 ++++--
 .../xml_generic/schemas/drilldown-20070730.xsd     |   10 +++
 .../xml_generic/schemas/drilldown-20130212.xsd     |   63 ++++++++++++-------
 test/drilldown/srutermdrilldowntest.py             |   28 +++++++--
 4 files changed, 85 insertions(+), 35 deletions(-)

diff --git a/meresco/components/drilldown/srutermdrilldown.py b/meresco/components/drilldown/srutermdrilldown.py
index 2315de0..33815ad 100644
--- a/meresco/components/drilldown/srutermdrilldown.py
+++ b/meresco/components/drilldown/srutermdrilldown.py
@@ -104,11 +104,20 @@ class SRUTermDrilldown(Observable):
         yield '<dd:item count=%s>%s</dd:item>' % (quoteattr(str(term['count'])), xmlEscape(str(term['term'])))
 
     def echoedExtraRequestData(self, sruArguments, **kwargs):
-        if 'x-term-drilldown' in sruArguments and len(sruArguments['x-term-drilldown']) == 1:
+        requestedTerms = [singleRequest for request in sruArguments.get('x-term-drilldown',[]) for singleRequest in request.split(',') if singleRequest.strip()]
+        if requestedTerms:
             outputFormat = sruArguments.get('x-drilldown-format', [self._defaultFormat])[0]
-            drilldownHeader = _DRILLDOWN_HEADER % (_DRILLDOWN_XSD_2007 if outputFormat == FORMAT_OLD_XML else _DRILLDOWN_XSD_2013)
-            yield drilldownHeader
-            yield "<dd:term-drilldown>%s</dd:term-drilldown>" % xmlEscape(sruArguments['x-term-drilldown'][0])
+            if outputFormat == FORMAT_OLD_XML:
+                yield _DRILLDOWN_HEADER % _DRILLDOWN_XSD_2007
+                yield "<dd:term-drilldown>%s</dd:term-drilldown>" % xmlEscape(','.join(requestedTerms))
+                yield DRILLDOWN_FOOTER
+                return
+
+            yield _DRILLDOWN_HEADER % _DRILLDOWN_XSD_2013
+            yield '<dd:request>'
+            for term in requestedTerms:
+                yield "<dd:x-term-drilldown>%s</dd:x-term-drilldown>" % xmlEscape(term)
             if 'x-drilldown-format' in sruArguments:
-                yield "<dd:drilldown-format>%s</dd:drilldown-format>" % xmlEscape(outputFormat)
+                yield "<dd:x-drilldown-format>%s</dd:x-drilldown-format>" % xmlEscape(outputFormat)
+            yield '</dd:request>'
             yield DRILLDOWN_FOOTER
diff --git a/meresco/components/xml_generic/schemas/drilldown-20070730.xsd b/meresco/components/xml_generic/schemas/drilldown-20070730.xsd
index 270b8b3..afc2648 100644
--- a/meresco/components/xml_generic/schemas/drilldown-20070730.xsd
+++ b/meresco/components/xml_generic/schemas/drilldown-20070730.xsd
@@ -1,5 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <schema targetNamespace="http://meresco.org/namespace/drilldown" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dd="http://meresco.org/namespace/drilldown">
+	<!--
+
+                    ___  ___  ___  ___ _ _
+              /\   / __|/ _ \/ _ \/ __| '_|
+              \//\ \__ \  __/  __/ (__| |
+  Crafted by  /\\/ |___/\___|\___|\___|_|
+              \/
+                   Software Craftsmanship
+                   http://seecr.nl
+    -->
 
 	<element name="drilldown" type="dd:drilldownType"/>
 	<complexType name="drilldownType">
diff --git a/meresco/components/xml_generic/schemas/drilldown-20130212.xsd b/meresco/components/xml_generic/schemas/drilldown-20130212.xsd
index 8f8fc69..6b14eec 100644
--- a/meresco/components/xml_generic/schemas/drilldown-20130212.xsd
+++ b/meresco/components/xml_generic/schemas/drilldown-20130212.xsd
@@ -1,20 +1,33 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <schema targetNamespace="http://meresco.org/namespace/drilldown" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:dd="http://meresco.org/namespace/drilldown">
+    <!--
+
+                    ___  ___  ___  ___ _ _
+              /\   / __|/ _ \/ _ \/ __| '_|
+              \//\ \__ \  __/  __/ (__| |
+  Crafted by  /\\/ |___/\___|\___|\___|_|
+              \/
+                   Software Craftsmanship
+                   http://seecr.nl
+    -->
 
     <element name="drilldown" type="dd:drilldownType"/>
     <complexType name="drilldownType">
-        <all minOccurs="1" maxOccurs="1">
-                <element ref="dd:term-drilldown" minOccurs="0" maxOccurs="1"></element>
-                <element ref="dd:field-drilldown" minOccurs="0" maxOccurs="1"></element>
-        </all>
+        <choice minOccurs="1" maxOccurs="1">
+            <sequence minOccurs="1" maxOccurs="1">
+                    <element ref="dd:term-drilldown" minOccurs="0" maxOccurs="1"/>
+                    <element ref="dd:field-drilldown" minOccurs="0" maxOccurs="1"/>
+            </sequence>
+            <element ref="dd:request" minOccurs="0" maxOccurs="1"/>
+        </choice>
     </complexType>
 
     <element name="term-drilldown" type="dd:termDrilldownType"/>
     <complexType name="termDrilldownType">
         <choice minOccurs="1" maxOccurs="1">
-            <element ref="dd:json"></element>
+            <element ref="dd:json"/>
             <sequence minOccurs="1" maxOccurs="unbounded">
-                <element ref="dd:navigator"></element>
+                <element ref="dd:navigator"/>
             </sequence>
         </choice>
     </complexType>
@@ -22,42 +35,46 @@
     <element name="field-drilldown" type="dd:fieldDrilldownType"/>
     <complexType name="fieldDrilldownType">
         <sequence minOccurs="1" maxOccurs="unbounded">
-            <element ref="dd:field"></element>
+            <element ref="dd:field"/>
         </sequence>
     </complexType>
 
-    <element name="navigator" type="dd:navigatorType"></element>
+    <element name="request" type="dd:requestType"/>
+    <complexType name="requestType">
+        <sequence minOccurs="1" maxOccurs="unbounded">
+            <element ref="dd:x-term-drilldown" maxOccurs="unbounded"/>
+            <element ref="dd:x-drilldown-format"/>
+        </sequence>
+    </complexType>
+
+    <element name="navigator" type="dd:navigatorType"/>
     <complexType name="navigatorType">
         <sequence maxOccurs="unbounded" minOccurs="1">
-            <element ref="dd:item"></element>
+            <element ref="dd:item"/>
         </sequence>
-        <attribute name="name" type="string" use="required"></attribute>
+        <attribute name="name" type="string" use="required"/>
     </complexType>
 
-    <element name="item" type="dd:itemType"></element>
+    <element name="item" type="dd:itemType"/>
     <complexType name="itemType">
         <sequence maxOccurs="unbounded" minOccurs="0">
-            <element ref="dd:navigator"></element>
+            <element ref="dd:navigator"/>
         </sequence>
-        <attribute name="count" type="int" use="required"></attribute>
-        <attribute name="value" type="string" use="required"></attribute>
+        <attribute name="count" type="int" use="required"/>
+        <attribute name="value" type="string" use="required"/>
     </complexType>
 
-    <element name="field" type="dd:fieldType"></element>
+    <element name="field" type="dd:fieldType"/>
     <complexType name="fieldType">
         <simpleContent>
             <extension base="int">
-                <attribute name="name" type="string" use="required">
-                </attribute>
+                <attribute name="name" type="string" use="required"/>
             </extension>
         </simpleContent>
     </complexType>
 
-    <element name="json" type="dd:jsonType"></element>
-    <complexType name="jsonType">
-        <simpleContent>
-            <extension base="string"></extension>
-        </simpleContent>
-    </complexType>
+    <element name="json" type="string"/>
+    <element name="x-term-drilldown" type="string"/>
+    <element name="x-drilldown-format" type="string"/>
 
 </schema>
diff --git a/test/drilldown/srutermdrilldowntest.py b/test/drilldown/srutermdrilldowntest.py
index 03344a5..2bd6a7a 100644
--- a/test/drilldown/srutermdrilldowntest.py
+++ b/test/drilldown/srutermdrilldowntest.py
@@ -157,7 +157,6 @@ class SRUTermDrilldownTest(SeecrTestCase):
         xsdFilename = self._getXsdFilename(response)
         assertValid(response, join(schemasPath, xsdFilename))
 
-
     def testDrilldownNoResults(self):
         sruTermDrilldown = SRUTermDrilldown()
         drilldownData = [
@@ -222,15 +221,30 @@ class SRUTermDrilldownTest(SeecrTestCase):
         + """<dd:term-drilldown>field0,field1</dd:term-drilldown>"""\
         + DRILLDOWN_FOOTER, result)
 
-    def testEchoedExtraRequestDataWithDrilldownFormat(self):
+    def testEchoedExtraRequestDataWithJsonFormat(self):
         component = SRUTermDrilldown()
 
-        result = "".join(list(component.echoedExtraRequestData(sruArguments={'x-term-drilldown': ['field0,field1'], 'version': '1.1', 'x-drilldown-format': ['json']}, version='1.1')))
+        result = "".join(list(component.echoedExtraRequestData(sruArguments={'x-term-drilldown': ['field0/field1,field2','field3'], 'version': '1.1', 'x-drilldown-format': ['json']}, version='1.1')))
 
-        self.assertEqualsWS(_DRILLDOWN_HEADER % _DRILLDOWN_XSD_2013 \
-        + """<dd:term-drilldown>field0,field1</dd:term-drilldown>"""\
-        + """<dd:drilldown-format>json</dd:drilldown-format>"""\
-        + DRILLDOWN_FOOTER, result)
+        self.assertEqualsWS(_DRILLDOWN_HEADER % _DRILLDOWN_XSD_2013 + """
+            <dd:request>
+                <dd:x-term-drilldown>field0/field1</dd:x-term-drilldown>
+                <dd:x-term-drilldown>field2</dd:x-term-drilldown>
+                <dd:x-term-drilldown>field3</dd:x-term-drilldown>
+                <dd:x-drilldown-format>json</dd:x-drilldown-format>
+            </dd:request>""" +\
+            DRILLDOWN_FOOTER, result)
+
+        xsdFilename = self._getXsdFilename(result)
+        assertValid(result, join(schemasPath, xsdFilename))
+        assertValid(open(join(schemasPath, xsdFilename)).read(), join(schemasPath, 'XMLSchema.xsd'))
+
+    def testEchoedExtraRequestDataWithEmptyTermDrilldownFormat(self):
+        component = SRUTermDrilldown(defaultFormat=FORMAT_XML)
+
+        result = "".join(list(component.echoedExtraRequestData(sruArguments={'x-term-drilldown': [''], 'version': '1.1'}, version='1.1')))
+
+        self.assertEqualsWS("", result)
 
     def _getXsdFilename(self, response):
         schemaLocation = xpathFirst(XML(response), '/drilldown:drilldown/@xsi:schemaLocation')
-- 
1.7.2.5

