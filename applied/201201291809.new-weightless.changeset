Changeset created on Sun Jan 29 18:09:55 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Meresco Components make use of the new weightless (0.7)

    Meresco Components now uses the new version (0.7) of Weightless Core and
    the comming 4.0 version of Meresco Core.

    These version changes include code adaptions like:
    - Transparant -> Transparent (Dutch to English)
    - Renaming of observable message like 'asyncany' to 'any'.
    - Rewrote imports, (be now comes from weightless.core)
    - Updatede licenses.
    - Refactored some for-loops.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/4.0-beta2-Seecr/version_0

Only in version_0: build
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/deps.txt /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/deps.txt
--- version_0/deps.txt	2012-01-16 13:37:10.000000000 +0100
+++ version_1/deps.txt	2012-01-29 19:09:48.000000000 +0100
@@ -10,8 +10,8 @@
 python-lxml (>=2.1)
 python-lxml (<<3.0)
 python-magic
-python-meresco-core (>= 3.1.7)
-python-meresco-core (<< 3.2)
+python-meresco-core (>= 4.0)
+python-meresco-core (<< 4.1)
 python-meresco-xml (>= 1.1)
 python-meresco-xml (<< 2)
 python-storage (>=5.1.9)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/autocomplete/autocomplete.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/autocomplete/autocomplete.py
--- version_0/meresco/components/autocomplete/autocomplete.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/autocomplete/autocomplete.py	2012-01-29 19:09:48.000000000 +0100
@@ -69,8 +69,8 @@
         
         yield httputils.okXml
         yield '<?xml version="1.0" encoding="utf-8"?><root>'
-        for item, count in self.any.prefixSearch(fieldname=fieldname, prefix=prefix,
-                maxresults=self._maxresults):
+        itemCounts = yield self.any.prefixSearch(fieldname=fieldname, prefix=prefix, maxresults=self._maxresults)
+        for item, count in itemCounts:
             escapedItem = escapeXml(item)
             yield """<item count="%s">%s</item>""" % (count, '%s=%s' % (label, escapedItem) if label else escapedItem)
         yield '</root>'
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/combineparts.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/combineparts.py
--- version_0/meresco/components/combineparts.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/combineparts.py	2012-01-29 19:09:48.000000000 +0100
@@ -24,12 +24,13 @@
 # 
 ## end license ##
 
-from meresco.core import Transparant
+from meresco.core import Transparent
+from weightless.core import compose
 from xml.sax.saxutils import escape as xmlEscape
 
-class CombineParts(Transparant):
+class CombineParts(Transparent):
     def __init__(self, combinations, allowMissingParts=None):
-        Transparant.__init__(self)
+        Transparent.__init__(self)
         self._combinations = combinations
         self._allowMissingParts = allowMissingParts or []
 
@@ -40,7 +41,7 @@
 
         substuff = []
         for subpart in self._combinations[partname]:
-            subgenerator = self.all.yieldRecord(identifier=identifier, partname=subpart)
+            subgenerator = compose(self.all.yieldRecord(identifier=identifier, partname=subpart))
             try: 
                 substuff.append((subpart, subgenerator.next(), subgenerator))
             except IOError:
@@ -51,7 +52,8 @@
         for subpart, firstResult, remaining in substuff:
             yield '<doc:part name="%s">' % xmlEscape(subpart)
             yield firstResult
-            yield remaining
+            for data in remaining:
+                yield data
             yield '</doc:part>'
         yield '</doc:document>'
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/cqlconversion.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/cqlconversion.py
--- version_0/meresco/components/cqlconversion.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/cqlconversion.py	2012-01-29 19:09:48.000000000 +0100
@@ -33,13 +33,10 @@
 from cqlparser import CqlVisitor
 
 class CQLConversion(Converter):
-    def __init__(self, astConversion, name=None, fromKwarg=None, toKwarg=None):
+    def __init__(self, astConversion, fromKwarg, toKwarg=None, name=None):
         Converter.__init__(self, name=name, fromKwarg=fromKwarg, toKwarg=toKwarg)
         self._astConversion = astConversion
 
-    def _canConvert(self, anObject):
-        return isinstance(anObject, CQLAbstractSyntaxNode)
-
     def _convert(self, cqlAst):
         return self._astConversion(cqlAst)
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/cqlsuggester.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/cqlsuggester.py
--- version_0/meresco/components/cqlsuggester.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/cqlsuggester.py	2012-01-29 19:09:47.000000000 +0100
@@ -35,5 +35,6 @@
     def suggestForCql(self, cqlAST) :
         termlist = getAllTerms(cqlAST)
         for term in termlist:
-            return self.asyncany.suggestionsFor(term)
+            suggestions = yield self.any.suggestionsFor(term)
+            raise StopIteration(suggestions)
            
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/crosswalk.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/crosswalk.py
--- version_0/meresco/components/crosswalk.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/crosswalk.py	2012-01-29 19:09:47.000000000 +0100
@@ -28,7 +28,6 @@
 from StringIO import StringIO
 from lxml.etree import parse, XMLParser, _ElementTree
 from meresco.xml import XMLRewrite
-from cq2utils.xmlutils import findNamespaces
 from glob import glob
 from os.path import basename, dirname, abspath, join
 
@@ -73,10 +72,10 @@
             return self.convert(anObject)
         return anObject
 
-    def unknown(self, method, *args, **kwargs):
+    def all_unknown(self, method, *args, **kwargs):
         newArgs = [self._detectAndConvert(arg) for arg in args]
         newKwargs = dict((key, self._detectAndConvert(value)) for key, value in kwargs.items())
-        return self.all.unknown(method, *newArgs, **newKwargs)
+        yield self.all.unknown(method, *newArgs, **newKwargs)
 
     def convert(self, lxmlNode):
         if type(lxmlNode) == _ElementTree:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/drilldown/srufielddrilldown.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/drilldown/srufielddrilldown.py
--- version_0/meresco/components/drilldown/srufielddrilldown.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/drilldown/srufielddrilldown.py	2012-01-29 19:09:47.000000000 +0100
@@ -35,8 +35,6 @@
 from meresco.core.observable import Observable
 from meresco.core.generatorutils import decorateWith
 
-from weightless.core import compose
-
 from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 
 class SRUFieldDrilldown(Observable):
@@ -56,7 +54,7 @@
         drilldownResult = []
         for field in fields:
             cqlString = '(%s) AND %s=%s' % (query, field, term)
-            response = yield self.asyncany.executeQuery(cqlAbstractSyntaxTree=parseCQL(cqlString))
+            response = yield self.any.executeQuery(cqlAbstractSyntaxTree=parseCQL(cqlString))
             drilldownResult.append((field, response.total))
         raise StopIteration(drilldownResult)
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/drilldown/srutermdrilldown.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/drilldown/srutermdrilldown.py
--- version_0/meresco/components/drilldown/srutermdrilldown.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/drilldown/srutermdrilldown.py	2012-01-29 19:09:47.000000000 +0100
@@ -30,6 +30,8 @@
 
 from meresco.components.sru.diagnostic import generalSystemError
 
+from weightless.core import compose
+
 class SRUTermDrilldown(Observable):
                 
     def extraResponseData(self, drilldownData, **kwargs):
@@ -45,6 +47,7 @@
             return
 
     @decorateWith(DRILLDOWN_HEADER + "<dd:term-drilldown>", "</dd:term-drilldown>" + DRILLDOWN_FOOTER)
+    @compose
     def _termDrilldown(self, drilldownData):
         for fieldname, termCounts in drilldownData:
             yield self._dd_navigator(fieldname, termCounts)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/fieldlets.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/fieldlets.py
--- version_0/meresco/components/fieldlets.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/fieldlets.py	2012-01-29 19:09:48.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -27,11 +27,12 @@
 # 
 ## end license ##
 
-from meresco.core import Transparant, Observable
+from meresco.core import Transparent, Observable
+from meresco.core.generatorutils import asyncnoreturnvalue
 
-class _Fieldlet(Transparant):
+class _Fieldlet(Transparent):
     def __init__(self, method):
-        Transparant.__init__(self)
+        Transparent.__init__(self)
         self._method = method
 
 class FilterFieldValue(_Fieldlet):
@@ -60,6 +61,7 @@
         self._name = name
         self._value = value
 
+    @asyncnoreturnvalue
     def add(self, *args, **kwargs):
         self.do.addField(name=self._name, value=self._value)
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/fields2xmlfields.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/fields2xmlfields.py
--- version_0/meresco/components/fields2xmlfields.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/fields2xmlfields.py	2012-01-29 19:09:47.000000000 +0100
@@ -37,10 +37,10 @@
         self._namespace = namespace
         self.txs = {}
 
-    def begin(self):
-        tx = self.ctx.tx
-        if tx.name != self._transactionName:
+    def begin(self, name):
+        if name != self._transactionName:
             return
+        tx = self.ctx.tx
         tx.join(self)
         self.txs[tx.getId()] = []
 
@@ -48,15 +48,15 @@
         tx = self.ctx.tx
         self.txs[tx.getId()].append((name, value))
 
-    def commit(self):
-        tx = self.ctx.tx
-        fields = self.txs.pop(tx.getId())
+    def commit(self, id):
+        fields = self.txs.pop(id)
         if not fields:
             return
-        
+
+        tx = self.ctx.tx
         ns = self._namespace != None and ' xmlns="%s"' % self._namespace or ''
         xml = '<fields%s>%s</fields>' % (ns, generateXml(fields))
-        self.do.add(identifier=tx.locals["id"], partname=self._partname, data=xml)
+        yield self.all.add(identifier=tx.locals["id"], partname=self._partname, data=xml)
 
 def _generateXml(fields):
     for (key, value) in fields:
@@ -67,3 +67,4 @@
 
 def generateXml(fields):
     return ''.join(_generateXml(fields))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/fields2xml.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/fields2xml.py
--- version_0/meresco/components/fields2xml.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/fields2xml.py	2012-01-29 19:09:47.000000000 +0100
@@ -35,28 +35,37 @@
 
 correctNameRe = compile(r'^\w+$')
 
-class Fields2XmlTx(Observable):
-    def __init__(self, resourceManager, partName, namespace=None):
+class Fields2Xml(Observable):
+    def __init__(self, partName, namespace=None):
         Observable.__init__(self)
         if not correctNameRe.match(partName):
             raise Fields2XmlException('Invalid name: "%s"' % partName)
         self._identifier = None
-        self._fields = []
         self._partName = partName
-        self._resourceManager = resourceManager
         self._namespace = namespace
 
-    def addField(self, name, value):
-        self._fields.append((name, value))
+    def beginTransaction(self):
+        raise StopIteration(Fields2Xml.Fields2XmlTx(self, self._partName, self._namespace))
+        yield
+
+    class Fields2XmlTx(object):
+        def __init__(self, resource, partName, namespace):
+            self._fields = []
+            self._partName = partName
+            self._namespace = namespace
+            self._resource = resource
+
+        def addField(self, name, value):
+            self._fields.append((name, value))
+
+        def commit(self):
+            if not self._fields:
+                return
+            ns = self._namespace != None and ' xmlns="%s"' % self._namespace or ''
+            xml = '<%s%s>%s</%s>' % (self._partName, ns, generateXml(self._fields), self._partName)
 
-    def commit(self):
-        if not self._fields:
-            return
-        ns = self._namespace != None and ' xmlns="%s"' % self._namespace or ''
-        xml = '<%s%s>%s</%s>' % (self._partName, ns, generateXml(self._fields), self._partName)
-
-        identifier = self._resourceManager.ctx.tx.locals['id']
-        self._resourceManager.do.add(identifier, self._partName, xml)
+            identifier = self._resource.ctx.tx.locals['id']
+            yield self._resource.all.add(identifier=identifier, partname=self._partName, data=xml)
 
 def splitName(name):
     result = name.split('.')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/filtermessages.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/filtermessages.py
--- version_0/meresco/components/filtermessages.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/filtermessages.py	2012-01-29 19:09:48.000000000 +0100
@@ -37,6 +37,19 @@
         else:
             self._allowedMessage = lambda message: message not in disallowed
 
-    def unknown(self, message, *args, **kwargs):
+    def any_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
-            return self.all.unknown(message, *args, **kwargs)
+            response = yield self.any.unknown(message, *args, **kwargs)
+            raise StopIteration(response)
+
+    def all_unknown(self, message, *args, **kwargs):
+        if self._allowedMessage(message):
+            yield self.all.unknown(message, *args, **kwargs)
+
+    def call_unknown(self, message, *args, **kwargs):
+        if self._allowedMessage(message):
+            return self.call.unknown(message, *args, **kwargs)
+
+    def do_unknown(self, message, *args, **kwargs):
+        if self._allowedMessage(message):
+            self.do.unknown(message, *args, **kwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/apachelogger.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/apachelogger.py
--- version_0/meresco/components/http/apachelogger.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/apachelogger.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,34 +1,35 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from meresco.core import Transparant
+from meresco.core import Transparent
+from weightless.core import compose, Yield
 from time import strftime, gmtime
 from urlparse import urlsplit
 
@@ -39,18 +40,18 @@
         pass
 
 logline = '%(ipaddress)s - %(user)s [%(timestamp)s] "%(Method)s %(path)s%(query)s HTTP/1.0" %(status)s %(responseSize)s "%(Referer)s" "%(UserAgent)s"\n'
-class ApacheLogger(Transparant):
+class ApacheLogger(Transparent):
     def __init__(self, outputStream=DevNull()):
-        Transparant.__init__(self)
+        Transparent.__init__(self)
         self._outputStream = outputStream
         
     def handleRequest(self, *args, **kwargs):
         status = 0
-        for line in self.all.handleRequest(*args, **kwargs):
-            if callable(line):
+        for line in compose(self.all.handleRequest(*args, **kwargs)):
+            if line is Yield or callable(line):
                 yield line
                 continue
-            if not status and line.startswith('HTTP/1.0'):
+            if not status and line.startswith('HTTP/1.'):
                 status = line[len('HTTP/1.0 '):][:3]
                 self._log(status, **kwargs)
             yield line  
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/basicauthentication.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/basicauthentication.py
--- version_0/meresco/components/http/basicauthentication.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/basicauthentication.py	2012-01-29 19:09:47.000000000 +0100
@@ -41,10 +41,10 @@
             yield REQUEST_AUTHENTICATION_RESPONSE % (self._realm, 'Please give username and password.')
             return
         username, password = self._parseHeader(relevantHeader)
-        if not self.any.isValidLogin(username, password):
+        if not self.call.isValidLogin(username, password):
             yield REQUEST_AUTHENTICATION_RESPONSE % (self._realm, 'Username or password are not valid.')
             return
-        user = self.any.getUser(username)
+        user = self.call.getUser(username)
         yield self.all.handleRequest(Headers=Headers, user=user, *args, **kwargs)
 
     def _parseHeader(self, header):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/basichttphandler.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/basichttphandler.py
--- version_0/meresco/components/http/basichttphandler.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/basichttphandler.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,45 +1,47 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from utils import notFoundHtml
 
-from meresco.core import Observable
+from meresco.core import Transparent
+from weightless.core import compose, Yield
 
-class BasicHttpHandler(Observable):
+class BasicHttpHandler(Transparent):
 
     def handleRequest(self, *args, **kwargs):
         yielded = False
-        stuff = self.all.handleRequest(*args, **kwargs)
+        stuff = compose(self.all.handleRequest(*args, **kwargs))
         for x in stuff:
-            yielded = True
+            if x is not Yield and not callable(x):
+                yielded = True
             yield x
         if not yielded:
             yield notFoundHtml
             yield "<html><body>404 Not Found</body></html>"
 
-    def unknown(self, method, *args, **kwargs):
-        return self.all.unknown(method, *args, **kwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/deproxy.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/deproxy.py
--- version_0/meresco/components/http/deproxy.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/deproxy.py	2012-01-29 19:09:47.000000000 +0100
@@ -44,7 +44,7 @@
             if host != '':
                 Headers['Host'] = host
 
-        return self.all.handleRequest(Client=(clientHost, clientPort), Headers=Headers, **kwargs)
+        yield self.all.handleRequest(Client=(clientHost, clientPort), Headers=Headers, **kwargs)
 
 def _firstFromCommaSeparated(s):
     return s.split(",", 1)[0].strip()
Only in version_0/meresco/components/http: geturl.py
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/handlerequestfilter.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/handlerequestfilter.py
--- version_0/meresco/components/http/handlerequestfilter.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/handlerequestfilter.py	2012-01-29 19:09:47.000000000 +0100
@@ -37,5 +37,5 @@
     
     def handleRequest(self, **kwargs):
         if self._filter(**kwargs):
-            return self.all.handleRequest(**kwargs)
-        return (f for f in [])
+            yield self.all.handleRequest(**kwargs)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/__init__.py
--- version_0/meresco/components/http/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -31,7 +31,6 @@
 from observablehttpsserver import ObservableHttpsServer
 from pathfilter import PathFilter
 from pathrename import PathRename
-from geturl import GetURL
 from fileserver import StringServer, FileServer
 from ipfilter import IpFilter
 from basichttphandler import BasicHttpHandler
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/observablehttpserver.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/observablehttpserver.py
--- version_0/meresco/components/http/observablehttpserver.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/observablehttpserver.py	2012-01-29 19:09:47.000000000 +0100
@@ -28,6 +28,7 @@
 #
 ## end license ##
 from meresco.core import Observable
+from weightless.core import compose
 from weightless.http import HttpServer
 from cgi import parse_qs
 from urlparse import urlsplit
@@ -66,7 +67,7 @@
             self.startServer()
 
     def _connect(self, **kwargs):
-        return self.handleRequest(port=self._port, **kwargs)
+        return compose(self.handleRequest(port=self._port, **kwargs))
 
     def _error(self, **kwargs):
         yield serverUnavailableHtml +\
@@ -81,7 +82,7 @@
             'arguments': arguments,
             'RequestURI': RequestURI}
         requestArguments.update(kwargs)
-        return self.all.handleRequest(**requestArguments)
+        yield self.all.handleRequest(**requestArguments)
 
     def setMaxConnections(self, m):
         self._httpserver.setMaxConnections(m)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/pathrename.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/pathrename.py
--- version_0/meresco/components/http/pathrename.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/pathrename.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,39 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from meresco.core import Transparant
-class PathRename(Transparant):
+from meresco.core import Transparent
+
+class PathRename(Transparent):
     def __init__(self, rename):
-        Transparant.__init__(self)
+        Transparent.__init__(self)
         self._rename = rename
 
     def handleRequest(self, path, *args, **kwargs):
         yield self.all.handleRequest(path=self._rename(path), *args, **kwargs)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/sessionhandler.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/sessionhandler.py
--- version_0/meresco/components/http/sessionhandler.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/sessionhandler.py	2012-01-29 19:09:47.000000000 +0100
@@ -29,6 +29,7 @@
 
 from meresco.core import Observable
 from meresco.components import TimedDictionary
+from weightless.core import compose
 from utils import insertHeader
 from hashlib import md5
 from time import time
@@ -73,7 +74,7 @@
 
         extraHeader = 'Set-Cookie: session%s=%s; path=/' % (self._nameSuffix, sessionid)
 
-        result = self.all.handleRequest(session=session, arguments=arguments, RequestURI=RequestURI, Client=Client, Headers=Headers, *args, **kwargs)
+        result = compose(self.all.handleRequest(session=session, arguments=arguments, RequestURI=RequestURI, Client=Client, Headers=Headers, *args, **kwargs))
 
         for response in insertHeader(result, extraHeader) :
             yield response
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/http/utils.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/http/utils.py
--- version_0/meresco/components/http/utils.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/http/utils.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,35 +1,37 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2010 Delft University of Technology http://www.tudelft.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
+from weightless.core import Yield
+
 CRLF = "\r\n"
 ContentTypeXml = "text/xml; charset=utf-8"
 ContentTypeRss = "application/rss+xml"
@@ -79,7 +81,7 @@
 def insertHeader(httpResponse, extraHeader):
     alreadyDone = False
     for response in httpResponse:
-        if callable(response):
+        if response is Yield or callable(response):
             yield response
             continue
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/inbox.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/inbox.py
--- version_0/meresco/components/inbox.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/inbox.py	2012-01-29 19:09:48.000000000 +0100
@@ -25,6 +25,7 @@
 #
 ## end license ##
 from meresco.core import Observable
+from weightless.core import compose
 
 from cq2utils import DirectoryWatcher
 from lxml.etree import parse
@@ -41,7 +42,7 @@
     Inbox monitors a directory for files XML files being moved into it.  Each
     file moved into the directory is assumed to be in XML format.  It is read,
     parsed (using lxml) and passed on to the observers of Inbox using
-    self.do.add(identifier=filename, lxmlNode=<parsed xml>). When the add()
+    self.all.add(identifier=filename, lxmlNode=<parsed xml>). When the add()
     calls succeeds, the file is moved to another directory.
 
     Parameters
@@ -97,7 +98,12 @@
         errorFilename = join(self._doneDirectory, filename + ".error")
         try:
             lxmlNode = parse(open(join(self._inboxDirectory, filename)))
-            self.do.add(identifier=filename, lxmlNode=lxmlNode)
+            composed = compose(self.all.add(identifier=filename, lxmlNode=lxmlNode))
+            try:
+                while True:
+                    composed.next()
+            except StopIteration, e:
+                pass
         except Exception, e:
             open(errorFilename, 'w').write(format_exc())
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/__init__.py
--- version_0/meresco/components/__init__.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/__init__.py	2012-01-29 19:09:48.000000000 +0100
@@ -34,7 +34,7 @@
 from contextset import ContextSetList, ContextSet
 
 from fieldlets import RenameField, TransformFieldValue, FilterFieldValue, FilterField, AddField
-from fields2xml import Fields2XmlTx
+from fields2xml import Fields2Xml
 from fields2xmlfields import Fields2XmlFields
 from crosswalk import Crosswalk
 from xsltcrosswalk import XsltCrosswalk
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/log/querylog.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/log/querylog.py
--- version_0/meresco/components/log/querylog.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/log/querylog.py	2012-01-29 19:09:47.000000000 +0100
@@ -6,6 +6,7 @@
 # 
 # Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2006-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -25,18 +26,19 @@
 # 
 ## end license ##
 
-from meresco.core import Observable
+from meresco.core import Observable, Transparent
+from weightless.core import compose
 
 from time import time
 from urllib import urlencode
 
-class QueryLog(Observable):
+class QueryLog(Transparent):
     """
     Log incoming http queries with ip-address, path, size, timestamp, duration
     """
 
     def __init__(self, log, loggedPaths):
-        Observable.__init__(self)
+        Transparent.__init__(self)
         self._log = log
         self._loggedPaths = loggedPaths
 
@@ -51,7 +53,7 @@
         timestamp = self._time()
         ipAddress = Client[0]
         sizeInBytes = 0
-        for response in self.all.handleRequest(Client=Client, path=path, **kwargs):
+        for response in compose(self.all.handleRequest(Client=Client, path=path, **kwargs)):
             if hasattr(response, '__len__'):
                 sizeInBytes += len(response)
             yield response
@@ -64,9 +66,6 @@
     def _time(self):
         return time()
 
-    def unknown(self, method, *args, **kwargs):
-        return self.all.unknown(method, *args, **kwargs)
-
 
 SKIP_ARGS = ['sortBy', 'sortDescending']
 
@@ -82,10 +81,10 @@
             if key in SKIP_ARGS:
                 continue
             queryArguments[key] = value
-        return self.any.searchRetrieve(**kwargs)
+        yield self.all.searchRetrieve(**kwargs)
 
 class QueryLogHelper(Observable):
     def handleRequest(self, arguments, **kwargs):
         queryArguments = self.ctx.queryArguments
         queryArguments.update(arguments)
-        return self.all.handleRequest(arguments=arguments, **kwargs)
+        yield self.all.handleRequest(arguments=arguments, **kwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/msgbox/msgbox.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/msgbox/msgbox.py
--- version_0/meresco/components/msgbox/msgbox.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/msgbox/msgbox.py	2012-01-29 19:09:48.000000000 +0100
@@ -39,6 +39,7 @@
 
 from meresco.core import Observable
 from cq2utils import DirectoryWatcher
+from weightless.core import compose
 from weightless.io import Suspend
 from escaping import escapeFilename, unescapeFilename
 
@@ -49,7 +50,7 @@
     supports a standardized mechanism for sending files.
 
     Msgbox monitors its inDirectory for files being moved into it. Each moved in file is
-    read and passed on to the observers of Msgbox using self.do.add(filedata=<File>).
+    read and passed on to the observers of Msgbox using self.all.add(filedata=<File>).
     By default a Msgbox writes an acknowledgment (.ack) file to its outDirectory as
     soon as the 'add' call returns. When an exception was raised an error (.error)
     file is written instead, which contains the full traceback for the error.
@@ -60,7 +61,7 @@
     file.
 
     An asynchronous Msgbox differs from the default synchronous Msgbox in that it doesn't
-    write the .ack file when the self.do.add call returns. Rather, an explicit
+    write the .ack file when the self.all.add call returns. Rather, an explicit
     acknowledgement (or error notification) is expected in the form of a request to
     send an acknowledgement (or error) file (by way of the previously
     described Msgbox.add method).
@@ -131,7 +132,12 @@
         else:
             identifier = unescapeFilename(filename)
             try:
-                self.do.add(identifier=identifier, filedata=File(filepath))
+                composed = compose(self.all.add(identifier=identifier, filedata=File(filepath)))
+                try:
+                    while True:
+                        composed.next()
+                except StopIteration, e:
+                    pass
                 needToAck = self._synchronous and not ackOrError
             except Exception, e:
                 if not self._impliesInputError(e):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/msgbox/updateadapter.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/msgbox/updateadapter.py
--- version_0/meresco/components/msgbox/updateadapter.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/msgbox/updateadapter.py	2012-01-29 19:09:48.000000000 +0100
@@ -30,17 +30,17 @@
     def add(self, identifier, filedata):
         identifier, extension = identifier.rsplit('.', 1)
         if extension == "delete":
-            self.do.delete(identifier=identifier)
+            yield self.all.delete(identifier=identifier)
         elif extension == "add":
-            self.do.add(identifier=identifier, partname=None, filedata=filedata)
+            yield self.all.add(identifier=identifier, partname=None, filedata=filedata)
         else:
             raise ValueError('Expected add or delete as file extension')
 
 class UpdateAdapterToMsgbox(Observable):
 
     def add(self, identifier, data, **kwargs):
-        return self.all.add(identifier='%s.add' % identifier, filedata=data, **kwargs)
+        yield self.all.add(identifier='%s.add' % identifier, filedata=data, **kwargs)
 
     def delete(self, identifier):
-        return self.all.add(identifier='%s.delete' % identifier, filedata='')
+        yield self.all.add(identifier='%s.delete' % identifier, filedata='')
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/multileveldrilldown.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/multileveldrilldown.py
--- version_0/meresco/components/multileveldrilldown.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/multileveldrilldown.py	2012-01-29 19:09:47.000000000 +0100
@@ -44,7 +44,8 @@
                 raise MultiLevelDrilldownException("No drilldown fields defined for '%s'." % field)
             resultFieldName, resultTermCounts = None, []
             for levelField, maximumCount, sorted in self._multiLevelFields[field]:
-                fieldName, termCounts = self.any.drilldown(docset, [(levelField, maximumCount, sorted)]).next()
+                drilldownResult = yield self.any.drilldown(docset, [(levelField, maximumCount, sorted)])
+                fieldName, termCounts = drilldownResult.next()
                 termCounts = list(termCounts)
                 if len(termCounts) > 0:
                     resultFieldName, resultTermCounts = fieldName, termCounts
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/ngram/suggester.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/ngram/suggester.py
--- version_0/meresco/components/ngram/suggester.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/ngram/suggester.py	2012-01-29 19:09:47.000000000 +0100
@@ -52,7 +52,7 @@
         """
         word = unicode(word)
         fieldname = unicode(fieldname) if fieldname else None
-        candidates = yield self.asyncany.executeNGramQuery(word, self._samples, fieldname=fieldname)
+        candidates = yield self.any.executeNGramQuery(word, self._samples, fieldname=fieldname)
         results = sorted(candidates, key=lambda term: self.sortKey(term, word, fieldname))
 
         inclusive = 1 if results and results[0] == word else 0
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/parsecql.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/parsecql.py
--- version_0/meresco/components/parsecql.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/parsecql.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -32,4 +32,6 @@
 
 class ParseCQL(Observable):
     def executeCQLString(self, cqlString, *args, **kwargs):
-        return self.any.executeQuery(cqlAbstractSyntaxTree=parseString(cqlString), *args, **kwargs)
+        result = yield self.any.executeQuery(cqlAbstractSyntaxTree=parseString(cqlString), *args, **kwargs)
+        raise StopIteration(result)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/periodicdownload.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/periodicdownload.py
--- version_0/meresco/components/periodicdownload.py	2012-01-16 14:46:15.000000000 +0100
+++ version_1/meresco/components/periodicdownload.py	2012-01-29 19:09:48.000000000 +0100
@@ -1,27 +1,27 @@
 ## begin license ##
 # 
-# "Meresco Oai" are components to build Oai repositories, based on
-# "Meresco Core" and "Meresco Components". 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
 # 
 # Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
-# This file is part of "Meresco Oai"
+# This file is part of "Meresco Components"
 # 
-# "Meresco Oai" is free software; you can redistribute it and/or modify
+# "Meresco Components" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 # 
-# "Meresco Oai" is distributed in the hope that it will be useful,
+# "Meresco Components" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 # 
 # You should have received a copy of the GNU General Public License
-# along with "Meresco Oai"; if not, write to the Free Software
+# along with "Meresco Components"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 # 
 ## end license ##
@@ -35,7 +35,7 @@
 
 from meresco.core import Observable
 from meresco.components.http.utils import CRLF
-from weightless.core import compose
+from weightless.core import compose, Yield
 
 from sys import stderr, stdout
 from time import time
@@ -54,16 +54,22 @@
             self._log = lambda x: None
 
     def observer_init(self):
-        self._loop = compose(self.loop())
-        self._reactor.addTimer(1, self._loop.next)
+        self.startTimer()
 
-    def loop(self):
-        while True:
-            sok = yield self._tryConnect()
-            sok.send(self.any.buildRequest())
-            sok.shutdown(SHUT_WR)
-            self._reactor.addReader(sok, self._loop.next, prio=self._prio)
-            responses = []
+    def startTimer(self):
+        self._reactor.addTimer(self._period, self.startProcess)
+
+    def startProcess(self):
+        self._processOne = compose(self.processOne())
+        self._processOne.next()
+
+    def processOne(self):
+        sok = yield self._tryConnect()
+        sok.send(self.call.buildRequest())
+        sok.shutdown(SHUT_WR)
+        self._reactor.addReader(sok, self._processOne.next, prio=self._prio)
+        responses = []
+        try:
             try:
                 while True:
                     yield
@@ -71,36 +77,36 @@
                     if response == '':
                          break
                     responses.append(response)
-            except SocketError, (errno, msg):
-                yield self._retryAfterError("Receive error: %s: %s" % (errno, msg))
-                continue
-            self._reactor.removeReader(sok)
-            sok.close()
+            finally:
+                self._reactor.removeReader(sok)
+                sok.close()
+        except SocketError, (errno, msg):
+            yield self._retryAfterError("Receive error: %s: %s" % (errno, msg))
+            return
+
+        try:
+            response = ''.join(responses)
+            headers, body = response.split(2 * CRLF, 1)
+            statusLine = headers.split(CRLF)[0]
+            if not statusLine.strip().lower().endswith('200 ok'):
+                yield self._retryAfterError('Unexpected response: ' + statusLine)
+                return
+
+            self._reactor.addProcess(self._processOne.next)
             try:
-                response = ''.join(responses)
-                headers, body = response.split(2 * CRLF, 1)
-                statusLine = headers.split(CRLF)[0]
-                if not statusLine.strip().lower().endswith('200 ok'):
-                    yield self._retryAfterError('Unexpected response: ' + statusLine)
-                    continue
-                alwaysReadable = TemporaryFile(prefix='meresco-oai-', suffix='-download')
-                self._reactor.addReader(alwaysReadable, self._loop.next, prio=self._prio)
-                try:
+                gen = self.all.handle(data=body)
+                g = compose(gen)
+                for response  in g:
+                    if callable(response) and not response is Yield:
+                        response(self._reactor, this.next)
                     yield
-                    for data in self.all.handle(data=body):
-                        if callable(data):
-                            data(self._reactor, self._loop.next)
-                            yield
-                            data.resumeReader()
-                        yield
-                finally:
-                    self._reactor.removeReader(alwaysReadable)
-            except Exception:
-                self._logError(format_exc())
-            self._reactor.addTimer(self._period, self._loop.next)
-            yield
+            finally:
+                self._reactor.removeProcess()
+        except Exception:
+            self._logError(format_exc())
+        self.startTimer()
+        yield
 
-    
     def _tryConnect(self):
         sok = socket()
         sok.setblocking(0)
@@ -111,7 +117,7 @@
                 if errno != EINPROGRESS:
                     yield self._retryAfterError("%s: %s" % (errno, msg))
                     continue
-            self._reactor.addWriter(sok, self._loop.next)
+            self._reactor.addWriter(sok, self._processOne.next)
             yield
             self._reactor.removeWriter(sok)
 
@@ -126,7 +132,7 @@
 
     def _retryAfterError(self, message):
         self._logError(message)
-        self._reactor.addTimer(self._period, self._loop.next)
+        self.startTimer()
         yield
         
     def _logError(self, message):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/reindex.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/reindex.py
--- version_0/meresco/components/reindex.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/reindex.py	2012-01-29 19:09:48.000000000 +0100
@@ -74,7 +74,7 @@
         batch = []
         identifiersFound = False
 
-        for identifier in self.any.listIdentifiers(self._partName):
+        for identifier in self.call.listIdentifiers(self._partName):
             batch.append(escapeFilename(identifier))
             if len(batch) == batchSize:
                 identifiersFound = self._writeBatch(sessionDirectory, currentBatch, batch)
@@ -104,7 +104,7 @@
 
         for identifier in (identifier.strip() for identifier in open(batchFile).readlines()):
             try:
-                yield self.asyncdo.addDocumentPart(identifier=unescapeFilename(identifier), partname='ignoredName', lxmlNode=EMPTYDOC)
+                yield self.all.add(identifier=unescapeFilename(identifier), partname='ignoredName', lxmlNode=EMPTYDOC)
             except Exception, e:
                 yield '\n!error processing "%s": %s' % (identifier, str(e))
                 return
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/requestscope.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/requestscope.py
--- version_0/meresco/components/requestscope.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/requestscope.py	2012-01-29 19:09:48.000000000 +0100
@@ -31,5 +31,5 @@
 class RequestScope(Observable):
     def handleRequest(self, *args, **kwargs):
         __callstack_var_requestScope__ = {}
-        for stuff in self.all.handleRequest(*args, **kwargs):
-            yield stuff
+        yield self.all.handleRequest(*args, **kwargs)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/rewritepartname.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/rewritepartname.py
--- version_0/meresco/components/rewritepartname.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/rewritepartname.py	2012-01-29 19:09:48.000000000 +0100
@@ -25,13 +25,13 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-from meresco.core import Transparant
+from meresco.core import Transparent
 
-class RewritePartname(Transparant):
+class RewritePartname(Transparent):
 
     def __init__(self, partname):
-        Transparant.__init__(self)
+        Transparent.__init__(self)
         self._partname = partname
 
     def add(self, identifier, partname, **kwargs):
-        yield self.asyncdo.add(identifier=identifier, partname=self._partname, **kwargs)
+        yield self.all.add(identifier=identifier, partname=self._partname, **kwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/rss.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/rss.py
--- version_0/meresco/components/rss.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/rss.py	2012-01-29 19:09:48.000000000 +0100
@@ -43,8 +43,6 @@
 from cqlparser.cqlparser import parseString as CQLParseException
 from meresco.components.web import WebQuery
 
-from weightless.core import compose
-
 class BadRequestException(Exception):
     pass
 
@@ -92,25 +90,23 @@
             yield "<description>An error occurred '%s'</description>" % xmlEscape(str(e))
             yield """</channel></rss>"""
             raise StopIteration()
-
         yield '<title>%s</title>' % xmlEscape(self._title)
         yield '<description>%s</description>' % xmlEscape(self._description)
         yield '<link>%s</link>' % xmlEscape(self._link)
 
         SRU_IS_ONE_BASED = 1 #And our RSS plugin is closely based on SRU
-        for data in compose(self._yieldResults(
+        yield self._yieldResults(
                 cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
                 start=startRecord - SRU_IS_ONE_BASED,
                 stop=startRecord - SRU_IS_ONE_BASED+maximumRecords,
                 sortBy=sortBy,
-                sortDescending=sortDescending )):
-            yield data
+                sortDescending=sortDescending)
 
         yield """</channel>"""
         yield """</rss>"""
 
     def _yieldResults(self, cqlAbstractSyntaxTree=None, start=0, stop=9, sortBy=None, sortDescending=False, **kwargs):
-        response = yield self.asyncany.executeQuery(
+        response = yield self.any.executeQuery(
             cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
             start=start,
             stop=stop,
@@ -119,5 +115,5 @@
             **kwargs
         )
         total, hits = response.total, response.hits
-        for recordId in hits:
-            yield self.any.getRecord(recordId)
+        for identifier in hits:
+            yield self.call.getRecord(identifier=identifier)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/sru/sruhandler.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/sru/sruhandler.py
--- version_0/meresco/components/sru/sruhandler.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/sru/sruhandler.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -30,11 +30,11 @@
 
 from xml.sax.saxutils import quoteattr, escape as xmlEscape
 
-from meresco.core import Observable, decorate, decorateWith
+from meresco.core import Observable, decorate
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
+from weightless.core import compose, Yield
 
 from cqlparser import parseString as parseCQL
-from weightless.core import compose
 from warnings import warn
 
 from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
@@ -58,7 +58,7 @@
         drilldownFieldnamesAndMaximums = self._parseDrilldownArgs(x_term_drilldown)
 
         try:
-            response = yield self.asyncany.executeQuery(
+            response = yield self.any.executeQuery(
                 cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
                 start=start,
                 stop=start + maximumRecords,
@@ -68,14 +68,6 @@
                 **kwargs)
             total, recordIds = response.total, response.hits
             drilldownData = getattr(response, "drilldownData", None)
-            # If drilldownData is not found on response object but drilldownFieldnamesAndMaximums 
-            # is set assume Meresco-Lucene is used, so do an extra Meresco-Lucene style drilldown call
-            if not drilldownData and drilldownFieldnamesAndMaximums is not None:
-                docset = self.any.docsetFromQuery(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree)
-                if drilldownFieldnamesAndMaximums is not None:
-                    drilldownData = yield self.asyncany.drilldown(
-                        docset=docset,
-                        fieldnamesAndMaximums=drilldownFieldnamesAndMaximums)
         except Exception, e:
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
@@ -95,7 +87,7 @@
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, x_term_drilldown=x_term_drilldown, **kwargs)
-        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, **kwargs)
+        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, response=response, **kwargs)
         yield self._endResults()
 
     def _writeEchoedSearchRetrieveRequest(self, **kwargs):
@@ -114,7 +106,7 @@
         response = compose(self._extraResponseDataTryExcept(**kwargs))
         headerWritten = False
         for line in response:
-            if callable(line):
+            if line is Yield or callable(line):
                 yield line
                 continue
             if line and not headerWritten:
@@ -140,10 +132,10 @@
 
     def _writeResult(self, recordSchema=None, recordPacking=None, recordId=None, version=None, **kwargs):
         yield '<srw:record>'
-        yield '<srw:recordSchema>%s</srw:recordSchema>' % recordSchema
-        yield '<srw:recordPacking>%s</srw:recordPacking>' % recordPacking
+        yield '<srw:recordSchema>%s</srw:recordSchema>' % xmlEscape(recordSchema)
+        yield '<srw:recordPacking>%s</srw:recordPacking>' % xmlEscape(recordPacking)
         if version == "1.2": 
-            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % recordId
+            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % xmlEscape(recordId)
         yield self._writeRecordData(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId)
         yield self._writeExtraRecordData(recordPacking=recordPacking, recordId=recordId, **kwargs)
         yield '</srw:record>'
@@ -155,8 +147,7 @@
 
     def _catchErrors(self, dataGenerator, recordSchema, recordId):
         try:
-            for stuff in compose(dataGenerator):
-                yield stuff
+            yield dataGenerator
         except IOError, e:
             yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape("recordSchema '%s' for identifier '%s' does not exist" % (recordSchema, recordId))])
         except Exception, e:
@@ -188,10 +179,12 @@
     def _yieldRecordForRecordPacking(self, recordId=None, recordSchema=None, recordPacking=None):
         generator = compose(self.all.yieldRecord(identifier=recordId, partname=recordSchema))
         if recordPacking == 'xml':
+            yield generator
+            return
+        if recordPacking == 'string':
             for data in generator:
-                yield data
-        elif recordPacking == 'string':
-            for data in generator:
+                if data is Yield or callable(data):
+                    yield data
                 yield xmlEscape(data)
         else:
             raise Exception("Unknown Record Packing: %s" % recordPacking)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/sru/sruparser.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/sru/sruparser.py
--- version_0/meresco/components/sru/sruparser.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/sru/sruparser.py	2012-01-29 19:09:47.000000000 +0100
@@ -117,7 +117,7 @@
     def _searchRetrieve(self, arguments, **kwargs):
         sruArgs = self.parseSruArgs(arguments)
         arguments.update(sruArgs)
-        return self.any.searchRetrieve(**arguments)
+        yield self.all.searchRetrieve(**arguments)
 
     def parseSruArgs(self, arguments):
         sruArgs = {
@@ -238,4 +238,4 @@
 </srw:explainResponse>"""
 
     def searchRetrieve(self, *args, **kwargs):
-        return self.any.searchRetrieve(*args, **kwargs)
+        yield self.all.searchRetrieve(*args, **kwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/sru/srurecordupdate.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/sru/srurecordupdate.py
--- version_0/meresco/components/sru/srurecordupdate.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/sru/srurecordupdate.py	2012-01-29 19:09:47.000000000 +0100
@@ -45,9 +45,9 @@
             if action == prefix + "replace" or action == prefix + "create":
                 record = updateRequest.record
                 recordSchema = str(record.recordSchema)
-                yield self.asyncdo.add(identifier=recordId, partname=recordSchema, amaraNode=record.recordData.childNodes[0])
+                yield self.all.add(identifier=recordId, partname=recordSchema, amaraNode=record.recordData.childNodes[0])
             elif action == prefix + "delete":
-                yield self.asyncdo.delete(recordId)
+                yield self.all.delete(recordId)
             else:
                 raise Exception("Unknown action: " + action)
             answer = RESPONSE_XML % {
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/sru/srw.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/sru/srw.py
--- version_0/meresco/components/sru/srw.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/meresco/components/sru/srw.py	2012-01-29 19:09:47.000000000 +0100
@@ -34,8 +34,6 @@
 from meresco.core import Observable
 from meresco.components.http import utils as httputils
 
-from weightless.core import compose
-
 SOAP_XML_URI = "http://schemas.xmlsoap.org/soap/envelope/"
 
 SOAP_HEADER = """<SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"><SOAP:Body>"""
@@ -79,9 +77,9 @@
         yield httputils.okXml
 
         try:
-            operation, arguments = self.any._parseArguments(arguments)
+            operation, arguments = self.call._parseArguments(arguments)
             self._srwSpecificValidation(operation, arguments)
-            sruArgs = self.any.parseSruArgs(arguments)
+            sruArgs = self.call.parseSruArgs(arguments)
             arguments.update(sruArgs)
         except SruException, e:
             yield SOAP % DIAGNOSTICS % (e.code, xmlEscape(e.details), xmlEscape(e.message))
@@ -89,8 +87,7 @@
 
         try:
             yield SOAP_HEADER
-            for data in compose(self.any.searchRetrieve(**arguments)):
-                yield data
+            yield self.all.searchRetrieve(**arguments)
             yield SOAP_FOOTER
         except Exception, e:
             yield "Unexpected Exception:\n"
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/statistics.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/statistics.py
--- version_0/meresco/components/statistics.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/statistics.py	2012-01-29 19:09:47.000000000 +0100
@@ -121,11 +121,9 @@
     def merge(self, rhsStatistics):
         self._data.merge(rhsStatistics._data)
 
-    def unknown(self, message, *args, **kwargs):
+    def all_unknown(self, message, *args, **kwargs):
         __callstack_var_statisticsLog__ = {} 
-        responses = self.all.unknown(message, *args, **kwargs)
-        for response in responses:
-            yield response
+        yield self.all.unknown(message, *args, **kwargs)
         self._process(__callstack_var_statisticsLog__)
         self._snapshotIfNeeded()
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/statisticsxml.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/statisticsxml.py
--- version_0/meresco/components/statisticsxml.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/statisticsxml.py	2012-01-29 19:09:47.000000000 +0100
@@ -33,7 +33,6 @@
 from time import mktime, gmtime
 
 from meresco.components.statistics import AggregatorException
-from weightless.core import compose
 from xml.sax.saxutils import escape as xmlEscape
 
 NAMESPACE="http://meresco.org/namespace/meresco/statistics"
@@ -73,7 +72,7 @@
                 yield stuff
         else:
             key = tuple(key)
-            yield compose(self._query(fromTime, toTime, key, maxResults))
+            yield self._query(fromTime, toTime, key, maxResults)
 
     def _htmlHeader(self):
         return """HTTP/1.0 200 OK\r\nContent-Type: text/xml\r\n\r\n<?xml version="1.0" encoding="utf-8" ?>"""
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/storagecomponent.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/storagecomponent.py
--- version_0/meresco/components/storagecomponent.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/storagecomponent.py	2012-01-29 19:09:48.000000000 +0100
@@ -28,7 +28,7 @@
 ## end license ##
 
 from storage import HierarchicalStorage, Storage
-from itertools import ifilter
+from meresco.core import asyncnoreturnvalue
 
 def defaultSplit((identifier, partname)):
     result = identifier.split(':',1)
@@ -42,29 +42,24 @@
     return identifier, partname
 
 class StorageComponent(object):
-    def __init__(self, directory, split=defaultSplit, join=defaultJoin, revisionControl=False, partsRemovedOnDelete=[], name=None):
+    def __init__(self, directory, split=defaultSplit, join=defaultJoin, partsRemovedOnDelete=[], name=None):
         assert type(directory) == str, 'Please use directory as first parameter'
-        self._storage = HierarchicalStorage(Storage(directory, revisionControl=revisionControl, ), split, join)
+        self._storage = HierarchicalStorage(Storage(directory), split, join)
         self._partsRemovedOnDelete = partsRemovedOnDelete
         self._name = name
 
     def observable_name(self):
         return self._name
 
-    def store(self, *args, **kwargs):
-        return self.add(*args, **kwargs)
-
-    def addDocumentPart(self, identifier=None, partname=None, data=None):
-        return self.add(identifier=identifier, partname=partname, data=data)
-
+    @asyncnoreturnvalue
     def add(self, identifier, partname, data):
-        """should be obsoleted in favor of addDocumentPart"""
         sink = self._storage.put((identifier, partname))
         try:
             sink.send(data)
         finally:
-            return sink.close()
+            sink.close()
 
+    @asyncnoreturnvalue
     def delete(self, identifier):
         for partname in self._partsRemovedOnDelete:
             self.deletePart(identifier, partname)
@@ -98,23 +93,12 @@
     def getStream(self, identifier, partname):
         return self._storage.getFile((identifier, partname))
 
-    def _listIdentifiers(self, identifierPrefix=''):
-        lastIdentifier = None
-        for identifier, partname in self.glob((identifierPrefix, None)):
-            if identifier != lastIdentifier:
-                yield identifier
-                lastIdentifier = identifier
-
-    def _listIdentifiersByPartName(self, partname, identifierPrefix=''):
-        for identifier, ignored in self.glob((identifierPrefix, partname)):
-            yield identifier
-
     def listIdentifiers(self, partname=None, identifierPrefix=''):
-        """Use an ifilter to hide the generator so it won't be consumed by compose"""
-        return ifilter(None, self._listIdentifiersByPartName(partname, identifierPrefix=identifierPrefix))
+        return (identifier for identifier, ignored in self.glob((identifierPrefix, partname)))
 
     def glob(self, (prefix, wantedPartname)):
         def filterPrefixAndPart((identifier, partname)):
             return identifier.startswith(prefix) and (wantedPartname == None or wantedPartname == partname)
 
-        return ifilter(filterPrefixAndPart, self._storage.glob((prefix, wantedPartname)))
+        return ((identifier, partname) for (identifier, partname) in self._storage.glob((prefix, wantedPartname)) if filterPrefixAndPart((identifier, partname)))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/venturi.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/venturi.py
--- version_0/meresco/components/venturi.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/venturi.py	2012-01-29 19:09:48.000000000 +0100
@@ -42,11 +42,7 @@
         self._should = should
         self._could = could
 
-    def addDocumentPart(self, identifier=None, partname=None, lxmlNode=None):
-        return self.add(identifier=identifier, partname=partname, lxmlNode=lxmlNode)
-
     def add(self, identifier, partname=None, lxmlNode=None):
-        """should be obsoleted in favor of addDocumentPart"""
         self.ctx.tx.locals['id'] = identifier
         for shouldPartname, partXPath in self._should:
             part = self._findPart(identifier, shouldPartname, lxmlNode, partXPath)
@@ -60,7 +56,7 @@
 
     def delete(self, identifier):
         self.ctx.tx.locals['id'] = identifier
-        yield self.asyncdo.delete(identifier=identifier)
+        yield self.all.delete(identifier=identifier)
 
     def _findPart(self, identifier, partname, lxmlNode, partXPath):
         matches = lxmlNode.xpath(partXPath, namespaces=self._namespaceMap)
@@ -68,8 +64,8 @@
             raise VenturiException("XPath '%s' should return atmost one result." % partXPath)
         if len(matches) == 1:
             return self._nodeOrText2ElementTree(matches[0])
-        if self.any.isAvailable(identifier, partname) == (True, True):
-            return parse(self.any.getStream(identifier, partname))
+        if self.call.isAvailable(identifier, partname) == (True, True):
+            return parse(self.call.getStream(identifier, partname))
         return None
 
     def _nodeOrText2ElementTree(self, nodeOrText):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xml2fields.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xml2fields.py
--- version_0/meresco/components/xml2fields.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xml2fields.py	2012-01-29 19:09:48.000000000 +0100
@@ -26,36 +26,34 @@
 #
 ## end license ##
 
-from meresco.core import Observable
 from warnings import warn
 from lxml.etree import _Element
 
-def removeNamespace(tagName):
-    return '}' in tagName and tagName.split('}')[1] or tagName
+from meresco.core import Observable
+from meresco.core.generatorutils import asyncnoreturnvalue
 
 
 class Xml2Fields(Observable):
-
+    @asyncnoreturnvalue
     def add(self, identifier=None, partname=None, lxmlNode=None):
-        """deprecated"""
-        self.addXml(lxmlNode=lxmlNode)
-
-    def addXml(self, lxmlNode):
         if hasattr(lxmlNode, 'getroot'):
             lxmlNode = lxmlNode.getroot()
-        return self._fillDict(lxmlNode, '')
+        self._addFields(lxmlNode, '')
 
-    def _fillDict(self, aNode, parentName):
+    def _addFields(self, aNode, parentName):
         if type(aNode) != _Element:
             return
-
         if parentName:
             parentName += '.'
-        localName = removeNamespace(aNode.tag)
+        localName = _removeNamespace(aNode.tag)
         fieldname = parentName + localName
         value = aNode.text
         if value and value.strip():
             self.do.addField(name=fieldname, value=value)
         for child in aNode.getchildren():
-            self._fillDict(child, fieldname)
+            self._addFields(child, fieldname)
+
+
+def _removeNamespace(tagName):
+    return '}' in tagName and tagName.split('}')[1] or tagName
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xmlcompose.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xmlcompose.py
--- version_0/meresco/components/xmlcompose.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xmlcompose.py	2012-01-29 19:09:47.000000000 +0100
@@ -37,23 +37,23 @@
         self._nsMap = nsMap
         self._fieldMapping = fieldMapping
     
-    def getRecord(self, aRecordId):
+    def getRecord(self, identifier):
         data = {}
         cachedRecord = {}
         for tagName, values in self._fieldMapping.items():
             partname, xPathExpression = values
             if not partname in cachedRecord:
-                cachedRecord[partname] = self._getPart(aRecordId, partname)
+                cachedRecord[partname] = self._getPart(identifier, partname)
             xml = cachedRecord[partname]
             result = xml.xpath(xPathExpression, namespaces=self._nsMap)
             if result:
                 data[tagName] = str(result[0])
-        yield self.createRecord(data)
+        return self.createRecord(data)
 
     def createRecord(self, data):
         if len(data) != len(self._fieldMapping):
-            raise StopIteration
+            return '' 
         return self._template % dict(((k, xmlEscape(v)) for k,v in data.items()))
 
-    def _getPart(self, recordId, partname):
-        return parse(self.any.getStream(recordId, partname))
+    def _getPart(self, identifier, partname):
+        return parse(self.call.getStream(identifier, partname))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xml_generic/validate.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xml_generic/validate.py
--- version_0/meresco/components/xml_generic/validate.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xml_generic/validate.py	2012-01-29 19:09:48.000000000 +0100
@@ -44,7 +44,24 @@
             raise
 
 
-    def unknown(self, *args, **kwargs):
+    def all_unknown(self, message, *args, **kwargs):
+        self._detectAndValidate(*args, **kwargs)
+        yield self.all.unknown(message, *args, **kwargs)
+
+    def do_unknown(self, message, *args, **kwargs):
+        self._detectAndValidate(*args, **kwargs)
+        return self.do.unknown(message, *args, **kwargs)
+
+    def any_unknown(self, message, *args, **kwargs):
+        self._detectAndValidate(*args, **kwargs)
+        response = yield self.any.unknown(message, *args, **kwargs)
+        raise StopIteration(response)
+
+    def call_unknown(self, message, *args, **kwargs):
+        self._detectAndValidate(*args, **kwargs)
+        return self.call.unknown(message, *args, **kwargs)
+
+    def _detectAndValidate(self, *args, **kwargs):
         allArguments = list(args) + kwargs.values()
         for arg in allArguments:
             if type(arg) == _ElementTree:
@@ -53,7 +70,7 @@
                     exception = ValidateException(formatException(self._schema, arg))
                     self.do.logException(exception)
                     raise exception
-        return self.all.unknown(*args, **kwargs)
+
 
 def assertValid(xmlString, schemaPath):
     schema = XMLSchema(parse(open(schemaPath)))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xmlpump.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xmlpump.py
--- version_0/meresco/components/xmlpump.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xmlpump.py	2012-01-29 19:09:47.000000000 +0100
@@ -28,34 +28,35 @@
 #
 ## end license ##
 
-from meresco.core.observable import Observable
+from meresco.core import Observable
 from amara.binderytools import bind_string
-from amara.bindery import is_element
-from lxml.etree import parse, _ElementTree, tostring, _XSLTResultTree
-from cStringIO import StringIO
-from re import compile
-from warnings import warn
-
-try:
-    from lxml.etree import _ElementStringResult, _ElementUnicodeResult
-except:
-    _ElementStringResult = str
-    _ElementUnicodeResult = unicode
+from lxml.etree import parse, tostring
+from StringIO import StringIO
 
 class Converter(Observable):
-    def __init__(self, name=None, fromKwarg=None, toKwarg=None):
+    def __init__(self, fromKwarg, toKwarg=None, name=None):
         Observable.__init__(self, name=name)
-        if fromKwarg is None:
-            warn("This use of %s is deprecated. Specify 'fromKwarg' and 'toKwarg' parameters to convert specific keyword argument." % self.__class__.__name__, DeprecationWarning)
         self._fromKwarg = fromKwarg
         self._toKwarg = toKwarg if toKwarg else self._fromKwarg
 
-    def unknown(self, msg, *args, **kwargs):
-        if self._fromKwarg is None:
-            newArgs = [self._detectAndConvert(arg) for arg in args]
-            newKwargs = dict((key, self._detectAndConvert(value)) for key, value in kwargs.items())
-            return self.all.unknown(msg, *newArgs, **newKwargs)
+    def all_unknown(self, msg, *args, **kwargs):
+        newArgs, newKwargs = self._convertArgs(*args, **kwargs)
+        yield self.all.unknown(msg, *newArgs, **newKwargs)
+
+    def any_unknown(self, msg, *args, **kwargs):
+        newArgs, newKwargs = self._convertArgs(*args, **kwargs)
+        response = yield self.any.unknown(msg, *newArgs, **newKwargs)
+        raise StopIteration(response)
+
+    def do_unknown(self, msg, *args, **kwargs):
+        newArgs, newKwargs = self._convertArgs(*args, **kwargs)
+        self.do.unknown(msg, *newArgs, **newKwargs)
+
+    def call_unknown(self, msg, *args, **kwargs):
+        newArgs, newKwargs = self._convertArgs(*args, **kwargs)
+        return self.call.unknown(msg, *newArgs, **newKwargs)
 
+    def _convertArgs(self, *args, **kwargs):
         try:
             oldvalue = kwargs[self._fromKwarg]
         except KeyError:
@@ -63,76 +64,36 @@
         else:
             del kwargs[self._fromKwarg]
             kwargs[self._toKwarg] = self._convert(oldvalue)
-
-        return self.all.unknown(msg, *args, **kwargs)
+        return args, kwargs
 
     def _convert(self, anObject):
         raise NotImplementedError()
 
-    def _canConvert(self, anObject):
-        "deprecated"
-        raise NotImplementedError()
-
-    def _detectAndConvert(self, anObject):
-        "deprecated"
-        if self._canConvert(anObject):
-            return self._convert(anObject)
-        return anObject
-
-
-xmlStringRegexp = compile(r'(?s)^\s*<.*>\s*$')
-def isXmlString(anObject):
-    return type(anObject) in [str, _ElementStringResult, unicode, _ElementUnicodeResult] and xmlStringRegexp.match(anObject)
-
 class XmlParseAmara(Converter):
-    def _canConvert(self, anObject):
-        return isXmlString(anObject)
-
     def _convert(self, anObject):
         return bind_string(anObject.encode('UTF-8')).childNodes[0]
 
 class XmlPrintAmara(Converter):
-    def _canConvert(self, anObject):
-        return is_element(anObject)
-
     def _convert(self, anObject):
         return anObject.xml()
 
 class FileParseLxml(Converter):
-    def _canConvert(self, anObject):
-        return hasattr(anObject, 'read') and hasattr(anObject, 'readline')
-
     def _convert(self, anObject):
         return parse(anObject)
 
 class XmlParseLxml(Converter):
-    def _canConvert(self, anObject):
-        return isXmlString(anObject)
-
     def _convert(self, anObject):
         return parse(StringIO(anObject.encode('UTF-8')))
         
 class XmlPrintLxml(Converter):
-    def _canConvert(self, anObject):
-        return type(anObject) == _ElementTree
-
     def _convert(self, anObject):
         return tostring(anObject, pretty_print = True, encoding="UTF-8")
 
 class Amara2Lxml(Converter):
-    def _canConvert(self, anObject):
-        return is_element(anObject)
-
     def _convert(self, anObject):
         return parse(StringIO(anObject.xml()))
 
 class Lxml2Amara(Converter):
-    def _canConvert(self, anObject):
-        return type(anObject) in [_ElementTree, _XSLTResultTree]
-
     def _convert(self, anObject):
         return bind_string(tostring(anObject, encoding="UTF-8")).childNodes[0]
 
-# backwards compatible
-XmlInflate = XmlParseAmara
-XmlDeflate = XmlPrintAmara
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xmlxpath.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xmlxpath.py
--- version_0/meresco/components/xmlxpath.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xmlxpath.py	2012-01-29 19:09:47.000000000 +0100
@@ -54,7 +54,15 @@
         self._namespacesMap = oftenUsedNamespaces.copy()
         self._namespacesMap.update(namespaceMap or {})
 
-    def unknown(self, msg, *args, **kwargs):
+    def do_unknown(self, msg, *args, **kwargs):
+        for newArgs, newKwargs in self._convertArgs(*args, **kwargs):
+            self.do.unknown(msg, *newArgs, **newKwargs)
+
+    def all_unknown(self, msg, *args, **kwargs):
+        for newArgs, newKwargs in self._convertArgs(*args, **kwargs):
+            yield self.all.unknown(msg, *newArgs, **newKwargs)
+
+    def _convertArgs(self, *args, **kwargs):
         changeTheseArgs = [(position,arg) for position,arg in enumerate(args) if type(arg) == ElementTreeType]
         changeTheseKwargs = [(key,value) for key,value in kwargs.items() if type(value) == ElementTreeType]
         assert len(changeTheseArgs) + len(changeTheseKwargs) <= 1, 'Can only handle one ElementTree in argument list.'
@@ -64,15 +72,15 @@
             for newTree in self._findNewTree(elementTree):
                 newArgs = [arg for arg in args]
                 newArgs[position] = newTree
-                yield self.all.unknown(msg, *newArgs, **kwargs)
+                yield newArgs, kwargs
         elif changeTheseKwargs:
             key, elementTree = changeTheseKwargs[0]
             for newTree in self._findNewTree(elementTree):
                 newKwargs = kwargs.copy()
                 newKwargs[key] = newTree
-                yield self.all.unknown(msg, *args, **newKwargs)
+                yield args, newKwargs
         else:
-            yield self.all.unknown(msg, *args, **kwargs)
+            yield args, kwargs
 
     def _findNewTree(self, elementTree):
         for xpath in self._xpaths:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xpath2field.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/meresco/components/xpath2field.py
--- version_0/meresco/components/xpath2field.py	2012-01-16 13:37:08.000000000 +0100
+++ version_1/meresco/components/xpath2field.py	2012-01-29 19:09:47.000000000 +0100
@@ -26,6 +26,7 @@
 #
 ## end license ##
 from meresco.core import Observable
+from meresco.core.generatorutils import asyncnoreturnvalue
 
 
 class XPath2Field(Observable):
@@ -35,6 +36,7 @@
         self._namespaceMap = namespaceMap
         self._sendAsList = sendAsList
 
+    @asyncnoreturnvalue
     def add(self, identifier=None, partname=None, lxmlNode=None):
         for (xpath, dottedDestinationPath) in self._attributeXpaths:
             values = lxmlNode.xpath(xpath, namespaces=self._namespaceMap)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_alltests.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/_alltests.py
--- version_0/test/_alltests.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/_alltests.py	2012-01-29 19:09:47.000000000 +0100
@@ -10,7 +10,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/alltests.sh /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/alltests.sh
--- version_0/test/alltests.sh	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/alltests.sh	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,30 @@
 #!/bin/bash
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 export LANG=en_US.UTF-8
 export PYTHONPATH=.:"$PYTHONPATH"
 pyversion="$(pyversions --default)"
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/autocomplete/autocompletetest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/autocomplete/autocompletetest.py
--- version_0/test/autocomplete/autocompletetest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/autocomplete/autocompletetest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,41 +1,46 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2009-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2009-2011 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2009-2011 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.components.autocomplete import Autocomplete
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from weightless.core import compose
 
-class AutocompleteTest(CQ2TestCase):
+class AutocompleteTest(SeecrTestCase):
     def testHandleRequest(self):
         auto = Autocomplete(path='/some/path', maxresults=50, inputs=[('mainsearchinput', 'drilldown.dc.subject')])
         observer = CallTrace('observer')
         auto.addObserver(observer)
-        observer.returnValues['prefixSearch'] = [('term0', 1),('term<1>', 3)]
+        def prefixSearch(**kwargs):
+            raise StopIteration([('term0', 1),('term<1>', 3)])
+            yield
+        observer.methods['prefixSearch'] = prefixSearch
 
         head,body = ''.join(compose(auto.handleRequest(path='/path', arguments={'prefix':['t'], 'fieldname':['field0']}))).split('\r\n'*2)
 
@@ -51,7 +56,10 @@
         auto = Autocomplete(path='/some/path', maxresults=50, inputs=[('mainsearchinput', 'alias')], fieldMapping={'alias': ('field1', 'field2')})
         observer = CallTrace('observer')
         auto.addObserver(observer)
-        observer.returnValues['prefixSearch'] = [('term0', 1),('term<1>', 3)]
+        def prefixSearch(**kwargs):
+            raise StopIteration([('term0', 1),('term<1>', 3)])
+            yield
+        observer.methods['prefixSearch'] = prefixSearch
 
         head,body = ''.join(compose(auto.handleRequest(path='/path', arguments={'prefix':['t'], 'fieldname':['alias']}))).split('\r\n'*2)
 
@@ -67,7 +75,10 @@
             )
         observer = CallTrace('observer')
         auto.addObserver(observer)
-        observer.returnValues['prefixSearch'] = [('term0', 1),('term<1>', 3)]
+        def prefixSearch(**kwargs):
+            raise StopIteration([('term0', 1),('term<1>', 3)])
+            yield
+        observer.methods['prefixSearch'] = prefixSearch
 
         head,body = ''.join(compose(auto.handleRequest(
             path='/path', 
@@ -92,7 +103,10 @@
             labelMapping={'author': 'some.field.with.authors'}
             )
         observer = CallTrace('observer')
-        observer.returnValues['prefixSearch'] = [('term0', 1),('term<1>', 3)]
+        def prefixSearch(**kwargs):
+            raise StopIteration([('term0', 1),('term<1>', 3)])
+            yield
+        observer.methods['prefixSearch'] = prefixSearch
         auto.addObserver(observer)
 
         result = ''.join(compose(auto.handleRequest(
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/autocomplete/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/autocomplete/__init__.py
--- version_0/test/autocomplete/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/autocomplete/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/berkeleydicttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/berkeleydicttest.py
--- version_0/test/berkeleydicttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/berkeleydicttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,40 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 
 from meresco.components import DoubleUniqueBerkeleyDict, BerkeleyDict
 
-class BerkeleyDictTestBase(CQ2TestCase):
+class BerkeleyDictTestBase(SeecrTestCase):
     def testInsert(self):
         self.bdict['1'] = 'some string'
         self.assertEquals('some string', self.bdict['1'])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/clausecollectortest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/clausecollectortest.py
--- version_0/test/clausecollectortest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/clausecollectortest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,39 +1,41 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from meresco.components import ClauseCollector
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 from cqlparser import parseString
 
-class ClauseCollectorTest(CQ2TestCase):
+class ClauseCollectorTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
 
     def testClauseCollector(self):
         self.assertEquals(['cat', 'dog'], self.findClauses("cat or dog"))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/combinepartstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/combinepartstest.py
--- version_0/test/combinepartstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/combinepartstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -3,7 +3,7 @@
 # "Meresco Components" are components to build searchengines, repositories
 # and archives, based on "Meresco Core". 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -24,7 +24,7 @@
 # 
 ## end license ##
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from unittest import TestCase
 from meresco.components import CombineParts
 from weightless.core import compose
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/contextsettest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/contextsettest.py
--- version_0/test/contextsettest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/contextsettest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,40 +1,41 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from os.path import join
 
 from meresco.components.contextset import ContextSet, ContextSetException, ContextSetList
 from StringIO import StringIO
 
-class ContextSetTest(CQ2TestCase):
+class ContextSetTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         stream = StringIO("""
 # test contextset file
 query.field1\tactualfield1
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/cqlconversiontest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/cqlconversiontest.py
--- version_0/test/cqlconversiontest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/cqlconversiontest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,40 +1,42 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.components import CQLConversion, CqlSearchClauseConversion, CqlMultiSearchClauseConversion
-from meresco.core import Observable, be
+from meresco.core import Observable
+from weightless.core import be
 from cqlparser import parseString, cql2string
 from cqlparser.cqlparser import SEARCH_TERM, SEARCH_CLAUSE, TERM
 
 
-class CQLConversionTest(CQ2TestCase):
+class CQLConversionTest(SeecrTestCase):
     def testCQLContextSetConversion(self):
         observer = CallTrace('observer')
         o = be((Observable(),
@@ -47,11 +49,6 @@
         self.assertEquals('whatever', observer.calledMethods[0].name)
         self.assertEquals({'cqlAst': parseString('anotherQuery')}, observer.calledMethods[0].kwargs)
 
-    def testCQLCanConvert(self):
-        c = CQLConversion(lambda ast: ast, fromKwarg="cqlAst")
-        self.assertTrue(c._canConvert(parseString('field = value')))
-        self.assertFalse(c._canConvert('other object'))
-
     def testCQLConvert(self):
         converter = CallTrace('Converter')
         converter.returnValues['convert'] = parseString('ast')
@@ -63,7 +60,7 @@
         ast = parseString('field=value')
         modifier = CallTrace('SearchClauseModifier')
         conversion = CqlSearchClauseConversion(lambda node: False, modifier.modify, fromKwarg="cqlAst")
-        result = conversion._detectAndConvert(ast)
+        result = conversion._convert(ast)
         self.assertEquals('field=value', cql2string(result))
         self.assertEquals(0, len(modifier.calledMethods))
 
@@ -75,7 +72,7 @@
         def modify(node):
             return SEARCH_CLAUSE(SEARCH_TERM(TERM('newvalue')))
         conversion = CqlSearchClauseConversion(canModify, modify, fromKwarg="cqlAst")
-        result = conversion._detectAndConvert(ast)
+        result = conversion._convert(ast)
         self.assertEquals('newvalue', cql2string(result))
 
     def testReplaceSubtree(self):
@@ -85,7 +82,7 @@
         def modify(node):
             return SEARCH_CLAUSE(SEARCH_TERM(TERM('newvalue')))
         conversion = CqlSearchClauseConversion(canModify, modify, fromKwarg="cqlAst")
-        result = conversion._detectAndConvert(ast)
+        result = conversion._convert(ast)
         self.assertEquals('field1=value1 AND newvalue', cql2string(result))
 
     def testReplacementMustBeSearchClause(self):
@@ -93,7 +90,7 @@
         canModify = lambda node: True
         modify = lambda node: TERM('wrong')
         conversion = CqlSearchClauseConversion(canModify, modify, fromKwarg="cqlAst")
-        self.assertRaises(AssertionError, conversion._detectAndConvert, ast)
+        self.assertRaises(AssertionError, conversion._convert, ast)
 
     def testMultipleSearchClauseReplacements(self):
         ast = parseString('term1 AND term2 AND term3')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/crosswalktest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/crosswalktest.py
--- version_0/test/crosswalktest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/crosswalktest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,32 +1,34 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase, CallTrace
+
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.xml import XMLRewrite
 
 from StringIO import StringIO
@@ -39,15 +41,16 @@
 from meresco.components import Crosswalk
 from meresco.components.crosswalk import rewriteRules
 from meresco.components.xml_generic import Validate, __file__ as xml_genericpath
+from weightless.core import compose
 from os.path import join, dirname, abspath
 
 def readRecord(name):
     return open('data/' + name)
 
-class CrosswalkTest(CQ2TestCase):
+class CrosswalkTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.crosswalk = Crosswalk()
         self.validate = Validate(join(abspath(dirname(xml_genericpath)), 'schemas-lom', 'lomCc.xsd'))
         self.crosswalk.addObserver(self.validate)
@@ -55,7 +58,8 @@
         self.validate.addObserver(self.observer)
 
     def testOne(self):
-        list(self.crosswalk.unknown('crosswalk', 'id', 'metadata', theXmlRecord=parse(readRecord('imsmd_v1p2-1.xml'))))
+        self.observer.methods['crosswalk'] = lambda *args, **kwargs: (x for x in [])
+        list(compose(self.crosswalk.all_unknown('crosswalk', 'id', 'metadata', theXmlRecord=parse(readRecord('imsmd_v1p2-1.xml')))))
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertEquals(2, len(self.observer.calledMethods[0].args))
         arguments = self.observer.calledMethods[0].args
@@ -63,17 +67,18 @@
         self.assertEquals("metadata", arguments[1])
 
     def testValidate(self):
-        list(self.validate.unknown('methodname', 'id', 'metadata', parse(readRecord('lom-cc-nbc.xml'))))
-
+        self.observer.methods['methodname'] = lambda *args, **kwargs: (x for x in [])
+        list(compose(self.validate.all_unknown('methodname', 'id', 'metadata', parse(readRecord('lom-cc-nbc.xml')))))
         try:
-            list(self.validate.unknown('methodname', 'id', 'metadata', parse(readRecord('imsmd_v1p2-1.xml'))))
+            list(compose(self.validate.all_unknown('methodname', 'id', 'metadata', parse(readRecord('imsmd_v1p2-1.xml')))))
             self.fail('must raise exception')
         except Exception, e:
             self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://dpc.uba.uva.nl/schema/lom/triplel}lom': No matching global declaration available for the validation root." in str(e), str(e))
 
     def testTripleLExample(self):
+        self.observer.methods['methodname'] = lambda *args, **kwargs: (x for x in [])
         try:
-            self.crosswalk.unknown('methodname', 'id', 'metadata', theXmlRecord=parse(readRecord('triple-lrecord.xml')))
+            list(compose(self.crosswalk.all_unknown('methodname', 'id', 'metadata', theXmlRecord=parse(readRecord('triple-lrecord.xml')))))
         except Exception, e:
             message = readRecord('triple-lrecord.xml').read()
             for n, line in enumerate(message.split('\n')):
@@ -81,7 +86,8 @@
             raise
 
     def testNormalize(self):
-        list(self.crosswalk.unknown('add', None, 'metadata', theXmlRecord=parse(readRecord('triple-lrecord.xml'))))
+        self.observer.methods['add'] = lambda *args, **kwargs: (x for x in [])
+        list(compose(self.crosswalk.all_unknown('add', None, 'metadata', theXmlRecord=parse(readRecord('triple-lrecord.xml')))))
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertFalse('2006-11-28 19:00' in tostring(self.observer.calledMethods[0].kwargs['theXmlRecord']))
 
@@ -135,3 +141,4 @@
         result = tree.xpath('y[p/q="selector"]')
         self.assertEquals(1, len(result))
         self.assertEquals('y', result[0].tag)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/fieldletstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/fieldletstest.py
--- version_0/test/fieldletstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/fieldletstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -27,16 +27,17 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
-from meresco.core import be, Observable
+from weightless.core import be, compose
+from meresco.core import Observable
 from meresco.components import RenameField, TransformFieldValue, FilterField, AddField, Xml2Fields, FilterFieldValue
 from lxml.etree import parse
 from StringIO import StringIO
 
-class FieldletsTest(CQ2TestCase):
+class FieldletsTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.observert = CallTrace('Observer')
 
     def testRenameField(self):
@@ -76,7 +77,7 @@
             )
         )
 
-        dna.do.add(identifier='id', partname='part', lxmlNode='data')
+        list(compose(dna.all.add(identifier='id', partname='part', lxmlNode='data')))
         self.assertEquals(1, len(self.observert.calledMethods))
         self.assertEquals("addField(name='name', value='value')", str(self.observert.calledMethods[0]))
 
@@ -136,7 +137,8 @@
     <name3>value3</name3>
 </base>"""
         
-        dna.do.add(identifier='id', partname='part', lxmlNode=parse(StringIO(inputXml)))
+        result = list(compose(dna.all.add(identifier='id', partname='part', lxmlNode=parse(StringIO(inputXml)))))
+        self.assertEquals([], result)
 
         self.assertEquals([
             "addField(name='addfield.name', value='addfield.value')",
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/fields2xmlfieldstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/fields2xmlfieldstest.py
--- version_0/test/fields2xmlfieldstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/fields2xmlfieldstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -6,7 +6,7 @@
 # 
 # Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -26,29 +26,35 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.components.fields2xmlfields import Fields2XmlFields, generateXml
+from meresco.core import Observable, TransactionScope
+from weightless.core import compose, be
 
 NAMESPACE="http://example.org/namespace"
 
-class Fields2XmlFieldsTest(CQ2TestCase):
+def add(identifier, partname, data):
+    return
+    yield
+
+class Fields2XmlFieldsTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
 
         ctx = CallTrace('CTX')
-        tx = CallTrace('TX')
+        tx = CallTrace('TX', returnValues={'getId': 1234})
         tx.locals = {'id': 'identifier'}
         tx.name = "tsName"
         self.fxf = Fields2XmlFields("tsName", "fields-partname", namespace=NAMESPACE)
         self.fxf.ctx = ctx 
         self.fxf.ctx.tx = tx
-        self.observer = CallTrace()
+        self.observer = CallTrace(methods={'add': add})
         self.fxf.addObserver(self.observer)
 
     def testAddField(self):
-        self.fxf.begin()
+        self.fxf.begin(name='tsName')
         self.fxf.addField("key.sub", "value")
-        self.fxf.commit()
+        list(compose(self.fxf.commit(id=1234)))
         self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
         kwargs = self.observer.calledMethods[0].kwargs
         self.assertEquals("identifier", kwargs['identifier'])
@@ -58,9 +64,9 @@
             </fields>""" % NAMESPACE, kwargs['data'])
 
     def testAddFieldWithXmlInKeyAndValue(self):
-        self.fxf.begin()
+        self.fxf.begin(name='tsName')
         self.fxf.addField("""<name>"&'""", """<value>"&'""")
-        self.fxf.commit()
+        list(compose(self.fxf.commit(id=1234)))
         self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
         kwargs = self.observer.calledMethods[0].kwargs
         self.assertEqualsWS("""<fields xmlns="%s">
@@ -68,17 +74,50 @@
             </fields>""" % NAMESPACE, kwargs['data'])
 
     def testNoCommitWhenAddFieldNotCalled(self):
-        self.fxf.begin()
-        self.fxf.commit()
+        self.fxf.begin(name='tsName')
+        list(compose(self.fxf.commit(id=1234)))
         self.assertEquals([], self.observer.calledMethods)
 
+    def testWorksWithRealTransactionScope(self):
+        intercept = CallTrace('Intercept', ignoredAttributes=['begin', 'commit', 'rollback'], methods={'add': add})
+        class MockVenturi(Observable):
+            def all_unknown(self, message, *args, **kwargs):
+                self.ctx.tx.locals['id'] = 'an:identifier'
+                yield self.all.unknown(message, *args, **kwargs)
+        class MockMultiFielder(Observable):
+            def add(self, *args, **kwargs):
+                self.do.addField('field.name', 'MyName')
+                self.do.addField('field.name', 'AnotherName')
+                self.do.addField('field.title', 'MyDocument')
+                yield 'ok'
+        mockMultiFielder = MockMultiFielder()
+        root = be(
+            (Observable(),
+                (TransactionScope(transactionName='xmlDocument'),
+                    (MockVenturi(),
+                        (mockMultiFielder,
+                            (Fields2XmlFields(transactionName='xmlDocument', partname='partname'),
+                                (intercept,),
+                            )
+                        )
+                    )
+                )
+            )
+        )
+
+        list(compose(root.all.add('some', 'arguments')))
+        self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
+        method = intercept.calledMethods[0]
+        expectedXml = '<fields><field name="field.name">MyName</field><field name="field.name">AnotherName</field><field name="field.title">MyDocument</field></fields>'
+        self.assertEquals(((), {'identifier': 'an:identifier', 'partname': 'partname', 'data': expectedXml}), (method.args, method.kwargs))
+
     def testSameAddFieldGeneratedTwoTimes(self):
-        self.fxf.begin()
+        self.fxf.begin(name='tsName')
         self.fxf.addField("key.sub", "value")
         self.fxf.addField("key.sub", "othervalue")
         self.fxf.addField("key.sub", "value")
         self.fxf.addField("key.sub", "separatedbyvalue")
-        self.fxf.commit()
+        list(compose(self.fxf.commit(id=1234)))
 
         self.assertEquals(['add'], [m.name for m in self.observer.calledMethods])
         self.assertEqualsWS("""<fields xmlns="%s">
@@ -90,18 +129,18 @@
 
     def testEmptyNamespace(self):
         ctx = CallTrace('CTX')
-        tx = CallTrace('TX')
+        tx = CallTrace('TX', returnValues={'getId': 1234})
         tx.locals = {'id': 'identifier'}
         tx.name = "tsName"
         fxf = Fields2XmlFields("tsName", "fields-partname")
         fxf.ctx = ctx 
         fxf.ctx.tx = tx
-        observer = CallTrace()
+        observer = CallTrace(methods={'add': add})
         fxf.addObserver(observer)
         
-        fxf.begin()
+        fxf.begin(name='tsName')
         fxf.addField("key.sub", "value")
-        fxf.commit()
+        list(compose(fxf.commit(id=1234)))
 
         self.assertEquals(['add'], [m.name for m in observer.calledMethods])
         self.assertEqualsWS("""<fields>
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/fields2xmltest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/fields2xmltest.py
--- version_0/test/fields2xmltest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/fields2xmltest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,140 +1,173 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
-from meresco.components import Fields2XmlTx
+from meresco.components import Fields2Xml
 from meresco.components.fields2xml import Fields2XmlException, generateXml
+from meresco.core import Observable, TransactionScope, ResourceManager
+from weightless.core import be, compose
 from amara.binderytools import bind_string
 from StringIO import StringIO
 from lxml.etree import parse
 
-class Fields2XmlTest(CQ2TestCase):
+def add(identifier, partname, data):
+    return
+    yield
+
+class Fields2XmlTest(SeecrTestCase):
     def testOne(self):
-        transaction = CallTrace('Transaction')
-        ctx = CallTrace('CTX')
-        tx = CallTrace('TX')
-        tx.locals = {'id': 'identifier'}
-        transaction.ctx = ctx
-        transaction.ctx.tx = tx
-        transactionDo = CallTrace('TransactionDo')
-        transaction.do = transactionDo
-        
-        f = Fields2XmlTx(transaction, 'extra')
+        __callstack_var_tx__ = CallTrace('TX')
+        __callstack_var_tx__.locals = {'id': 'identifier'}
+
+        intercept = CallTrace(methods={'add': add})
+        fields2Xml = Fields2Xml('extra')
+        fields2Xml.addObserver(intercept)
+        def f():
+            f = yield fields2Xml.beginTransaction()
+            yield f
+        f = compose(f()).next()
         f.addField('key.sub', 'value')
-        f.commit()
+        list(compose(f.commit()))
 
-        self.assertEquals(['add'], [m.name for m in transactionDo.calledMethods])
-        self.assertEquals(('identifier', 'extra', '<extra><key><sub>value</sub></key></extra>'), transactionDo.calledMethods[0].args)
+        self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
+        self.assertEquals(dict(identifier='identifier', partname='extra', data='<extra><key><sub>value</sub></key></extra>'), intercept.calledMethods[0].kwargs)
 
     def testAddNotCalledWhenNoAddFields(self):
-        transaction = CallTrace('Transaction')
-        ctx = CallTrace('CTX')
-        tx = CallTrace('TX')
-        tx.locals = {'id': 'identifier'}
-        transaction.ctx = ctx
-        transaction.ctx.tx = tx
-        transactionDo = CallTrace('TransactionDo')
-        transaction.do = transactionDo
-        
-        f = Fields2XmlTx(transaction, 'extra')
+        intercept = CallTrace(methods={'add': add})
+        fields2Xml = Fields2Xml('extra')
+        fields2Xml.addObserver(intercept)
+        def f():
+            f = yield fields2Xml.beginTransaction()
+            yield f
+        f = compose(f()).next()
         f.commit()
 
-        self.assertEquals([], [m.name for m in transactionDo.calledMethods])
+        self.assertEquals([], [m.name for m in intercept.calledMethods])
     
     def testSameAddFieldGeneratedTwoTimes(self):
-        transaction = CallTrace('Transaction')
-        ctx = CallTrace('CTX')
-        tx = CallTrace('TX')
-        tx.locals = {'id': 'identifier'}
-        transaction.ctx = ctx
-        transaction.ctx.tx = tx
-        transactionDo = CallTrace('TransactionDo')
-        transaction.do = transactionDo
-        
-        f = Fields2XmlTx(transaction, 'extra')
+        __callstack_var_tx__ = CallTrace('TX')
+        __callstack_var_tx__.locals = {'id': 'identifier'}
+        intercept = CallTrace(methods={'add': add})
+        fields2Xml = Fields2Xml('extra')
+        fields2Xml.addObserver(intercept)
+        def f():
+            f = yield fields2Xml.beginTransaction()
+            yield f
+        f = compose(f()).next()
         f.addField('key.sub', 'value')
         f.addField('key.sub', 'othervalue')
         f.addField('key.sub', 'value')
         f.addField('key.sub', 'separatedbyvalue')
-        f.commit()
-
-        self.assertEquals(['add'], [m.name for m in transactionDo.calledMethods])
-        self.assertEquals(('identifier', 'extra', '<extra><key><sub>value</sub></key><key><sub>othervalue</sub></key><key><sub>value</sub></key><key><sub>separatedbyvalue</sub></key></extra>'), transactionDo.calledMethods[0].args)
+        list(compose(f.commit()))
 
+        self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
+        self.assertEquals(dict(identifier='identifier', partname='extra', data='<extra><key><sub>value</sub></key><key><sub>othervalue</sub></key><key><sub>value</sub></key><key><sub>separatedbyvalue</sub></key></extra>'), intercept.calledMethods[0].kwargs)
         # Filtering of duplicate keys is removed. (Was introduced in 3.4.4)
         # The generated XML will eventually create a LuceneDocument, the sequence of values is important
         # for phrasequeries.
 
+    def testWorksWithRealTransactionScope(self):
+        intercept = CallTrace('Intercept', ignoredAttributes=['begin', 'commit', 'rollback'], methods={'add': add})
+        class MockVenturi(Observable):
+            def all_unknown(self, message, *args, **kwargs):
+                self.ctx.tx.locals['id'] = 'an:identifier'
+                yield self.all.unknown(message, *args, **kwargs)
+        class MockMultiFielder(Observable):
+            def add(self, *args, **kwargs):
+                self.do.addField('field.name', 'MyName')
+                self.do.addField('field.name', 'AnotherName')
+                self.do.addField('field.title', 'MyDocument')
+                yield 'ok'
+        root = be(
+            (Observable(),
+                (TransactionScope(transactionName="xmlDocument"),
+                    (MockVenturi(),
+                        (MockMultiFielder(),
+                            (ResourceManager("xmlDocument"),
+                                (Fields2Xml(partName="partname"),
+                                    (intercept,),
+                                )
+                            )
+                        )
+                    )
+                )
+            )
+        )
+        list(compose(root.all.add('some', 'arguments')))
+        self.assertEquals(['add'], [m.name for m in intercept.calledMethods])
+        method = intercept.calledMethods[0]
+        expectedXml = "<partname><field><name>MyName</name></field><field><name>AnotherName</name></field><field><title>MyDocument</title></field></partname>"
+        self.assertEquals(((), {'identifier': 'an:identifier', 'partname': 'partname', 'data': expectedXml}), (method.args, method.kwargs))
+
 
     def testPartNameIsDefinedAtInitialization(self):
-        transaction = CallTrace('Transaction')
-        ctx = CallTrace('CTX')        
-        tx = CallTrace('TX')
-        tx.locals = {'id': 'otherIdentifier'}
-        transaction.ctx = ctx
-        transaction.ctx.tx = tx
-        transactionDo = CallTrace('TransactionDo')
-        transaction.do = transactionDo
-        
-        f = Fields2XmlTx(transaction, 'partName')
+        __callstack_var_tx__ = CallTrace('TX')
+        __callstack_var_tx__.locals = {'id': 'otherIdentifier'}
+        intercept = CallTrace(methods={'add': add})
+        fields2Xml = Fields2Xml('partName')
+        fields2Xml.addObserver(intercept)
+        def f():
+            f = yield fields2Xml.beginTransaction()
+            yield f
+        f = compose(f()).next()
         f.addField('key.sub', 'value')
-        f.commit()
+        list(compose(f.commit()))
         
-        self.assertEquals('otherIdentifier', transactionDo.calledMethods[0].args[0])
-        self.assertEquals('partName', transactionDo.calledMethods[0].args[1])
-        xml = bind_string(transactionDo.calledMethods[0].args[2])
+        self.assertEquals('otherIdentifier', intercept.calledMethods[0].kwargs['identifier'])
+        self.assertEquals('partName', intercept.calledMethods[0].kwargs['partname'])
+        xml = bind_string(intercept.calledMethods[0].kwargs['data'])
         self.assertEquals('partName', str(xml.childNodes[0].localName))
 
     def testNamespace(self):
-        transaction = CallTrace('Transaction')
-        ctx = CallTrace('CTX')         
-        tx = CallTrace('TX')
-        tx.locals = {'id': 'identifier'}
-        transaction.ctx = ctx
-        transaction.ctx.tx = tx  
-        transactionDo = CallTrace('TransactionDo')
-        transaction.do = transactionDo
-        
-        f = Fields2XmlTx(transaction, 'extra', namespace="http://meresco.org/namespace/fields/extra")
+        __callstack_var_tx__ = CallTrace('TX')
+        __callstack_var_tx__.locals = {'id': 'identifier'}
+        intercept = CallTrace(methods={'add': add})
+        fields2Xml = Fields2Xml('extra', namespace="http://meresco.org/namespace/fields/extra")
+        fields2Xml.addObserver(intercept)
+        def f():
+            f = yield fields2Xml.beginTransaction()
+            yield f
+        f = compose(f()).next()
         f.addField('key.sub', 'value')
-        f.commit()
+        list(compose(f.commit()))
         
-        self.assertEquals(('identifier', 'extra', '<extra xmlns="http://meresco.org/namespace/fields/extra"><key><sub>value</sub></key></extra>'), transactionDo.calledMethods[0].args)
+        self.assertEquals(dict(identifier='identifier', partname='extra', data='<extra xmlns="http://meresco.org/namespace/fields/extra"><key><sub>value</sub></key></extra>'), intercept.calledMethods[0].kwargs)
 
     def testIllegalPartNameRaisesException(self):
-        for name in ['this is wrong', '%%@$%*^$^', '/slash', 'dot.dot']:
+        for partname in ['this is wrong', '%%@$%*^$^', '/slash', 'dot.dot']:
             try:
-                Fields2XmlTx('ignored', name)
-                self.fail('Expected error for ' + name)
+                Fields2Xml(partname)
+                self.fail('Expected error for ' + partname)
             except Fields2XmlException, e:
-                self.assertTrue(name in str(e))
+                self.assertTrue(partname in str(e))
 
     def testGenerateOneKeyXml(self):
         self.assertEquals('<key>value</key>', generateXml([('key','value')]))
@@ -169,5 +202,3 @@
         x = '<root>%s</root>' % generateXml(fields)
         self.assertEquals("<root><vuur><aap>normal</aap></vuur><vuurboom><aap>normal</aap></vuurboom></root>", x)
 
-
-
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/filelisttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/filelisttest.py
--- version_0/test/filelisttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/filelisttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,37 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from __future__ import with_statement
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 from os.path import join
 from bisect import bisect_left, bisect_right
 from random import choice
@@ -39,7 +40,7 @@
 from meresco.components.packer import IntStringPacker, IntPacker
 from time import time
 
-class FileListTest(CQ2TestCase):
+class FileListTest(SeecrTestCase):
     def testAppendAndWrite(self):
         s = SortedFileList(join(self.tempdir, 'list'))
         s.append(1)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/filterpartbynametest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/filterpartbynametest.py
--- version_0/test/filterpartbynametest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/filterpartbynametest.py	2012-01-29 19:09:47.000000000 +0100
@@ -3,7 +3,7 @@
 # "Meresco Components" are components to build searchengines, repositories
 # and archives, based on "Meresco Core". 
 # 
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -24,7 +24,7 @@
 # 
 ## end license ##
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from unittest import TestCase
 from meresco.components import FilterPartByName
 from weightless.core import compose
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/apacheloggertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/apacheloggertest.py
--- version_0/test/http/apacheloggertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/apacheloggertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,30 +1,32 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from StringIO import StringIO
 from weightless.core import compose
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/argumentsinsessiontest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/argumentsinsessiontest.py
--- version_0/test/http/argumentsinsessiontest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/argumentsinsessiontest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,34 +1,35 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from meresco.components.http import ArgumentsInSession
 from meresco.core import Observable
 from weightless.core import compose
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/basicauthenticationtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/basicauthenticationtest.py
--- version_0/test/http/basicauthenticationtest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/basicauthenticationtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,50 +1,55 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from meresco.components.http import BasicAuthentication
 from base64 import b64encode
 from weightless.core import compose
 
+def handleRequest(*args, **kwargs):
+    return
+    yield
+
 class BasicAuthenticationTest(TestCase):
 
     def testServerSendsChallenge(self):
         authentication = BasicAuthentication(realm='Test Realm')
-        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True})
+        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True}, methods={'handleRequest': handleRequest})
         authentication.addObserver(interceptor)
         response = ''.join(authentication.handleRequest(port='8080', RequestURI='/private', Method='GET'))
         self.assertTrue('WWW-Authenticate: Basic realm="Test Realm"\r\n' in response, response)
 
     def testHandleSimplePrivateRequest(self):
         authentication = BasicAuthentication(realm='Test Realm')
-        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True, 'getUser':{'name':'aUser'}})
+        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True, 'getUser':{'name':'aUser'}}, methods={'handleRequest': handleRequest})
         authentication.addObserver(interceptor)
         headers = {'Authorization': 'Basic ' + b64encode('aUser:aPassword')}
         response = authentication.handleRequest(port='8080', RequestURI='/private', Method='GET', Headers=headers)
@@ -59,7 +64,7 @@
     def testHandleDifferentUsers(self):
         authentication = BasicAuthentication(realm='Test Realm')
         userdata = {'name':'aUser'}
-        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True, 'getUser':userdata})
+        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True, 'getUser':userdata}, methods={'handleRequest': handleRequest})
         authentication.addObserver(interceptor)
         headers = {'Authorization': 'Basic ' + b64encode('aUser:aPassword')}
         response = authentication.handleRequest(port='8080', RequestURI='/private', Method='GET', Headers=headers)
@@ -73,7 +78,7 @@
 
     def testDetectValidUserWithPasswordAndUserName(self):
         authentication = BasicAuthentication(realm='Test Realm')
-        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True, 'handleRequest': (x for x in 'response')})
+        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': True}, methods={'handleRequest': lambda *a, **kw: (x for x in 'response')})
         authentication.addObserver(interceptor)
         headers = {'Authorization': 'Basic ' + b64encode('aUser:aPassword')}
         results = authentication.handleRequest(port='8080', RequestURI='/private', Method='GET', Headers=headers)
@@ -86,7 +91,7 @@
 
     def testFailedLogin(self):
         authentication = BasicAuthentication(realm='Test Realm')
-        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': False})
+        interceptor = CallTrace('httphandler', returnValues={'isValidLogin': False}, methods={'handleRequest': handleRequest})
         authentication.addObserver(interceptor)
         headers = {'Authorization': 'Basic ' + b64encode('aUser:aPassword')}
         response = ''.join(authentication.handleRequest(port='8080', RequestURI='/private', Method='GET', Headers=headers))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/deproxytest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/deproxytest.py
--- version_0/test/http/deproxytest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/deproxytest.py	2012-01-29 19:09:47.000000000 +0100
@@ -6,6 +6,7 @@
 # 
 # Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -29,21 +30,27 @@
 
 from meresco.core import Observable
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 
 from meresco.components.http import Deproxy
 
+from weightless.core import compose
+
+
+def handleRequest(*args, **kwargs):
+    return
+    yield
 
 class DeproxyTest(TestCase):
     def testClientInCaseNoXForwardedForHeader(self):
         clientfromxforwardedfor = Deproxy(deproxyForIps=['1.1.1.1'])
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         clientfromxforwardedfor.addObserver(observer)
 
         observable = Observable()
         observable.addObserver(clientfromxforwardedfor)
 
-        list(observable.any.handleRequest(Client=("1.1.1.1", 11111), Headers={}))
+        list(compose(observable.all.handleRequest(Client=("1.1.1.1", 11111), Headers={})))
 
         self.assertEquals(1, len(observer.calledMethods))
         handleRequestCallKwargs = observer.calledMethods[0].kwargs
@@ -53,15 +60,15 @@
 
     def testDeproxy(self):
         clientfromxforwardedfor = Deproxy(deproxyForIps=['1.1.1.1'])
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         clientfromxforwardedfor.addObserver(observer)
 
         observable = Observable()
         observable.addObserver(clientfromxforwardedfor)
 
-        list(observable.any.handleRequest(
+        list(compose(observable.all.handleRequest(
             Client=("1.1.1.1", 11111),
-            Headers={"X-Forwarded-For": "2.2.2.2"}))
+            Headers={"X-Forwarded-For": "2.2.2.2"})))
 
         self.assertEquals(1, len(observer.calledMethods))
         handleRequestCallKwargs = observer.calledMethods[0].kwargs
@@ -70,30 +77,30 @@
 
     def testClientFromMulitpleXForwardedForEntries(self):
         clientfromxforwardedfor = Deproxy(deproxyForIps=['1.1.1.1'])
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         clientfromxforwardedfor.addObserver(observer)
 
         observable = Observable()
         observable.addObserver(clientfromxforwardedfor)
 
-        list(observable.any.handleRequest(
+        list(compose(observable.all.handleRequest(
              Client=("1.1.1.1", 11111),
-             Headers={"X-Forwarded-For": "2.2.2.2,3.3.3.3,4.4.4.4"}))
+             Headers={"X-Forwarded-For": "2.2.2.2,3.3.3.3,4.4.4.4"})))
 
         self.assertEquals(1, len(observer.calledMethods))
         handleRequestCallKwargs = observer.calledMethods[0].kwargs
         self.assertEquals("2.2.2.2", handleRequestCallKwargs['Client'][0])
         self.assertEquals({"X-Forwarded-For": "2.2.2.2,3.3.3.3,4.4.4.4"}, handleRequestCallKwargs['Headers'])
 
-        list(observable.any.handleRequest(
+        list(compose(observable.all.handleRequest(
              Client=("1.1.1.1", 11111),
-             Headers={"X-Forwarded-For": " 2.2.2.2 , 3.3.3.3,4.4.4.4"}))
+             Headers={"X-Forwarded-For": " 2.2.2.2 , 3.3.3.3,4.4.4.4"})))
         self.assertEquals("2.2.2.2", observer.calledMethods[1].kwargs['Client'][0])
 
     def testHostFromXForwardedHost(self):
         clientfromxforwardedfor = Deproxy(deproxyForIpRanges=[
             ('9.9.9.0', '9.9.9.255')])
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         clientfromxforwardedfor.addObserver(observer)
 
         observable = Observable()
@@ -103,7 +110,7 @@
             "Host": "1.1.1.1:11111",
             "X-Forwarded-Host": "2.2.2.2:22222,3.3.3.3:33333,4.4.4.4:44444"
         }
-        list(observable.any.handleRequest(Client=("9.9.9.9", 9999), Headers=Headers))
+        list(compose(observable.all.handleRequest(Client=("9.9.9.9", 9999), Headers=Headers)))
 
         self.assertEquals(1, len(observer.calledMethods))
         handleRequestCallKwargs = observer.calledMethods[0].kwargs
@@ -114,15 +121,15 @@
 
     def testDeproxyForIps(self):
         clientfromxforwardedfor = Deproxy(deproxyForIps=['3.3.3.3'])
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         clientfromxforwardedfor.addObserver(observer)
 
         observable = Observable()
         observable.addObserver(clientfromxforwardedfor)
 
-        list(observable.any.handleRequest(
+        list(compose(observable.all.handleRequest(
             Client=("1.1.1.1", 11111),
-            Headers={"X-Forwarded-For": "2.2.2.2"}))
+            Headers={"X-Forwarded-For": "2.2.2.2"})))
 
         self.assertEquals(1, len(observer.calledMethods))
         handleRequestCallKwargs = observer.calledMethods[0].kwargs
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/fileservertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/fileservertest.py
--- version_0/test/http/fileservertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/fileservertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,30 +1,32 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
 
 from os.path import join
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/handlerequestfiltertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/handlerequestfiltertest.py
--- version_0/test/http/handlerequestfiltertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/handlerequestfiltertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,40 +1,43 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
 from meresco.components.http import HandleRequestFilter
-from meresco.core import be, Observable
+from meresco.core import Observable
 
-class HandleRequestFilterTest(CQ2TestCase):
+from weightless.core import be, compose
+
+class HandleRequestFilterTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
-        self.observer = CallTrace('Observer')
+        SeecrTestCase.setUp(self)
+        self.observer = CallTrace('Observer', methods={'handleRequest': lambda *args, **kwargs: (x for x in [])})
 
         self.usedKwargs = []
         def filterMethod(**kwargs):
@@ -53,7 +56,7 @@
     def testPasses(self):
         self.result = True
         inputKwargs = dict(path='path', Method='GET')
-        list(self.dna.all.handleRequest(**inputKwargs))
+        list(compose(self.dna.all.handleRequest(**inputKwargs)))
 
         self.assertEquals([('handleRequest', inputKwargs)], [(m.name, m.kwargs) for m in self.observer.calledMethods])
         self.assertEquals([inputKwargs], self.usedKwargs)
@@ -62,7 +65,7 @@
         """Fly you fools!"""
         self.result = False
         inputKwargs = dict(path='path', Method='GET')
-        list(self.dna.all.handleRequest(**inputKwargs))
+        list(compose(self.dna.all.handleRequest(**inputKwargs)))
 
         self.assertEquals([], [m.name for m in self.observer.calledMethods])
         self.assertEquals([inputKwargs], self.usedKwargs)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/__init__.py
--- version_0/test/http/__init__.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/ipfiltertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/ipfiltertest.py
--- version_0/test/http/ipfiltertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/ipfiltertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -8,6 +8,7 @@
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -29,10 +30,16 @@
 
 from unittest import TestCase
 
-from cq2utils import CallTrace
-from meresco.core import be, Observable
+from seecr.test import CallTrace
+from meresco.core import Observable
 from meresco.components.http import IpFilter
 
+from weightless.core import compose, be
+
+def handleRequest(*args, **kwargs):
+    return
+    yield
+
 class IpFilterTest(TestCase):
 
     def assertValidIp(self,  address, ipranges=[], ips=[], headers={}):
@@ -43,7 +50,7 @@
 
 
     def _assertValidIp(self, address, ipranges, ips,headers, passed):
-        self.observer = CallTrace('Observer')
+        self.observer = CallTrace('Observer', methods={'handleRequest': handleRequest})
 
         dna = be(
             (Observable(),
@@ -53,7 +60,7 @@
             )
         )
 
-        list(dna.all.handleRequest(Client=(address,), Headers=headers))
+        list(compose(dna.all.handleRequest(Client=(address,), Headers=headers)))
         if passed:
             self.assertEquals(1, len(self.observer.calledMethods))
             self.assertEquals('handleRequest', self.observer.calledMethods[0].name)
@@ -68,7 +75,7 @@
         self.assertInvalidIp('111.1.1.1', ips=['192.168.1.1'], headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'})
 
     def testIpfilterFakeIpHeaderKwargsUnchanged(self):
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         ipf = IpFilter(allowedIps=['192.168.1.1'])
 
         dna = be(
@@ -79,7 +86,7 @@
             )
         )
 
-        list(dna.all.handleRequest(Client=('127.0.0.1',), Headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'}))
+        list(compose(dna.all.handleRequest(Client=('127.0.0.1',), Headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'})))
 
         self.assertEquals(1, len(observer.calledMethods))
         self.assertEquals((), observer.calledMethods[0].args)
@@ -116,7 +123,7 @@
         self.assertEquals(0, iprange.convertToNumber('0.0.0.0'))
 
     def testUpdateIpFilter(self):
-        observer = CallTrace()
+        observer = CallTrace(methods={'handleRequest': handleRequest})
         ipf = IpFilter(allowedIps=['192.168.1.1'], allowedIpRanges=[('10.0.0.1', '10.0.0.2')])
 
         dna = be(
@@ -127,17 +134,18 @@
             )
         )
 
-        list(dna.all.handleRequest(Client=('127.0.0.1',), Headers={}))
-        list(dna.all.handleRequest(Client=('10.0.0.10',), Headers={}))
+        list(compose(dna.all.handleRequest(Client=('127.0.0.1',), Headers={})))
+        list(compose(dna.all.handleRequest(Client=('10.0.0.10',), Headers={})))
         self.assertEquals(0, len(observer.calledMethods))
-        list(dna.all.handleRequest(Client=('192.168.1.1',), Headers={}))
+        list(compose(dna.all.handleRequest(Client=('192.168.1.1',), Headers={})))
         self.assertEquals(1, len(observer.calledMethods))
 
         del observer.calledMethods[:]
         
         ipf.updateIps(ipAddresses=['127.0.0.1'], ipRanges=[('10.0.0.1', '10.0.0.255')])
-        list(dna.all.handleRequest(Client=('192.168.1.1',), Headers={}))
+        list(compose(dna.all.handleRequest(Client=('192.168.1.1',), Headers={})))
         self.assertEquals(0, len(observer.calledMethods))
-        list(dna.all.handleRequest(Client=('127.0.0.1',), Headers={}))
-        list(dna.all.handleRequest(Client=('10.0.0.10',), Headers={}))
+        list(compose(dna.all.handleRequest(Client=('127.0.0.1',), Headers={})))
+        list(compose(dna.all.handleRequest(Client=('10.0.0.10',), Headers={})))
         self.assertEquals(2, len(observer.calledMethods))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/observablehttpservertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/observablehttpservertest.py
--- version_0/test/http/observablehttpservertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/observablehttpservertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,45 +1,48 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from socket import socket
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from weightless.io import Reactor
+from weightless.core import compose
 
 from meresco.components.http import ObservableHttpServer
 from meresco.components.http.utils import CRLF
 
-class ObservableHttpServerTest(CQ2TestCase):
+class ObservableHttpServerTest(SeecrTestCase):
     def testSimpleHandleRequest(self):
-        observer = CallTrace('Observer')
+        observer = CallTrace('Observer', methods={'handleRequest': lambda *a, **kw: (x for x in [])})
         s = ObservableHttpServer(CallTrace('Reactor'), 1024)
         s.addObserver(observer)
 
-        list(s.handleRequest(RequestURI='http://localhost'))
+        list(compose(s.handleRequest(RequestURI='http://localhost')))
         self.assertEquals(1, len(observer.calledMethods))
         method = observer.calledMethods[0]
         self.assertEquals('handleRequest', method.name)
@@ -47,11 +50,11 @@
         self.assertEquals(7, len(method.kwargs))
 
     def testHandleRequest(self):
-        observer = CallTrace('Observer')
+        observer = CallTrace('Observer', methods={'handleRequest': lambda *a, **kw: (x for x in [])})
         s = ObservableHttpServer(CallTrace('Reactor'), 1024)
         s.addObserver(observer)
 
-        list(s.handleRequest(RequestURI='http://localhost/path?key=value&emptykey#fragment'))
+        list(compose(s.handleRequest(RequestURI='http://localhost/path?key=value&emptykey#fragment')))
         self.assertEquals(1, len(observer.calledMethods))
         method = observer.calledMethods[0]
         self.assertEquals('handleRequest', method.name)
@@ -65,7 +68,7 @@
         self.assertEquals([''], arguments['emptykey'])
 
     def testMaxConnectionsErrorHandling(self):
-        observer = CallTrace('Observer')
+        observer = CallTrace('Observer', methods={'handleRequest': lambda *a, **kw: (x for x in [])})
         reactor = CallTrace('Reactor')
 
         s = ObservableHttpServer(reactor, 1024, maxConnections=5)
@@ -124,6 +127,7 @@
         sok.connect(('localhost', 2000))
         sok.send('GET / HTTP/1.0\r\n\r\n')
         reactor.step()
+        reactor.step()
         self.assertEquals([('read', 3)], prios)
         reactor.step().step()
         self.assertEquals([('read', 3), ('read', 3)], prios)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/pathfiltertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/pathfiltertest.py
--- version_0/test/http/pathfiltertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/pathfiltertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,64 +1,66 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
 from meresco.components.http import PathFilter
+from weightless.core import compose
+
+class PathFilterTest(SeecrTestCase):
+    def setUp(self):
+        SeecrTestCase.setUp(self)
+        self.interceptor = CallTrace('Interceptor', methods={'handleRequest': lambda *args, **kwargs: (x for x in [])})
 
-class PathFilterTest(CQ2TestCase):
     def testSimplePath(self):
         f = PathFilter('/path')
-        interceptor = CallTrace('Interceptor')
-        f.addObserver(interceptor)
-        list(f.handleRequest(path='/path', otherArgument='value'))
-        self.assertEquals(1, len(interceptor.calledMethods))
-        self.assertEquals('handleRequest', interceptor.calledMethods[0].name)
-        self.assertEquals({'path':'/path', 'otherArgument':'value'}, interceptor.calledMethods[0].kwargs)
+        f.addObserver(self.interceptor)
+        list(compose(f.handleRequest(path='/path', otherArgument='value')))
+        self.assertEquals(1, len(self.interceptor.calledMethods))
+        self.assertEquals('handleRequest', self.interceptor.calledMethods[0].name)
+        self.assertEquals({'path':'/path', 'otherArgument':'value'}, self.interceptor.calledMethods[0].kwargs)
 
     def testOtherPath(self):
         f = PathFilter('/path')
-        interceptor = CallTrace('Interceptor')
-        f.addObserver(interceptor)
-        list(f.handleRequest(path='/other/path'))
-        self.assertEquals(0, len(interceptor.calledMethods))
+        f.addObserver(self.interceptor)
+        list(compose(f.handleRequest(path='/other/path')))
+        self.assertEquals(0, len(self.interceptor.calledMethods))
 
     def testPaths(self):
         f = PathFilter(['/path', '/other/path'])
-        interceptor = CallTrace('Interceptor')
-        f.addObserver(interceptor)
-        list(f.handleRequest(path='/other/path'))
-        self.assertEquals(1, len(interceptor.calledMethods))
+        f.addObserver(self.interceptor)
+        list(compose(f.handleRequest(path='/other/path')))
+        self.assertEquals(1, len(self.interceptor.calledMethods))
 
     def testExcludingPaths(self):
         f = PathFilter('/path', excluding=['/path/not/this'])
-        interceptor = CallTrace('Interceptor')
-        f.addObserver(interceptor)
-        list(f.handleRequest(path='/path/not/this/path'))
-        self.assertEquals(0, len(interceptor.calledMethods))
-        list(f.handleRequest(path='/path/other'))
-        self.assertEquals(1, len(interceptor.calledMethods))
+        f.addObserver(self.interceptor)
+        list(compose(f.handleRequest(path='/path/not/this/path')))
+        self.assertEquals(0, len(self.interceptor.calledMethods))
+        list(compose(f.handleRequest(path='/path/other')))
+        self.assertEquals(1, len(self.interceptor.calledMethods))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/pathrenametest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/pathrenametest.py
--- version_0/test/http/pathrenametest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/pathrenametest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,33 +1,35 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from meresco.components.http import PathRename
 from meresco.core import Observable
 from weightless.core import compose
@@ -35,7 +37,7 @@
 class PathRenameTest(TestCase):
     def testRename(self):
         rename = PathRename(lambda path: '/new'+path)
-        interceptor = CallTrace('interceptor')
+        interceptor = CallTrace('interceptor', methods={'handleRequest': lambda *args, **kwargs: (x for x in [])})
         rename.addObserver(interceptor)
 
         list(compose(rename.handleRequest(path='/mypath')))
@@ -54,3 +56,4 @@
 
         self.assertEquals(1, len(interceptor.calledMethods))
         self.assertEquals("otherMethod('attribute')", str(interceptor.calledMethods[0]))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/sessionhandlertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/sessionhandlertest.py
--- version_0/test/http/sessionhandlertest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/sessionhandlertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,39 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
 from meresco.components.http import SessionHandler, utils
 from meresco.components.http.sessionhandler import Session
 from weightless.core import compose
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from time import time, sleep
 
 #Cookies RFC 2109 http://www.ietf.org/rfc/rfc2109.txt
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/timeddictionarytest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/timeddictionarytest.py
--- version_0/test/http/timeddictionarytest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/timeddictionarytest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,35 +1,37 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
 
 from meresco.components import TimedDictionary
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 
 from time import time, sleep
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/http/utilstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/http/utilstest.py
--- version_0/test/http/utilstest.py	2012-01-16 13:37:06.000000000 +0100
+++ version_1/test/http/utilstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 import meresco.components.http.utils as utils
 from unittest import TestCase
 from weightless.core import compose
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/inboxtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/inboxtest.py
--- version_0/test/inboxtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/inboxtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,34 +1,38 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2008-2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2008-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2008-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2008-2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase, CallTrace
 
-from meresco.core import be, Transparant
+from seecr.test import SeecrTestCase, CallTrace
 
+from meresco.core import Transparent
+
+from weightless.core import be
 from weightless.io import Reactor
 
 from os.path import join, isfile
@@ -37,10 +41,10 @@
 
 from meresco.components.inbox import Inbox, InboxException
 
-class InboxTest(CQ2TestCase):
+class InboxTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.reactor = Reactor()
         self.observer = CallTrace('Observer')
         self.inboxDirectory = join(self.tempdir, 'inbox')
@@ -95,7 +99,7 @@
         self.moveInRecord(identifier='repo:ident:3')
         inbox = Inbox(self.reactor, inboxDirectory=self.inboxDirectory, doneDirectory=self.doneDirectory)
         dna = be(
-            (Transparant(),
+            (Transparent(),
                 (inbox,)
             )
         )
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/log/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/log/__init__.py
--- version_0/test/log/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/log/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -5,6 +5,7 @@
 # 
 # Copyright (C) 2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/log/logfileservertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/log/logfileservertest.py
--- version_0/test/log/logfileservertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/log/logfileservertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -6,6 +6,7 @@
 # 
 # Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2006-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -25,7 +26,7 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
 from os.path import join
 from os import mkdir, listdir
@@ -35,9 +36,9 @@
 
 from meresco.components.log import LogFileServer, DirectoryLog
 
-class LogFileServerTest(CQ2TestCase):
+class LogFileServerTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         
         self.logDir = join(self.tempdir, 'log')
         directoryLog = DirectoryLog(self.logDir)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/log/querylogtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/log/querylogtest.py
--- version_0/test/log/querylogtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/log/querylogtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -6,6 +6,7 @@
 # 
 # Copyright (C) 2006-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2006-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -25,7 +26,7 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
 from os.path import isfile, isdir, join
 from os import listdir
@@ -35,9 +36,11 @@
 
 from meresco.core import Observable
 
-class QueryLogTest(CQ2TestCase):
+from weightless.core import compose
+
+class QueryLogTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self._timeNow = 1257161136.0 # 2009-11-02 11:30:00
         def time():
             self._timeNow += 1.0
@@ -50,7 +53,7 @@
         observer = CallTrace('observer')
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
         self.queryLog.addObserver(observer)
-        result = ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        result = ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
 
         self.assertEquals('123', result)
         self.assertEquals(['handleRequest'], [m.name for m in observer.calledMethods])
@@ -66,7 +69,7 @@
         observer = CallTrace('observer')
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
         self.queryLog.addObserver(observer)
-        ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
 
         self.assertEquals(2, len(open(join(self.tempdir, '2009-11-02-query.log')).readlines()))
 
@@ -74,7 +77,7 @@
         observer= CallTrace('observer')
         observer.returnValues['handleRequest'] = (f for f in ['1', lambda: None,'3'])
         self.queryLog.addObserver(observer)
-        list(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        list(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
 
         self.assertEquals(1, len(open(join(self.tempdir, '2009-11-02-query.log')).readlines()))
         
@@ -82,10 +85,10 @@
         observer = CallTrace('observer')
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
         self.queryLog.addObserver(observer)
-        ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
         self._timeNow += 24 * 60 *60
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
-        ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
 
         self.assertEquals(['2009-11-02-query.log', '2009-11-03-query.log'], sorted(listdir(self.tempdir)))
 
@@ -93,7 +96,7 @@
         observer = CallTrace('observer')
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
         self.queryLog.addObserver(observer)
-        result = ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/not/included', otherArg='value'))
+        result = ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/not/included', otherArg='value')))
 
         self.assertEquals('123', result)
         self.assertEquals(0, len(listdir(self.tempdir)))
@@ -103,7 +106,7 @@
         observer = CallTrace('observer')
         observer.returnValues['handleRequest'] = (line for line in ['1','2','3'])
         self.queryLog.addObserver(observer)
-        ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru/extended/path', otherArg='value'))
+        ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru/extended/path', otherArg='value')))
         self.assertEquals(1, len(listdir(self.tempdir)))
         
     def testLogDirCreated(self):
@@ -119,7 +122,7 @@
                 self.ctx.queryArguments.update({'a':'A', 'b':'B', 'c':'C', 'd':['D','DD']})
                 yield 'result'
         self.queryLog.addObserver(HandleRequestObserver())
-        result = ''.join(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value'))
+        result = ''.join(compose(self.queryLog.handleRequest(Client=('127.0.0.1', 47785), path='/edurep/sru', otherArg='value')))
         self.assertEquals('result', result)
         self.assertEquals('2009-11-02T11:25:37Z 127.0.0.1 0.0K 1.000s /edurep/sru a=A&b=B&c=C&d=D&d=DD\n', open(join(self.tempdir, '2009-11-02-query.log')).read())
 
@@ -128,8 +131,10 @@
         helper = QueryLogHelperForSru()
         observer = CallTrace('observer')
         helper.addObserver(observer)
-        observer.returnValues['searchRetrieve'] = 'result'
-        helper.searchRetrieve(query=['query'], x_term_drilldown='drilldown', sortBy='field', sortDescending=False, **{'x-term-drilldown':'drilldown', 'under_score':'value', 'sortKeys':'field,,0'})
+        def searchRetrieve(**kwargs):
+            yield 'result'
+        observer.methods['searchRetrieve'] = searchRetrieve
+        list(compose(helper.searchRetrieve(query=['query'], x_term_drilldown='drilldown', sortBy='field', sortDescending=False, **{'x-term-drilldown':'drilldown', 'under_score':'value', 'sortKeys':'field,,0'})))
         self.assertEquals({'query': ['query'], 'x-term-drilldown': 'drilldown', 'under_score': 'value', 'sortKeys':'field,,0'}, __callstack_var_queryArguments__)
         
     def testQueryLogHelper(self):
@@ -137,8 +142,10 @@
         helper = QueryLogHelper()
         observer = CallTrace('observer')
         helper.addObserver(observer)
-        observer.returnValues['handleRequest'] = 'result'
-        result = list(helper.handleRequest(arguments={'key':['value'], 'key2':['value1', 'value2']}, path='path'))
+        def handleRequest(**kwargs):
+            yield 'result'
+        observer.methods['handleRequest'] = handleRequest
+        result = list(compose(helper.handleRequest(arguments={'key':['value'], 'key2':['value1', 'value2']}, path='path')))
         self.assertEquals(['result'], result)
         self.assertEquals({'key':['value'], 'key2':['value1', 'value2']}, __callstack_var_queryArguments__)
         self.assertEquals([{'arguments': {'key':['value'], 'key2':['value1', 'value2']}, 'path':'path'}], [m.kwargs for m in observer.calledMethods])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/msgbox/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/msgbox/__init__.py
--- version_0/test/msgbox/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/msgbox/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,24 +1,26 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/msgbox/msgboxtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/msgbox/msgboxtest.py
--- version_0/test/msgbox/msgboxtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/msgbox/msgboxtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,34 +1,37 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from __future__ import with_statement
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
-from meresco.core import be, Transparant
+from meresco.core import Transparent
 
+from weightless.core import be
 from weightless.io import Reactor
 
 from os.path import join, isfile, basename
@@ -40,23 +43,26 @@
 from time import sleep
 from traceback import format_exc
 
-from threading import Thread
-
 from meresco.components.msgbox import Msgbox
 from meresco.components.msgbox.msgbox import File
 
 
 DATA = "<record/>"
 
-def failingAddMock(identifier=None, filedata=None):
+def failingAddMock(identifier, filedata):
     raise ValueError()
+    yield
+
+def addMock(identifier, filedata):
+    return
+    yield
 
-class MsgboxTest(CQ2TestCase):
+class MsgboxTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.reactor = Reactor()
-        self.observer = CallTrace('Observer')
+        self.observer = CallTrace('Observer', methods={'add': addMock})
         self.inDirectory = join(self.tempdir, 'in')
         self.outDirectory = join(self.tempdir, 'out')
         makedirs(self.inDirectory)
@@ -108,7 +114,7 @@
         self.assertEquals(set(['repo:ident:1.record.ack', 'repo:ident:2.record.ack']), set(self.listfiles(self.outDirectory)))
 
     def testProcessFileErrorHandling(self):
-        self.observer.add = failingAddMock
+        self.observer.methods['add'] = failingAddMock
         self.createMsgbox()
         self.msgbox._logError = lambda m: None
 
@@ -123,7 +129,7 @@
         self.assertTrue(errorMessage.endswith("ValueError\n"), errorMessage)
 
     def testErrorHandlingWithReactorStep(self):
-        self.observer.add = failingAddMock
+        self.observer.methods['add'] = failingAddMock
         self.createMsgbox()
         self.msgbox._logError = lambda m: None
 
@@ -156,7 +162,7 @@
         self.assertFalse(isfile(join(self.outDirectory, filename + '.ack')))
 
     def testErrorHandlingAsynchronousMsgbox(self):
-        self.observer.add = failingAddMock
+        self.observer.methods['add'] = failingAddMock
         self.createMsgbox(asynchronous=True)
         self.msgbox._logError = lambda m: None
 
@@ -465,7 +471,7 @@
 
     def testUnEscapeIdentifiersWhenUsedAsInFilenames(self):
         msgbox = Msgbox(inDirectory=self.inDirectory, outDirectory=self.outDirectory)
-        interceptor = CallTrace()
+        interceptor = CallTrace(methods={'add': addMock})
         msgbox.addObserver(interceptor)
         open(join(self.inDirectory, '%2Eidwith.strange%2Fchar'), 'w').close()
         msgbox.processFile('%2Eidwith.strange%2Fchar')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/msgbox/updateadaptertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/msgbox/updateadaptertest.py
--- version_0/test/msgbox/updateadaptertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/msgbox/updateadaptertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,45 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.components.msgbox import UpdateAdapterToMsgbox, UpdateAdapterFromMsgbox, Msgbox
-from cq2utils import CallTrace, CQ2TestCase
+from weightless.core import compose
+from seecr.test import SeecrTestCase, CallTrace
 from lxml.etree import parse, tostring
 from StringIO import StringIO
 from os.path import basename, join
 from os import makedirs
 
-class UpdateAdapterTest(CQ2TestCase):
+def deleteMock(identifier):
+    return
+    yield
+
+class UpdateAdapterTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.indir = join(self.tempdir, 'in')
         self.outdir = join(self.tempdir, 'out')
         makedirs(self.indir)
@@ -43,7 +50,7 @@
         adapter = UpdateAdapterToMsgbox()
         adapter.addObserver(self.msgbox)
         
-        list(adapter.add(identifier='identifier', partname='partname', data='data'))
+        list(compose(adapter.add(identifier='identifier', partname='partname', data='data')))
         
         self.assertEquals('data', open(join(self.outdir, 'identifier.add')).read()) 
 
@@ -51,7 +58,7 @@
         adapter = UpdateAdapterToMsgbox()
         adapter.addObserver(self.msgbox)
         
-        list(adapter.delete(identifier='identifier'))
+        list(compose(adapter.delete(identifier='identifier')))
         
         self.assertEquals('', open(join(self.outdir, 'identifier.delete')).read()) 
 
@@ -68,7 +75,7 @@
 
     def testMsgboxAndFromAdapterDelete(self):
         adapter = UpdateAdapterFromMsgbox()
-        observer = CallTrace('observer')
+        observer = CallTrace('observer', methods={'delete': deleteMock})
         self.msgbox.addObserver(adapter)
         adapter.addObserver(observer)
         open(join(self.indir, 'identifier.delete'), 'w').close()
@@ -86,6 +93,8 @@
         def addMethod(filedata, **kwargs):
             addKwargs['filedata'] = filedata.read()
             addKwargs.update(kwargs)
+            return
+            yield
         observer.methods['add'] = addMethod
         self.msgbox.addObserver(adapter)
         adapter.addObserver(observer)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/multileveldrilldowntest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/multileveldrilldowntest.py
--- version_0/test/multileveldrilldowntest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/multileveldrilldowntest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,31 +1,32 @@
 ## begin license ##
-#
-#    "Delft-Tilburg" (delfttilburg) is a package containing shared code
-#    between the Delft "Discover" and Tilburg "Beter Zoeken & Vinden" projects.
-#    Both projects are based on Meresco Software (http://meresco.com)
-#    Copyright (C) 2008-2009 Technische Universiteit Delft http://www.tudelft.nl
-#    Copyright (C) 2008-2009 Universiteit van Tilburg http://www.uvt.nl
-#    Copyright (C) 2008-2009 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of "Delft-Tilburg".
-#
-#    "Delft-Tilburg" is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    "Delft-Tilburg" is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with "Delft-Tilburg"; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2008-2009 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2008-2009 Technische Universiteit Delft http://www.tudelft.nl
+# Copyright (C) 2008-2009 Universiteit van Tilburg http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from unittest import TestCase
 from meresco.core import Observable
 from weightless.core import compose
@@ -40,11 +41,14 @@
             {'date':[('datelevel1', 10, False)]}
         )
         drilldown = CallTrace('Drilldown')
-        drilldown.returnValues['drilldown'] = iter([('datelevel1', iter([('2008',13),('2007',10)]))])
+        def dd(*args, **kwargs):
+            raise StopIteration(iter([('datelevel1', iter([('2008',13),('2007',10)]))]))
+            yield
+        drilldown.methods['drilldown'] = dd
         multi.addObserver(drilldown)
         observable.addObserver(multi)
 
-        result = list(compose(observable.any.multiLevelDrilldown(bitMatrixRow, ['date'])))
+        result = list(compose(observable.call.multiLevelDrilldown(bitMatrixRow, ['date'])))
 
         self.assertEquals(1, len(drilldown.calledMethods))
         drilldownMethod = drilldown.calledMethods[0]
@@ -69,9 +73,10 @@
             self.assertEquals(1, len(fieldNamesAndMaxResults))
             levelField, levelMax, levelSorted = fieldNamesAndMaxResults[0]
             if 'datelevel2' == levelField:
-                return iter([('datelevel2', iter([('2008',13),('2007',10)][:levelMax]))])
+                raise StopIteration(iter([('datelevel2', iter([('2008',13),('2007',10)][:levelMax]))]))
             else:
-                return iter([('type', iter([('literature',43),('donaldduck',30)][:levelMax]))])
+                raise StopIteration(iter([('type', iter([('literature',43),('donaldduck',30)][:levelMax]))]))
+            yield
         drilldown.drilldown = doDrilldown
         multi.addObserver(drilldown)
 
@@ -95,9 +100,10 @@
             self.assertEquals(1, len(fieldNamesAndMaxResults))
             levelField, levelMax, levelSorted = fieldNamesAndMaxResults[0]
             if levelField == 'yearAndMonth':
-                return iter([('yearAndMonth', iter([('2008-01',11),('2008-02',2),('2007-12',1)][:levelMax]))])
+                raise StopIteration(iter([('yearAndMonth', iter([('2008-01',11),('2008-02',2),('2007-12',1)][:levelMax]))]))
             else:
-                return iter([('year', iter([('2008',13),('2003',10),('2007',10)][:levelMax]))])
+                raise StopIteration(iter([('year', iter([('2008',13),('2003',10),('2007',10)][:levelMax]))]))
+            yield
         drilldown.drilldown = doDrilldown
         multi.addObserver(drilldown)
 
@@ -138,9 +144,10 @@
             self.assertEquals(1, len(fieldNamesAndMaxResults))
             levelField, levelMax, levelSorted = fieldNamesAndMaxResults[0]
             if levelField == 'yearAndMonth':
-                return iter([('yearAndMonth', iter([('2008-01',11),('2008-02',2),('2007-12',1)][:levelMax]))])
+                raise StopIteration(iter([('yearAndMonth', iter([('2008-01',11),('2008-02',2),('2007-12',1)][:levelMax]))]))
             else:
-                return iter([('year', iter([]))])
+                raise StopIteration(iter([('year', iter([]))]))
+            yield
         drilldown.drilldown = doDrilldown
         multi.addObserver(drilldown)
 
@@ -166,9 +173,10 @@
             self.assertEquals(1, len(fieldNamesAndMaxResults))
             levelField, levelMax, sorted = fieldNamesAndMaxResults[0]
             if levelField == 'yearAndMonth':
-                return iter([('yearAndMonth', iter([]))])
+                raise StopIteration(iter([('yearAndMonth', iter([]))]))
             else:
-                return iter([('year', iter([]))])
+                raise StopIteration(iter([('year', iter([]))]))
+            yield
         drilldown.drilldown = doDrilldown
         multi.addObserver(drilldown)
 
@@ -191,8 +199,8 @@
                 data = sorted(data, cmp=lambda (term0, card0), (term1, card1): cmp(card1, card0))
             if levelMax > 0:
                 data = data[:levelMax]
-            return iter([(levelField, iter(data))])
-
+            raise StopIteration(iter([(levelField, iter(data))]))
+            yield
         drilldown.drilldown = doDrilldown
 
         multi = MultiLevelDrilldown({'date':[('yearAndMonth', 2, False), ('year', 3, True)]})
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/ngram/cqlsuggestertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/ngram/cqlsuggestertest.py
--- version_0/test/ngram/cqlsuggestertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/ngram/cqlsuggestertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -9,7 +9,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -31,12 +31,12 @@
 ## end license ##
 
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from cqlparser import parseString
-from meresco.core import be, Observable
+from meresco.core import Observable
 from meresco.components.cqlsuggester import CqlSuggester
 from meresco.components.ngram import LevenshteinSuggester
-from weightless.core import compose
+from weightless.core import compose, be
 
 class MockNGramQuery(object):
     def __init__(self, results):
@@ -47,11 +47,11 @@
 
 class Interceptor(Observable):
     def suggestionsFor(self, *args, **kwargs):
-        result = yield self.asyncany.suggestionsFor(*args, **kwargs)
+        result = yield self.any.suggestionsFor(*args, **kwargs)
         yield result
 
     def suggestForCql(self, *args, **kwargs):
-        result = yield self.asyncany.suggestForCql(*args, **kwargs)
+        result = yield self.any.suggestForCql(*args, **kwargs)
         yield result
 
 class CqlSuggesterTest(TestCase):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/ngram/cqltermvisitortest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/ngram/cqltermvisitortest.py
--- version_0/test/ngram/cqltermvisitortest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/ngram/cqltermvisitortest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/ngram/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/ngram/__init__.py
--- version_0/test/ngram/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/ngram/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,28 +1,29 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/numeric/converttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/numeric/converttest.py
--- version_0/test/numeric/converttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/numeric/converttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,29 +1,30 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from unittest import TestCase
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/numeric/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/numeric/__init__.py
--- version_0/test/numeric/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/numeric/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/packertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/packertest.py
--- version_0/test/packertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/packertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,39 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 
 from meresco.components.packer import IntStringPacker, IntPacker, StringIntPacker
 
-class PackerTest(CQ2TestCase):
+class PackerTest(SeecrTestCase):
     def assertPacking(self, item):
         packed = self.packer.pack(item)
         result = self.packer.unpack(packed)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/parsecqltest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/parsecqltest.py
--- version_0/test/parsecqltest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/parsecqltest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,43 +1,57 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from meresco.components import ParseCQL
+from meresco.core import Observable
+from weightless.core import compose
 
 class ParseCQLTest(TestCase):
     def testOne(self):
+        def executeQuery(*args, **kwargs):
+            raise StopIteration('retval')
+            yield
         s = ParseCQL()
-        observer = CallTrace('observer')
+        observer = CallTrace('observer', methods={'executeQuery': executeQuery})
         s.addObserver(observer)
+        observable = Observable()
+        observable.addObserver(s)
 
-        s.executeCQLString('term1')
+        composed = compose(observable.any.executeCQLString('term1'))
+        try:
+            composed.next()
+            self.fail('Should not happen')
+        except StopIteration, e:
+            self.assertEquals(('retval',), e.args)
 
-        self.assertEquals(1, len(observer.calledMethods))
+        self.assertEquals(['executeQuery'], [m.name for m in observer.calledMethods])
         self.assertEquals("CQL_QUERY(SCOPED_CLAUSE(SEARCH_CLAUSE(SEARCH_TERM(TERM('term1')))))", str(observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree']))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_performancetests.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/_performancetests.py
--- version_0/test/_performancetests.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/_performancetests.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from os import getuid
 assert getuid() != 0, "Do not run tests as 'root'"
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/performancetests.sh /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/performancetests.sh
--- version_0/test/performancetests.sh	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/performancetests.sh	2012-01-29 19:09:47.000000000 +0100
@@ -1,26 +1,28 @@
 #!/bin/bash
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 export LANG=en_US.UTF-8
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/periodicdownloadtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/periodicdownloadtest.py
--- version_0/test/periodicdownloadtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/periodicdownloadtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,27 @@
 ## begin license ##
 # 
-# "Meresco Oai" are components to build Oai repositories, based on
-# "Meresco Core" and "Meresco Components". 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
 # 
 # Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
-# This file is part of "Meresco Oai"
+# This file is part of "Meresco Components"
 # 
-# "Meresco Oai" is free software; you can redistribute it and/or modify
+# "Meresco Components" is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 # 
-# "Meresco Oai" is distributed in the hope that it will be useful,
+# "Meresco Components" is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 # 
 # You should have received a copy of the GNU General Public License
-# along with "Meresco Oai"; if not, write to the Free Software
+# along with "Meresco Components"; if not, write to the Free Software
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 # 
 ## end license ##
@@ -36,8 +36,9 @@
 from StringIO import StringIO
 from os.path import join
 
-from cq2utils import CQ2TestCase, CallTrace
-from meresco.core import Observable, be
+from seecr.test import SeecrTestCase, CallTrace
+from weightless.core import be
+from meresco.core import Observable
 from meresco.components.http.utils import CRLF
 from meresco.components import PeriodicDownload
 
@@ -67,11 +68,10 @@
     thread.join()
 
 
-class PeriodicDownloadTest(CQ2TestCase):
+class PeriodicDownloadTest(SeecrTestCase):
     def testOne(self):
-        reactor = CallTrace("reactor")
         with server([RESPONSE_ONE_RECORD]) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port)
+            downloader, observer, reactor = self.getDownloader("localhost", port)
             self.assertEquals('addTimer', reactor.calledMethods[0].name)
             self.assertEquals(1, reactor.calledMethods[0].args[0])
             callback = reactor.calledMethods[0].args[1]
@@ -87,27 +87,28 @@
             callback = reactor.calledMethods[3].args[1]
             callback() # sok.recv
             callback() # sok.recv
-            callback() # yield after self.do.add(...
-            self.assertEquals("", harvester._err.getvalue())
+            self.assertEquals("", downloader._err.getvalue())
             self.assertEquals('buildRequest', observer.calledMethods[0].name)
             self.assertEquals('handle', observer.calledMethods[1].name)
             self.assertEquals(0, len(observer.calledMethods[1].args))
             self.assertEquals(['data'], observer.calledMethods[1].kwargs.keys())
             self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
+            callback()
+            self.assertReactorState(reactor)
 
     def testNoConnectionPossible(self):
-        harvester, observer, reactor = self.getHarvester("some.nl", 'no-port')
+        downloader, observer, reactor = self.getDownloader("some.nl", 'no-port')
         callback = reactor.calledMethods[0].args[1]
         try:
             callback() # connect
             self.fail()
         except TypeError, e:
             self.assertEquals("an integer is required", str(e))
+        self.assertReactorState(reactor)
 
     def testErrorResponse(self):
-        reactor = CallTrace("reactor")
         with server(['HTTP/1.0 400 Error\r\n\r\nIllegal Request']) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port)
+            downloader, observer, reactor = self.getDownloader("localhost", port)
             callback = reactor.calledMethods[0].args[1]
             callback() # connect
             callback = reactor.calledMethods[1].args[1]
@@ -118,128 +119,170 @@
 
             callback() # yield After Error 
 
-            self.assertEquals("localhost:%d: Unexpected response: HTTP/1.0 400 Error\n" % port, harvester._err.getvalue())
+            self.assertEquals("localhost:%d: Unexpected response: HTTP/1.0 400 Error\n" % port, downloader._err.getvalue())
             self.assertEquals(['buildRequest'], [m.name for m in observer.calledMethods])
+            self.assertReactorState(reactor)
 
     def testInvalidPortConnectionRefused(self):
-        harvester, observer, reactor = self.getHarvester("localhost", 88)
+        downloader, observer, reactor = self.getDownloader("localhost", 88)
         callback = reactor.calledMethods[0].args[1]
-        callback() # connect
+        callback() # startProcess
         self.assertEquals("addWriter", reactor.calledMethods[1].name)
-        callback() # connect
+        callback = reactor.calledMethods[1].args[1]
+        callback() # _processOne.next
         self.assertEquals("removeWriter", reactor.calledMethods[2].name)
         self.assertEquals("addTimer", reactor.calledMethods[3].name)
-        self.assertEquals("localhost:88: Connection refused.\n", harvester._err.getvalue())
+        self.assertEquals("localhost:88: Connection refused.\n", downloader._err.getvalue())
+        self.assertReactorState(reactor)
 
     def testInvalidHost(self):
         strangeHost = "UEYR^$*FD(#>NDJ.khfd9.(*njnd.nl"
-        harvester, observer, reactor = self.getHarvester(strangeHost, 88)
+        downloader, observer, reactor = self.getDownloader(strangeHost, 88)
         callback = reactor.calledMethods[0].args[1]
         callback() # connect
         self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-        nameOrServiceNotKnown = strangeHost + ":88: -2: Name or service not known\n" ==  harvester._err.getvalue()
-        noAddressAssociatedWithHost = strangeHost + ":88: -5: No address associated with hostname\n" == harvester._err.getvalue()
-        self.assertTrue(nameOrServiceNotKnown or noAddressAssociatedWithHost, harvester._err.getvalue())
+        nameOrServiceNotKnown = strangeHost + ":88: -2: Name or service not known\n" ==  downloader._err.getvalue()
+        noAddressAssociatedWithHost = strangeHost + ":88: -5: No address associated with hostname\n" == downloader._err.getvalue()
+        self.assertTrue(nameOrServiceNotKnown or noAddressAssociatedWithHost, downloader._err.getvalue())
+        self.assertReactorState(reactor)
 
     def testInvalidHostConnectionRefused(self):
-        harvester, observer, reactor = self.getHarvester("127.0.0.255", 9876)
+        downloader, observer, reactor = self.getDownloader("127.0.0.255", 9876)
         callback = reactor.calledMethods[0].args[1]
-        callback()
+        callback() # startProcess
         self.assertEquals("addWriter", reactor.calledMethods[1].name)
-        callback()
-        self.assertEquals("127.0.0.255:9876: Connection refused.\n", harvester._err.getvalue())
+        callback = reactor.calledMethods[1].args[1]
+        callback() # _processOne.next
+        self.assertEquals("127.0.0.255:9876: Connection refused.\n", downloader._err.getvalue())
         self.assertEquals("removeWriter", reactor.calledMethods[2].name)
         self.assertEquals("addTimer", reactor.calledMethods[3].name)
+        self.assertReactorState(reactor)
 
     def testSuccess(self):
         with server([RESPONSE_TWO_RECORDS]) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port)
-            self.assertEquals(1, harvester._period)
-            callback = self.doConnect()
-            callback() # HTTP GET
-            sleep(0.01)
-            callback = reactor.calledMethods[3].args[1]
-            callback() # sok.recv
-            callback() # recv = ''
-            callback() # yield after addReader()
-            callback() # yield after self.do.add(...
-            self.assertEquals("", harvester._err.getvalue())
+            downloader, observer, reactor = self.getDownloader("localhost", port)
+            self.assertEquals(1, downloader._period)
+            callback = self.doConnect() # _processOne.next
+            callback() # _processOne.next -> HTTP GET
             self.assertEquals('buildRequest', observer.calledMethods[0].name)
+            sleep(0.01)
+            callback() # _processOne.next -> sok.recv
+            callback() # _processOne.next -> recv = ''
+            self.assertEquals("", downloader._err.getvalue())
             self.assertEquals('handle', observer.calledMethods[1].name)
             self.assertEqualsWS(TWO_RECORDS, observer.calledMethods[1].kwargs['data'])
-            self.assertEquals('removeReader', reactor.calledMethods[-2].name)
+            self.assertEquals('addProcess', reactor.calledMethods[-1].name)
+            callback() # _processOne.next
+            self.assertEquals('removeProcess', reactor.calledMethods[-2].name)
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
+            self.assertReactorState(reactor)
 
     def testSuccessHttp1dot1Server(self):
         with server([STATUSLINE_ALTERNATIVE + ONE_RECORD]) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port)
+            downloader, observer, reactor = self.getDownloader("localhost", port)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
             callback = reactor.calledMethods[3].args[1]
             callback() # sok.recv
             callback() # recv = ''
-            callback() # yield after addReader()
-            callback() # yield after self.do.add(...
-            self.assertEquals("", harvester._err.getvalue())
+            self.assertEquals("", downloader._err.getvalue())
             self.assertEquals('buildRequest', observer.calledMethods[0].name)
             self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
+            callback()
+            self.assertReactorState(reactor)
 
     def testPeriod(self):
         with server([RESPONSE_TWO_RECORDS, 'HTTP/1.0 400 Error\r\n\r\nIllegal Request']) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port, period=2)
+            downloader, observer, reactor = self.getDownloader("localhost", port, period=2)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
-            callback = reactor.calledMethods[3].args[1]
-            callback() # sok.recv
-            callback() # recv = ''
-            callback() # yield after addReader()
-            callback() # yield after self.do.add(...
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # _processOne.next -> sok.recv
+            callback() # _processOne.next -> recv = ''
+            callback() # _processOne.next
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
             self.assertEquals(2, reactor.calledMethods[-1].args[0])
             
-            callback = self.doConnect()
-            callback() # HTTP GET
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # startProcess
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # _processOne.next -> HTTP GET
             sleep(0.01)
-            callback() # sok.recv
-            callback() # recv = ''
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # _processOne.next -> sok.recv
+            callback() # _processOne.next -> recv = ''
+            # error status
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
             self.assertEquals(2, reactor.calledMethods[-1].args[0])
+            self.assertReactorState(reactor)
 
     def testRecoveringAfterDroppedConnection(self):
         with server([DROP_CONNECTION, RESPONSE_ONE_RECORD]) as (port, msgs):
-            harvester, observer, reactor = self.getHarvester("localhost", port)
+            downloader, observer, reactor = self.getDownloader("localhost", port)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
-            callback = reactor.calledMethods[3].args[1]
-            callback() # sok.recv = ''
-            self.assertEquals("localhost:%s: Receive error: 11: Resource temporarily unavailable\n" % port, harvester._err.getvalue()) 
-            callback()
-            callback() # HTTP GET
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # _processOne.next -> sok.recv
+            self.assertEquals("localhost:%s: Receive error: 11: Resource temporarily unavailable\n" % port, downloader._err.getvalue()) 
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # startProcess
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # _processOne.next -> HTTP GET
             sleep(0.01)
             self.assertEquals("GET /path?argument=value HTTP/1.0\r\n\r\n", msgs[0])
-            callback() # sok.recv
-            callback() # soc.recv == ''
-            callback() # removeReader() after self.do.add(...
+            callback() # _processOne.next -> sok.recv
+            callback() # _processOne.next -> recv = ''
             self.assertEquals(['buildRequest', 'buildRequest', 'handle'], [m.name for m in observer.calledMethods])
+            callback()
+            self.assertReactorState(reactor)
 
-    def getHarvester(self, host, port, period=1):
+    def testDriver(self):
+        with server([RESPONSE_ONE_RECORD]) as (port, msgs):
+            downloader, observer, reactor = self.getDownloader("localhost", port)
+            self.assertEquals(1, reactor.calledMethods[0].args[0])
+            callback = reactor.calledMethods[0].args[1]
+            callback() # connect
+            callback = reactor.calledMethods[1].args[1]
+            callback() # HTTP GET
+            sleep(0.01)
+            callback = reactor.calledMethods[3].args[1]
+            callback() # sok.recv
+            callback() # sok.recv
+            self.assertEquals('addProcess', reactor.calledMethods[5].name)
+            process = reactor.calledMethods[5].args[0]
+            try:
+                while True:
+                    process()
+            except StopIteration:
+                pass
+            self.assertEquals('removeProcess', reactor.calledMethods[6].name)
+            self.assertReactorState(reactor)
+             
+    def getDownloader(self, host, port, period=1):
         self._reactor = CallTrace("reactor")
-        self._harvester = PeriodicDownload(self._reactor, host, port, period=period, prio=0, err=StringIO())
-        self._observer = CallTrace("observer")
+        self._downloader = PeriodicDownload(self._reactor, host, port, period=period, prio=0, err=StringIO())
+        self._observer = CallTrace("observer", methods={'handle': lambda data: (x for x in 'X')})
         self._observer.returnValues["buildRequest"] = "GET /path?argument=value HTTP/1.0\r\n\r\n"
-        self._harvester.addObserver(self._observer)
-        self._harvester.observer_init()
-        self.assertEquals(1, self._reactor.calledMethods[0].args[0])
-        return self._harvester, self._observer, self._reactor
+        self._downloader.addObserver(self._observer)
+        self._downloader.observer_init()
+        self.assertEquals(period, self._reactor.calledMethods[0].args[0])
+        return self._downloader, self._observer, self._reactor
 
     def doConnect(self):
         callback = self._reactor.calledMethods[0].args[1]
-        callback() # connect
+        callback() # startProcess -> tryConnect
         callback = self._reactor.calledMethods[1].args[1]
-        return callback
+        return callback # _processOne.next
+
+    def assertReactorState(self, reactor):
+        names = [m.name for m in reactor.calledMethods]
+        for what in ['Writer', 'Reader', 'Process']: 
+            self.assertEquals(len([n for n in names if n == 'add%s' % what]),
+                len([n for n in names if n == 'remove%s' % what]), 
+                'Expected same amount of add and remove for %s' % what)
 
 HTTP_SEPARATOR = 2 * CRLF
 STATUSLINE = """HTTP/1.0 200 OK """ + HTTP_SEPARATOR
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/persistentsortedintegerlisttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/persistentsortedintegerlisttest.py
--- version_0/test/persistentsortedintegerlisttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/persistentsortedintegerlisttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,37 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from __future__ import with_statement
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 from os import rename, remove, listdir
 from os.path import join, isfile
 from bisect import bisect_left, bisect_right
@@ -43,9 +44,9 @@
 
 class FullStopException(Exception): pass
 
-class PersistentSortedIntegerListTest(CQ2TestCase):
+class PersistentSortedIntegerListTest(SeecrTestCase):
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.filepath = join(self.tempdir, 'list')
 
     def testAppendAndWrite(self):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/reindexconsoletest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/reindexconsoletest.py
--- version_0/test/reindexconsoletest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/reindexconsoletest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,38 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.components import ReindexConsole
-from meresco.core import be, Observable
+from meresco.core import Observable
+from weightless.core import be
 
-class ReindexConsoleTest(CQ2TestCase):
+class ReindexConsoleTest(SeecrTestCase):
 
     def testArguments(self):
         observer = CallTrace('observer')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/reindextest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/reindextest.py
--- version_0/test/reindextest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/reindextest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,55 +1,59 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.components import StorageComponent, Reindex, FilterMessages
-from meresco.core import be, Observable
+from meresco.core import Observable, asyncnoreturnvalue
 from lxml.etree import tostring
 from escaping import unescapeFilename, escapeFilename
 
 from os.path import join, isdir
 from os import listdir
-from weightless.core import compose
+from weightless.core import compose, be
 
-class ReindexTest(CQ2TestCase):
+class ReindexTest(SeecrTestCase):
     def _path(self, subdir):
         return join(self.tempdir, subdir)
 
     def setupStorage(self, records):
         storage = StorageComponent(self._path('storage'))
         for record in records:
-            storage.add(**record)
+            list(compose(storage.add(**record)))
         return storage
 
     def setupDna(self, storage):
-        observer = CallTrace('observer')
+        @asyncnoreturnvalue
+        def add(**kwargs):
+            pass
+        observer = CallTrace('observer', methods={'add': add})
         reindex = be(
             (Reindex(filelistPath=self._path('reindex'), partName='part'),
                 (FilterMessages(allowed=['listIdentifiers']),
@@ -135,7 +139,7 @@
         for i in ['+id:1\n', '+id:2\n', '+id:3\n' ]:
             self.assertTrue(i in result)
 
-        self.assertEquals(['addDocumentPart']*3, [m.name for m in observer.calledMethods])
+        self.assertEquals(['add']*3, [m.name for m in observer.calledMethods])
         self.assertEquals(['id:1','id:2','id:3'], sorted([m.kwargs['identifier'] for m in observer.calledMethods]))
         self.assertEquals(['ignoredName']*3, [m.kwargs['partname'] for m in observer.calledMethods])
         self.assertEquals(['<empty/>']*3, [tostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
@@ -179,7 +183,7 @@
             dict(identifier='id:1', partname='part',  data='data1'),
         ])
         reindex, observer = self.setupDna(storage)
-        observer.exceptions['addDocumentPart'] = Exception('An Error Occured')
+        observer.exceptions['add'] = Exception('An Error Occured')
         result = list(compose(reindex.handleRequest(arguments={'session': ['testcase']})))
 
         self.assertEquals(['HTTP/1.0 200 OK\r\nContent-Type: plain/text\r\n\r\n', '#', '\n=batches: 1'], result)
@@ -200,7 +204,7 @@
             dict(identifier='id:1', partname='part', data='data1'),
         ])
         reindex, observer = self.setupDna(storage)
-        observer.returnValues['addDocumentPart'] = (f for f in [str])
+        observer.returnValues['add'] = (f for f in [str])
         result = list(compose(reindex.handleRequest(arguments={'session': ['testcase']})))
         result = list(compose(reindex.handleRequest(arguments={'session': ['testcase']})))
         self.assertTrue(str in result, result)
@@ -217,7 +221,7 @@
         result = list(compose(reindex.handleRequest(arguments={'session': ['testcase']})))
         self.assertEquals(['HTTP/1.0 200 OK\r\nContent-Type: plain/text\r\n\r\n', '+%s\n' % escapeFilename(identifier), '=batches left: 0'], result)
 
-        self.assertEquals(['addDocumentPart'], [m.name for m in observer.calledMethods])
+        self.assertEquals(['add'], [m.name for m in observer.calledMethods])
         self.assertEquals([identifier], [m.kwargs['identifier'] for m in observer.calledMethods])
         self.assertEquals(['ignoredName'], [m.kwargs['partname'] for m in observer.calledMethods])
         self.assertEquals(['<empty/>'], [tostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/renamecqlindextest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/renamecqlindextest.py
--- version_0/test/renamecqlindextest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/renamecqlindextest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,37 +1,38 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 
 from meresco.components import RenameCqlIndex
 from cqlparser import parseString
 
-class RenameCqlIndexTest(CQ2TestCase):
+class RenameCqlIndexTest(SeecrTestCase):
     def testConvert(self):
         rename = RenameCqlIndex(lambda name: 'other'+name)
         self.assertEquals(parseString('otherfield = value'), rename(parseString('field = value')))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/renamefieldforexacttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/renamefieldforexacttest.py
--- version_0/test/renamefieldforexacttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/renamefieldforexacttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -5,7 +5,7 @@
 # 
 # Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/requestscopetest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/requestscopetest.py
--- version_0/test/requestscopetest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/requestscopetest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,39 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 from meresco.core import Observable
 from meresco.components import RequestScope
 
-class RequestScopeTest(CQ2TestCase):
+from weightless.core import compose
+
+class RequestScopeTest(SeecrTestCase):
     def testEverythingIsPassed(self):
         usedArgsKwargs=[]
         class MyObserver(Observable):
@@ -40,7 +43,7 @@
         r = RequestScope()
         r.addObserver(MyObserver())
 
-        result = list(r.handleRequest("an arg", RequestURI='http://www.example.org/path'))
+        result = list(compose(r.handleRequest("an arg", RequestURI='http://www.example.org/path')))
 
         self.assertEquals(['result'], result)
         self.assertEquals([(("an arg",), dict(RequestURI='http://www.example.org/path'))], usedArgsKwargs)
@@ -49,7 +52,7 @@
         class MyObserver(Observable):
             def handleRequest(self, *args, **kwargs):
                 self.do.setArg()
-                yield self.any.getArg()
+                yield self.call.getArg()
         class SetArgObserver(Observable):
             def setArg(self):
                 self.ctx.requestScope["arg"] = "value"
@@ -63,7 +66,7 @@
         myObserver.addObserver(GetArgObserver())
         r.addObserver(myObserver)
 
-        result = list(r.handleRequest("a request"))
+        result = list(compose(r.handleRequest("a request")))
 
         self.assertEquals(['value'], result)
 
@@ -71,7 +74,7 @@
         class MyObserver(Observable):
             def handleRequest(self, key, value, *args, **kwargs):
                 self.do.setArg(key, value)
-                yield self.any.getArg()
+                yield self.call.getArg()
         class SetArgObserver(Observable):
             def setArg(self, key, value):
                 self.ctx.requestScope[key] = value
@@ -85,8 +88,8 @@
         myObserver.addObserver(GetArgObserver())
         r.addObserver(myObserver)
 
-        result0 = list(r.handleRequest("key0", "value0"))
-        result1 = list(r.handleRequest("key1", "value1"))
+        result0 = list(compose(r.handleRequest("key0", "value0")))
+        result1 = list(compose(r.handleRequest("key1", "value1")))
 
         self.assertEquals(['key0=value0'], result0)
         self.assertEquals(['key1=value1'], result1)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/rewritepartnametest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/rewritepartnametest.py
--- version_0/test/rewritepartnametest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/rewritepartnametest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,48 +1,52 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 from unittest import TestCase
-from meresco.core import Observable
+from meresco.core import Observable, asyncnoreturnvalue
 
 from meresco.components import RewritePartname
+from weightless.core import compose
 
 class RewritePartnameTest(TestCase):
     def testAddPartname(self):
+        @asyncnoreturnvalue
+        def add(**kwargs):
+            pass
         observable = Observable()
-        observer = CallTrace('observer')
-        callable = lambda: 42
-        observer.returnValues['add'] = callable
+        observer = CallTrace('observer', methods={'add': add})
         rewrite = RewritePartname('newPartname')
         rewrite.addObserver(observer)
         observable.addObserver(rewrite)
 
-        result = list(observable.all.add(identifier='identifier', partname='oldPartname', data='data'))
+        result = list(compose(observable.all.add(identifier='identifier', partname='oldPartname', data='data')))
 
         self.assertEquals(['add'], [m.name for m in observer.calledMethods])
         self.assertEquals({'identifier': 'identifier', 'partname': 'newPartname', 'data': 'data'}, observer.calledMethods[0].kwargs)
-        self.assertEquals([callable], result)
-        
+        self.assertEquals([], result)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/rssitemtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/rssitemtest.py
--- version_0/test/rssitemtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/rssitemtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,32 +1,34 @@
 # coding: utf-8
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase as TestCase
+
+from seecr.test import SeecrTestCase as TestCase
 
 from meresco.components.rssitem import RssItem
 from StringIO import StringIO
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/rsstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/rsstest.py
--- version_0/test/rsstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/rsstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -28,14 +28,15 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
-from utils import asyncreturn
+from seecr.test import SeecrTestCase, CallTrace
 from amara.binderytools import bind_string
 from urllib import urlencode
 
 from meresco.components.facetindex import Response
 from meresco.components.rss import Rss
 
+from weightless.core import compose
+
 from cqlparser import parseString as parseCql
 
 RSS_HEAD = """HTTP/1.0 200 OK
@@ -54,12 +55,15 @@
 %s
 """
 
-class RssTest(CQ2TestCase):
+class RssTest(SeecrTestCase):
 
     def testNoResults(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
 
         rss = Rss(
             title = 'Test title',
@@ -70,16 +74,19 @@
         )
         rss.addObserver(observer)
 
-        result = "".join(list(rss.handleRequest(RequestURI='/?query=aQuery')))
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=aQuery')))
         self.assertEqualsWS(RSS % '', result)
 
     def testOneResult(self):
         observer = CallTrace(
-            methods={
-                'getRecord': lambda recordId: (g for g in ['<item><title>Test Title</title><link>Test Identifier</link><description>Test Description</description></item>']),
+            returnValues={
+                'getRecord': '<item><title>Test Title</title><link>Test Identifier</link><description>Test Description</description></item>',
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=1, hits=[1]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=1, hits=[1]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
 
         rss = Rss(
             title = 'Test title',
@@ -90,7 +97,7 @@
         )
         rss.addObserver(observer)
 
-        result = "".join(list(rss.handleRequest(RequestURI='/?query=aQuery')))
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=aQuery')))
         self.assertEqualsWS(RSS % """<item>
         <title>Test Title</title>
         <link>Test Identifier</link>
@@ -100,14 +107,17 @@
     def testError(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         rss = Rss(
             title = 'Test title',
             description = 'Test description',
             link = 'http://www.example.org',
         )
         rss.addObserver(observer)
-        result = "".join(list(rss.handleRequest(RequestURI='/?query=aQuery%29'))) #%29 == ')'
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=aQuery%29'))) #%29 == ')'
 
         xml = bind_string(result[result.index("<?xml"):])
         self.assertEquals('Test title', str(xml.rss.channel.title))
@@ -119,7 +129,7 @@
             description = 'Test description',
             link = 'http://www.example.org',
         )
-        result = "".join(list(rss.handleRequest(RequestURI='/')))
+        result = "".join(compose(rss.handleRequest(RequestURI='/')))
 
         xml = bind_string(result[result.index("<?xml"):])
         self.assertEquals('ERROR Test title', str(xml.rss.channel.title))
@@ -134,22 +144,23 @@
             **rssArgs
         )
         recordIds = []
-        def getRecord(recordId):
-            recordIds.append(recordId)
+        def getRecord(identifier):
+            recordIds.append(identifier)
             return '<item/>'
 
         def executeQuery(start, stop, *args, **kwargs):
             response = Response(total=50, hits=range(start, stop))
             raise StopIteration(response)
+            yield
         observer = CallTrace(
             methods={
                 'executeQuery': executeQuery,
                 'getRecord': getRecord,
             },
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+            ignoredAttributes=['extraResponseData', 'echoedExtraRequestData'])
         rss.addObserver(observer)
 
-        result = "".join(list(rss.handleRequest(RequestURI='/?query=aQuery&' + urlencode(sruArgs))))
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=aQuery&' + urlencode(sruArgs))))
 
         method = observer.calledMethods[0]
         self.assertEquals('executeQuery', method.name)
@@ -170,7 +181,7 @@
     def testContentType(self):
         observer = CallTrace(
             returnValues={'executeQuery': (0, [])},
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+            ignoredAttributes=['extraResponseData', 'echoedExtraRequestData'])
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
@@ -180,47 +191,74 @@
     def testWebQueryUsage(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
-        result = "".join(rss.handleRequest(RequestURI='/?query=one+two'))
-        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=one+two')))
+        self.assertEquals(['executeQuery'], [m.name for m in observer.calledMethods])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortDescending'])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortBy'])
+        self.assertEquals(0, observer.calledMethods[0].kwargs['start'])
+        self.assertEquals(10, observer.calledMethods[0].kwargs['stop'])
 
     def testAntiUnaryClauseIsPassedToWebQuery(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         rss = Rss(title='Title', description='Description', link='Link', antiUnaryClause='antiunary')
         rss.addObserver(observer)
 
-        result = "".join(rss.handleRequest(RequestURI='/?query=not+fiets'))
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=not+fiets')))
         
-        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertEquals(['executeQuery'], [m.name for m in observer.calledMethods])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortDescending'])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortBy'])
+        self.assertEquals(0, observer.calledMethods[0].kwargs['start'])
+        self.assertEquals(10, observer.calledMethods[0].kwargs['stop'])
         self.assertCql(parseCql("antiunary NOT fiets"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
     def testEmptyQueryWithAntiUnaryClauseIsPassedToWebQuery(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         rss = Rss(title='Title', description='Description', link='Link', antiUnaryClause='antiunary')
         rss.addObserver(observer)
 
-        result = asyncreturn(rss.handleRequest, RequestURI='/?query=')
+        result = ''.join(compose(rss.handleRequest(RequestURI='/?query=')))
         
-        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertEquals(['executeQuery'], [m.name for m in observer.calledMethods])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortDescending'])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortBy'])
+        self.assertEquals(0, observer.calledMethods[0].kwargs['start'])
+        self.assertEquals(10, observer.calledMethods[0].kwargs['stop'])
         self.assertCql(parseCql("antiunary"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
     def testWebQueryUsesFilters(self):
         observer = CallTrace(
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=0, hits=[]))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
-        result = "".join(rss.handleRequest(RequestURI='/?query=one+two&filter=field1:value1&filter=field2:value2'))
-        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
-
+        result = "".join(compose(rss.handleRequest(RequestURI='/?query=one+two&filter=field1:value1&filter=field2:value2')))
+        self.assertEquals(['executeQuery'], [m.name for m in observer.calledMethods])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortDescending'])
+        self.assertEquals(None, observer.calledMethods[0].kwargs['sortBy'])
+        self.assertEquals(0, observer.calledMethods[0].kwargs['start'])
+        self.assertEquals(10, observer.calledMethods[0].kwargs['stop'])
         self.assertCql(parseCql("(one AND two) AND field1 exact value1 AND field2 exact value2"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
     def testWebQueryIgnoresWrongFilters(self):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sitecustomize.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sitecustomize.py
--- version_0/test/sitecustomize.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sitecustomize.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,25 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from sys import setdefaultencoding
 setdefaultencoding('utf-8')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sorteditertoolstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sorteditertoolstest.py
--- version_0/test/sorteditertoolstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sorteditertoolstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,31 +1,33 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase, main
 
 from meresco.components.sorteditertools import PeekIterator, OrIterator, AndIterator
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/__init__.py
--- version_0/test/sru/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/srufielddrilldowntest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/srufielddrilldowntest.py
--- version_0/test/sru/srufielddrilldowntest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/srufielddrilldowntest.py	2012-01-29 19:09:47.000000000 +0100
@@ -8,7 +8,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -28,20 +28,19 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
-from utils import asyncreturn
+from seecr.test import SeecrTestCase, CallTrace
 
 from StringIO import StringIO
 
-from meresco.core import be, decorateWith
+from meresco.core import decorateWith
 from meresco.components.facetindex import Response
 from meresco.components.drilldown import SRUFieldDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 
-from weightless.core import compose
+from weightless.core import compose, be
 
 from cqlparser import parseString, cql2string
 
-class SRUFieldDrilldownTest(CQ2TestCase):
+class SRUFieldDrilldownTest(SeecrTestCase):
 
     def testSRUParamsAndXMLOutput(self):
         firstCall = []
@@ -51,6 +50,7 @@
                 raise StopIteration(Response(total=5, hits=range(5)))
             else:
                 raise StopIteration(Response(total=10, hits=range(10)))
+            yield
         sruFieldDrilldown = SRUFieldDrilldown()
         observer = CallTrace("observer")
         sruFieldDrilldown.addObserver(observer)
@@ -69,9 +69,15 @@
     def testDrilldown(self):
         adapter = SRUFieldDrilldown()
         observer = CallTrace("Observer")
-        observer.exceptions["executeQuery"] = StopIteration(Response(total=16, hits=range(16)))
+        def executeQuery(**kwargs):
+            raise StopIteration(Response(total=16, hits=range(16)))
+            yield
+        observer.methods['executeQuery'] = executeQuery
         adapter.addObserver(observer)
-        result = asyncreturn(adapter.drilldown, 'original', 'term', ['field0', 'field1'])
+        def dd():
+            result = yield adapter.drilldown('original', 'term', ['field0', 'field1'])
+            yield result
+        result = compose(dd()).next()
         self.assertEquals(2, len(observer.calledMethods))
         self.assertEquals("executeQuery(cqlAbstractSyntaxTree=<class CQL_QUERY>)", str(observer.calledMethods[0]))
         self.assertEquals(parseString("(original) and field0=term"),  observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/sruhandlertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/sruhandlertest.py
--- version_0/test/sru/sruhandlertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/sruhandlertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -8,7 +8,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -29,27 +29,29 @@
 # 
 ## end license ##
 
-from meresco.components.sru.sruparser import MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, UNSUPPORTED_VERSION, UNSUPPORTED_OPERATION, UNSUPPORTED_PARAMETER_VALUE, QUERY_FEATURE_UNSUPPORTED, SruException
+from os.path import join
+from StringIO import StringIO
+import traceback
+from lxml.etree import parse
+from xml.sax.saxutils import quoteattr, escape as xmlEscape
+
+from weightless.core import compose
 
+from cqlparser import parseString
+
+from meresco.components.sru.sruparser import MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, UNSUPPORTED_VERSION, UNSUPPORTED_OPERATION, UNSUPPORTED_PARAMETER_VALUE, QUERY_FEATURE_UNSUPPORTED, SruException
 from meresco.components.sru import SruHandler, SruParser
 from meresco.components.drilldown import SRUTermDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
 from meresco.components.xml_generic.validate import assertValid
 from meresco.components.xml_generic import schemasPath
 from meresco.components.facetindex import Response
 
-from os.path import join
+from seecr.test import SeecrTestCase, CallTrace
 
 
-from StringIO import StringIO
-from cq2utils import CQ2TestCase, CallTrace
-from cqlparser import parseString
-import traceback
-
-from weightless.core import compose
-
 SUCCESS = "SUCCESS"
 
-class SruHandlerTest(CQ2TestCase):
+class SruHandlerTest(SeecrTestCase):
 
     def testEchoedSearchRetrieveRequest(self):
         arguments = {'version':'1.1', 'operation':'searchRetrieve', 'query':'query >= 3', 'recordSchema':'schema', 'recordPacking':'string'}
@@ -78,7 +80,8 @@
 
     def testEchoedSearchRetrieveRequestWithExtraRequestData(self):
         arguments = {'version':'1.1', 'operation':'searchRetrieve', 'query':'query >= 3', 'recordSchema':'schema', 'recordPacking':'string', 'x_term_drilldown':['field0,field1']}
-        observer = CallTrace('ExtraRequestData', returnValues={'echoedExtraRequestData': '<some>extra request data</some>'})
+        observer = CallTrace('ExtraRequestData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in '<some>extra request data</some>')
         component = SruHandler()
         component.addObserver(SRUTermDrilldown())
         component.addObserver(observer)
@@ -141,75 +144,41 @@
         result = "".join(sruHandler._writeExtraResponseData(drilldownData=drilldownData, **arguments))
         self.assertEqualsWS("""<srw:extraResponseData><dd:drilldown\n    xmlns:dd="http://meresco.org/namespace/drilldown"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/drilldown-20070730.xsd"><dd:term-drilldown><dd:navigator name="field0"><dd:item count="14">value0_0</dd:item></dd:navigator><dd:navigator name="field1"><dd:item count="13">value1_0</dd:item><dd:item count="11">value1_1</dd:item></dd:navigator><dd:navigator name="field2"><dd:item count="3">value2_0</dd:item><dd:item count="2">value2_1</dd:item><dd:item count="1">value2_2</dd:item></dd:navigator></dd:term-drilldown></dd:drilldown></srw:extraResponseData>""" , result)
 
-    def testMerescoLuceneDrilldown(self):
-        observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
-        drilldownData = iter([
-            ('field0', iter([('value0_0', 14)])),
-            ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
-            ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))]) 
-        observer.exceptions['executeQuery'] = StopIteration(response)
-        observer.exceptions['drilldown'] = StopIteration(drilldownData)
-        observer.returnValues['docsetFromQuery'] = "cqltree"
-        observer.returnValues['yieldRecord'] = "record"
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
-
-        component = SruHandler()
-        component.addObserver(observer)
-
-        result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
-        self.assertEquals(['executeQuery', 'docsetFromQuery', 'drilldown'], [m.name for m in observer.calledMethods][:3])
-        self.assertEquals('cqltree', observer.calledMethods[2].kwargs['docset'])
-        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[2].kwargs['fieldnamesAndMaximums']))
-
     def testDrilldownResultInExecuteQuery(self):
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
+        response = Response(total=100, hits=hitsRange(11, 26))
         drilldownData = iter([
             ('field0', iter([('value0_0', 14)])),
             ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
             ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))]) 
         response.drilldownData = drilldownData
-        observer.exceptions['executeQuery'] = StopIteration(response)
-        observer.returnValues['yieldRecord'] = "record"
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
+        observer.methods['yieldRecord'] = lambda *a, **kw: (x for x in 'record')
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
 
         component = SruHandler()
         component.addObserver(observer)
 
         result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
-        self.assertEquals(['executeQuery', 'yieldRecord'], [m.name for m in observer.calledMethods][:2])
+        self.assertEquals(['executeQuery'] + ['yieldRecord'] * 15 +     ['echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
         self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[0].kwargs['fieldnamesAndMaximums']))
-
-    def testDrilldownCallRaisesAnError(self):
-        observer = CallTrace()
-        def mockDrilldown(*args, **kwargs):
-            raise Exception("Some Exception")
-            yield "Some thing"
-        observer.methods["drilldown"] = mockDrilldown
-        response = Response(total=100, hits=range(11, 26))
-        observer.exceptions['executeQuery'] = StopIteration(response)
-        sruHandler = SruHandler()
-        sruHandler.addObserver(observer)
-        result = "".join(compose(sruHandler.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
-
-        expected = """<srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
-<srw:version>1.1</srw:version><srw:numberOfRecords>0</srw:numberOfRecords><srw:diagnostics><diagnostic xmlns="http://www.loc.gov/zing/srw/diagnostic/">
-<uri>info://srw/diagnostics/1/48</uri>
-<details>Query Feature Unsupported</details>
-<message>Some Exception</message>
-</diagnostic></srw:diagnostics></srw:searchRetrieveResponse>"""
-        self.assertEqualsWS(expected, result)
+        extraResponseDataMethod = observer.calledMethods[-1]
+        self.assertEquals(response, extraResponseDataMethod.kwargs['response'])
 
     def testNextRecordPosition(self):
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
-        observer.exceptions['executeQuery'] = StopIteration(response)
-        observer.returnValues['yieldRecord'] = "record"
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+        response = Response(total=100, hits=hitsRange(11, 26))
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
+        observer.returnValues['yieldRecord'] = lambda *a, **kw: (x for x in "record")
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
 
         component = SruHandler()
         component.addObserver(observer)
@@ -225,17 +194,20 @@
         arguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 13))
-        observer.exceptions['executeQuery'] = StopIteration(response)
+        response = Response(total=100, hits=hitsRange(11, 13))
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
             yieldRecordCalls.append(1)
-            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (identifier, partname)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (xmlEscape(identifier), partname)
         observer.yieldRecord = yieldRecord
 
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
 
         component = SruHandler()
         component.addObserver(observer)
@@ -314,17 +286,20 @@
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore'], 'x_extra_key': 'extraValue'}
 
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 13))
-        observer.exceptions['executeQuery'] = StopIteration(response)
+        response = Response(total=100, hits=['<aap&noot>', 'vuur'])
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
             yieldRecordCalls.append(1)
-            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (identifier, partname)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (xmlEscape(identifier), partname)
         observer.yieldRecord = yieldRecord
 
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
 
         component = SruHandler()
         component.addObserver(observer)
@@ -341,6 +316,10 @@
 
         self.assertEquals(6, sum(yieldRecordCalls))
 
+        resultXml = parse(StringIO(result))
+        ids = resultXml.xpath('//srw:recordIdentifier/text()', namespaces={'srw':"http://www.loc.gov/zing/srw/"})
+        self.assertEquals(['<aap&noot>', 'vuur'], ids)
+
         self.assertEqualsWS("""
 <srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
     <srw:version>1.2</srw:version>
@@ -349,23 +328,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>11</srw:recordIdentifier>
+            <srw:recordIdentifier>&lt;aap&amp;noot&gt;</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>11-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -373,23 +352,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>12</srw:recordIdentifier>
+            <srw:recordIdentifier>vuur</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>12-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>vuur-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -414,14 +393,17 @@
         self.assertEquals((), echoedExtraRequestDataMethod.args)
         self.assertEquals(set(['version', 'x_term_drilldown', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'x_extra_key']), set(echoedExtraRequestDataMethod.kwargs.keys()))
         self.assertEquals((), extraResponseDataMethod.args)
-        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'drilldownData', 'x_extra_key']), set(extraResponseDataMethod.kwargs.keys()))
+        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'response', 'drilldownData', 'x_extra_key']), set(extraResponseDataMethod.kwargs.keys()))
  
     def testExtraRecordDataOldStyle(self):
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        response = Response(total=100, hits=[11])
-        observer.exceptions['executeQuery'] = StopIteration(response)
+        response = Response(total=100, hits=['11'])
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
@@ -429,8 +411,8 @@
             yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (identifier, partname)
         observer.yieldRecord = yieldRecord
 
-        observer.returnValues['extraResponseData'] = 'extraResponseData'
-        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
         component = SruHandler(extraRecordDataNewStyle=False)
         component.addObserver(observer)
 
@@ -498,10 +480,13 @@
         observer = CallTrace('observer')
         sruHandler.addObserver(observer)
         response = Response(total=2, hits=['id0', 'id1'])
-        observer.exceptions['executeQuery'] = StopIteration(response)
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
         observer.returnValues['echoedExtraRequestData'] = (f for f in [])
         observer.returnValues['extraResponseData'] = (f for f in [])
-        observer.methods['yieldRecord'] = lambda *args, **kwargs: '<bike/>'
+        observer.methods['yieldRecord'] = lambda *args, **kwargs: (x for x in '<bike/>')
 
         result = ''.join(compose(component.handleRequest(arguments={'version':['1.1'], 'query': ['aQuery'], 'operation':['searchRetrieve']})))
         header, body = result.split('\r\n'*2)
@@ -513,3 +498,5 @@
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('diagnostic' in body, body)
 
+def hitsRange(*args):
+    return ['%s' % i for i in range(*args)]
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/sruparsertest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/sruparsertest.py
--- version_0/test/sru/sruparsertest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/sruparsertest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,44 +1,45 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2011 Seecr http://seecr.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.components.sru.sruparser import MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, UNSUPPORTED_VERSION, UNSUPPORTED_OPERATION, UNSUPPORTED_PARAMETER_VALUE, QUERY_FEATURE_UNSUPPORTED, SruException, XML_HEADER
 from meresco.components.sru import SruParser, SruHandler
 
-from cq2utils import CallTrace, CQ2TestCase
+from seecr.test import SeecrTestCase, CallTrace
 from lxml.etree import parse
 from StringIO import StringIO
 from weightless.core import compose
 
 SUCCESS = "SUCCESS"
 
-class SruParserTest(CQ2TestCase):
+class SruParserTest(SeecrTestCase):
 
     def testExplainWithPresetValues(self):
         component = SruParser(host='TEST_SERVER_HOST', port='TEST_SERVER_PORT', description='TEST_SERVER_DESCRIPTION', modifiedDate='TEST_SERVER_DATE', database='DATABASE', wsdl='http://somewhe.re/wsdl')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/srurecordupdatetest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/srurecordupdatetest.py
--- version_0/test/sru/srurecordupdatetest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/srurecordupdatetest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,40 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CallTrace, CQ2TestCase
+from seecr.test import SeecrTestCase, CallTrace
 
 from meresco.components.sru.srurecordupdate import SRURecordUpdate
 from amara.binderytools import bind_string
 from weightless.core import compose
 from meresco.components.xml_generic.validate import ValidateException
+from meresco.core import asyncnoreturnvalue
 
 
 XML = """<?xml version="1.0" encoding="UTF-8"?>
@@ -57,13 +59,16 @@
 REPLACE = "replace"
 DELETE = "delete"
 
-class SRURecordUpdateTest(CQ2TestCase):
+class SRURecordUpdateTest(SeecrTestCase):
     """http://www.loc.gov/standards/sru/record-update/"""
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.sruRecordUpdate = SRURecordUpdate()
-        self.observer = CallTrace("Observer")
+        @asyncnoreturnvalue
+        def addOrDelete(*args, **kwargs):
+            pass
+        self.observer = CallTrace("Observer", methods={'add': addOrDelete, 'delete': addOrDelete})
         self.sruRecordUpdate.addObserver(self.observer)
 
     def createRequestBody(self, action=CREATE, recordData="<dc>empty</dc>"):
@@ -126,7 +131,7 @@
     def testPassCallableObjectForAdd(self):
         def callable():
             pass
-        self.observer.returnValues['add'] = (f for f in ['a', callable, 'b'])
+        self.observer.returnValues['add'] = (f for f in [callable])
         requestBody = self.createRequestBody(action=REPLACE)
         result = list(compose(self.sruRecordUpdate.handleRequest(Body=requestBody)))
         self.assertTrue(callable in result)
@@ -141,7 +146,7 @@
     def testPassCallableObjectForDelete(self):
         def callable():
             pass
-        self.observer.returnValues['delete'] = (f for f in ['a', callable, 'b'])
+        self.observer.returnValues['delete'] = (f for f in [callable])
         requestBody = self.createRequestBody(action=DELETE)
         result = list(compose(self.sruRecordUpdate.handleRequest(Body=requestBody)))
         self.assertTrue(callable in result)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/srutermdrilldowntest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/srutermdrilldowntest.py
--- version_0/test/sru/srutermdrilldowntest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/srutermdrilldowntest.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -28,7 +28,7 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from weightless.core import compose
 
 from meresco.components.sru.diagnostic import generalSystemError
@@ -36,7 +36,7 @@
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
 from meresco.components.drilldown import SRUTermDrilldown
 
-class SRUTermDrilldownTest(CQ2TestCase):
+class SRUTermDrilldownTest(SeecrTestCase):
     def testSRUTermDrilldown(self):
         sruTermDrilldown = SRUTermDrilldown()
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/sru/srwtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/sru/srwtest.py
--- version_0/test/sru/srwtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/sru/srwtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -7,7 +7,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # 
 # This file is part of "Meresco Components"
@@ -28,11 +28,14 @@
 # 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 
 from meresco.components.sru import SruHandler, SruParser
 from meresco.components.sru.srw import Srw
 from meresco.components.facetindex import Response
+from meresco.core import asyncnoreturnvalue
+
+from weightless.core import compose
 
 httpResponse = """HTTP/1.0 200 OK
 Content-Type: text/xml; charset=utf-8
@@ -58,10 +61,10 @@
 
 argumentsWithMandatory = """<SRW:version>1.1</SRW:version><SRW:query>dc.author = "jones" and  dc.title = "smith"</SRW:query>%s"""
 
-class SrwTest(CQ2TestCase):
+class SrwTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.srw = Srw()
         self.sruParser = SruParser()
         self.sruHandler = SruHandler()
@@ -129,28 +132,43 @@
     </diagnostic></srw:diagnostics></srw:searchRetrieveResponse>""", response)
 
     def testContentType(self):
+        @asyncnoreturnvalue
+        def methodAsGenerator(**kwargs):
+            pass
+        def executeQuery(**kwargs):
+            raise StopIteration([1, [0]])
+            yield
         observer = CallTrace(
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData', 'yieldRecord'])
-        observer.exceptions['executeQuery'] = StopIteration([1, [0]])
+            methods={
+                'executeQuery': executeQuery,
+                'extraResponseData': methodAsGenerator,
+                'echoedExtraRequestData': methodAsGenerator,
+            })
         self.sruHandler.addObserver(observer)
 
         request = soapEnvelope % SRW_REQUEST % argumentsWithMandatory % ''
-        response = "".join(self.srw.handleRequest(Body=request))
+        response = "".join(compose(self.srw.handleRequest(Body=request)))
         self.assertTrue('text/xml; charset=utf-8' in response, response)
 
     def testNormalOperation(self):
         request = soapEnvelope % SRW_REQUEST % argumentsWithMandatory % ""
+        @asyncnoreturnvalue
+        def methodAsGenerator(**kwargs):
+            pass
+        response = Response(total=1, hits=['recordId'])
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
         observer = CallTrace(
             methods={
-                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)])
-            },
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        response = Response(total=1, hits=['recordId'])
-        observer.exceptions['executeQuery'] = StopIteration(response)
-
+                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)]),
+                'executeQuery': executeQuery,
+                'extraResponseData': methodAsGenerator,
+                'echoedExtraRequestData': methodAsGenerator,
+            })
         self.sruHandler.addObserver(observer)
 
-        result = "".join(self.srw.handleRequest(Body=request))
+        result = "".join(compose(self.srw.handleRequest(Body=request)))
 
         self.assertEqualsWS(httpResponse % soapEnvelope % wrappedMockAnswer % ('recordId', 'dc.author = "jones" and  dc.title = "smith"'), result)
 
@@ -180,15 +198,22 @@
   </SOAP:Body>
 </SOAP:Envelope>"""
 
+        @asyncnoreturnvalue
+        def methodAsGenerator(**kwargs):
+            pass
+        response = Response(total=1, hits=['recordId'])
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
         observer = CallTrace(
             methods={
-                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)])
-            },
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
-        response = Response(total=1, hits=['recordId'])
-        observer.exceptions['executeQuery'] = StopIteration(response)
+                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)]),
+                'executeQuery': executeQuery,
+                'extraResponseData': methodAsGenerator,
+                'echoedExtraRequestData': methodAsGenerator,
+            })
         self.sruHandler.addObserver(observer)
-        response = "".join(self.srw.handleRequest(Body=request))
+        response = "".join(compose(self.srw.handleRequest(Body=request)))
 
         echoRequest = """<srw:echoedSearchRetrieveRequest>
 <srw:version>1.1</srw:version>
@@ -210,15 +235,22 @@
         sruParser = SruParser()
         srw.addObserver(sruParser)
         sruParser.addObserver(self.sruHandler)
-        observer = CallTrace(
-            returnValues={
-                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)])
-            },
-            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
         response = Response(total=1, hits=[1])
-        observer.exceptions['executeQuery'] = StopIteration(response)
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        @asyncnoreturnvalue
+        def methodAsGenerator(**kwargs):
+            pass
+        observer = CallTrace(
+            methods={
+                'yieldRecord': lambda identifier, partname: (g for g in ["<DATA>%s-%s</DATA>" % (identifier, partname)]),
+                'executeQuery': executeQuery,
+                'extraResponseData': methodAsGenerator,
+                'echoedExtraRequestData': methodAsGenerator,
+            })
 
         self.sruHandler.addObserver(observer)
-        response = "".join(srw.handleRequest(Body=request))
+        response = "".join(compose(srw.handleRequest(Body=request)))
         self.assertTrue("DEFAULT_RECORD_SCHEMA" in response, response)
         self.assertTrue("DEFAULT_RECORD_PACKING" in response, response)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/statisticstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/statisticstest.py
--- version_0/test/statisticstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/statisticstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,42 +1,46 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 import cPickle as pickle
 from time import time
 from random import randint
-from cq2utils import CQ2TestCase
+from seecr.test import SeecrTestCase
 from os import makedirs, rename
 from os.path import isfile, join
 from meresco.components.statistics import Statistics, Logger, combinations, Aggregator, AggregatorException, Top100s, snapshotFilename, log
 from meresco.core import Observable
+from meresco.core.generatorutils import asyncnoreturnvalue
+from weightless.core import compose
 
-class StatisticsTest(CQ2TestCase):
+class StatisticsTest(SeecrTestCase):
 
     def testStatistics(self):
         stats = Statistics(self.tempdir, [('date',), ('date', 'protocol'), ('date', 'ip', 'protocol')])
@@ -189,25 +193,31 @@
 
     def testSelfLog(self):
         class MyObserver(Logger):
+            @asyncnoreturnvalue
             def aMessage(self):
                 self.log(message='newValue')
         stats = Statistics(self.tempdir, [('message',)])
         stats._clock = lambda: (1970, 1, 1, 0, 0, 0)
         myObserver = MyObserver()
+        observable = Observable()
+        observable.addObserver(stats)
         stats.addObserver(myObserver)
-        list(stats.unknown("aMessage"))
+        list(compose(observable.all.aMessage()))
         self.assertEquals({('newValue',): 1}, stats.get(('message',)))
 
     def testSelfLogWithObservableAndDelegation(self):
         class MyObserver(Observable):
             log=log
+            @asyncnoreturnvalue
             def aMessage(self):
                 self.log(message='newValue')
         stats = Statistics(self.tempdir, [('message',)])
         stats._clock = lambda: (1970, 1, 1, 0, 0, 0)
         myObserver = MyObserver()
+        observable = Observable()
+        observable.addObserver(stats)
         stats.addObserver(myObserver)
-        list(stats.unknown("aMessage"))
+        list(compose(observable.all.aMessage()))
         self.assertEquals({('newValue',): 1}, stats.get(('message',)))
 
     def testLogWithoutStatistics(self):
@@ -236,14 +246,17 @@
 
     def testSelfLogMultipleValuesForSameKey(self):
         class MyObserver(Logger):
+            @asyncnoreturnvalue
             def aMessage(self):
                 self.log(message='value1')
                 self.log(message='value2')
         stats = Statistics(self.tempdir, [('message',)])
         stats._clock = lambda: (1970, 1, 1, 0, 0, 0)
         myObserver = MyObserver()
+        observable = Observable()
+        observable.addObserver(stats)
         stats.addObserver(myObserver)
-        list(stats.unknown("aMessage"))
+        list(compose(observable.all.aMessage()))
         self.assertEquals({('value1',): 1, ('value2',) : 1}, stats.get(('message',)))
 
     def testCatchErrorsAndCloseTxLog(self):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/statisticsxmltest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/statisticsxmltest.py
--- version_0/test/statisticsxmltest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/statisticsxmltest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,33 +1,35 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase, CallTrace
+
+from seecr.test import SeecrTestCase, CallTrace
 from meresco.components.statisticsxml import StatisticsXml
 from meresco.components.statistics import Statistics
 from meresco.components.http.utils import CRLF
@@ -36,7 +38,7 @@
 
 from weightless.core import compose
 
-class StatisticsXmlTest(CQ2TestCase):
+class StatisticsXmlTest(SeecrTestCase):
 
     def testParseTime(self):
         s = StatisticsXml('ignored')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/storagecomponenttest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/storagecomponenttest.py
--- version_0/test/storagecomponenttest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/storagecomponenttest.py	2012-01-29 19:09:47.000000000 +0100
@@ -8,7 +8,7 @@
 # Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
-# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -28,34 +28,27 @@
 # 
 ## end license ##
 
-from cq2utils.cq2testcase import CQ2TestCase
+from seecr.test import SeecrTestCase
 
 from meresco.components.storagecomponent import StorageComponent
 from storage import HierarchicalStorage, Storage
 from cStringIO import StringIO
-from meresco.core.observable import Observable
+from meresco.core import Observable
 from subprocess import Popen, PIPE
+from weightless.core import compose
 
 
-class StorageComponentTest(CQ2TestCase):
+class StorageComponentTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
-        p = Popen("which ci 2>/dev/null", shell=True, stdin=PIPE, stdout=PIPE, close_fds=True)
-        (i, o) = (p.stdin, p.stdout)
-        self.revisionAvailable = o.read() != ''
+        SeecrTestCase.setUp(self)
 
-        self.storageComponent = StorageComponent(self.tempdir, revisionControl=self.revisionAvailable)
+        self.storageComponent = StorageComponent(self.tempdir)
         self.storage = self.storageComponent._storage
 
     def testAdd(self):
-        if self.revisionAvailable:
-            old,new = self.storageComponent.add("id_0", "partName", "The contents of the part")
-        else:
-            self.storageComponent.add("id_0", "partName", "The contents of the part")
+        list(compose(self.storageComponent.add("id_0", "partName", "The contents of the part")))
         self.assertEquals('The contents of the part', self.storage.get(('id_0', 'partName')).read())
-        if self.revisionAvailable:
-            self.assertEquals((0,1), (old,new))
 
     def testIsAvailableIdAndPart(self):
         sink = self.storage.put(('some:thing:anId-123','somePartName'))
@@ -99,12 +92,12 @@
         identifier = ('some:thing:anId-123','somePartName')
         self.storage.put(identifier).close()
         self.assertTrue(identifier in self.storage)
-        self.storageComponent.delete('some:thing:anId-123')
+        list(compose(self.storageComponent.delete('some:thing:anId-123')))
         self.assertTrue(identifier in self.storage)
 
         self.storageComponent = StorageComponent(self.tempdir, partsRemovedOnDelete=['somePartName'])
         self.storage = self.storageComponent._storage
-        self.storageComponent.delete('some:thing:anId-123')
+        list(compose(self.storageComponent.delete('some:thing:anId-123')))
         self.assertFalse(identifier in self.storage)
 
 
@@ -116,51 +109,42 @@
 
     def testEnumerate(self):
         self.assertEquals(set([]), set(self.storageComponent.listIdentifiers()))
-        self.storageComponent.add('some:thing:anId-123','somePartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-123','somePartName', 'data')))
         self.assertEquals(set(['some:thing:anId-123']), set(self.storageComponent.listIdentifiers()))
-        self.storageComponent.add('some:thing:anId-123','anotherPartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-123','anotherPartName', 'data')))
         self.assertEquals(set(['some:thing:anId-123']), set(self.storageComponent.listIdentifiers()))
-        self.storageComponent.add('some:thing:anId-122','anotherPartName', 'data')
-        self.storageComponent.add('any:thing:anId-123','somePartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-122','anotherPartName', 'data')))
+        list(compose(self.storageComponent.add('any:thing:anId-123','somePartName', 'data')))
         self.assertEquals(set(['some:thing:anId-123', 'some:thing:anId-122', 'any:thing:anId-123']), set(self.storageComponent.listIdentifiers()))
         self.assertEquals(set(['some:thing:anId-123', 'any:thing:anId-123']), set(self.storageComponent.listIdentifiers('somePartName')))
 
     def testGlob(self):
         self.assertEquals(set([]), set(self.storageComponent.glob(('some:thing:anId-123', None))))
 
-        self.storageComponent.add('some:thing:anId-123','somePartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-123','somePartName', 'data')))
         self.assertEquals(set([('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('so', None))))
         self.assertEquals(set([('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some', None))))
         self.assertEquals(set([('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some:thing', None))))
         self.assertEquals(set([('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some:thing:anId', None))))
 
-        self.storageComponent.add('some:thing:anId-123','anotherPartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-123','anotherPartName', 'data')))
         self.assertEquals(set([('some:thing:anId-123', 'anotherPartName'), ('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some:thing:anId', None))))
 
-        self.storageComponent.add('some:thing:anId-124','anotherPartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:anId-124','anotherPartName', 'data')))
         self.assertEquals(set([('some:thing:anId-123', 'anotherPartName'), ('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some:thing:anId-123', None))))
         self.assertEquals(set([('some:thing:anId-123', 'somePartName')]), set(self.storageComponent.glob(('some:thing:anId-123', 'somePartName'))))
 
         self.assertEquals(set([('some:thing:anId-123', 'anotherPartName'), ('some:thing:anId-124', 'anotherPartName')]), set(self.storageComponent.glob(('some:thing:anId', 'anotherPartName'))))
 
-        self.storageComponent.add('some:thing:else-1','anotherPartName', 'data')
+        list(compose(self.storageComponent.add('some:thing:else-1','anotherPartName', 'data')))
         self.assertEquals(set([('some:thing:anId-123', 'anotherPartName'), ('some:thing:anId-124', 'anotherPartName')]), set(self.storageComponent.glob(('some:thing:anId', 'anotherPartName'))))
 
-    def testAddDocumentPartCallsAdd(self):
-        s = StorageComponent(self.tempdir, revisionControl=self.revisionAvailable)
-        addInvocations = []
-        def add(*args, **kwargs):
-            addInvocations.append(dict(args=args, kwargs=kwargs))
-        s.add = add
-        s.addDocumentPart(identifier='x', partname='y', data='dummy')
-        self.assertEquals([{'args':(), 'kwargs':dict(identifier='x', partname='y', data='dummy')}], addInvocations)
-
     def testObservableNameNotSet(self):
-        s = StorageComponent(self.tempdir, revisionControl=self.revisionAvailable)
+        s = StorageComponent(self.tempdir)
         self.assertEquals(None, s.observable_name())
 
     def testObservableNameSet(self):
-        s = StorageComponent(self.tempdir, revisionControl=self.revisionAvailable, name="name")
+        s = StorageComponent(self.tempdir, name="name")
         self.assertEquals("name", s.observable_name())
 
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/tokenizefieldlettest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/tokenizefieldlettest.py
--- version_0/test/tokenizefieldlettest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/tokenizefieldlettest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,34 +1,37 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase, CallTrace
 
-from meresco.core import be, Observable
+from seecr.test import SeecrTestCase, CallTrace
 
+from meresco.core import Observable
+
+from weightless.core import be
 
 from string import punctuation
 
@@ -40,7 +43,7 @@
     def addField(self, field, value):
         self.tokens.append(value)
 
-class TokenizeFieldletTest(CQ2TestCase):
+class TokenizeFieldletTest(SeecrTestCase):
 
     def assertTokenized(self, expected, value):
         tokens = Tokens()
Only in version_0/test: utils.py
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/venturitest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/venturitest.py
--- version_0/test/venturitest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/venturitest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,42 +1,48 @@
 # -*- coding=utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from StringIO import StringIO
 
-from cq2utils import CQ2TestCase, CallTrace
+from seecr.test import SeecrTestCase, CallTrace
 from lxml.etree import parse, tostring
 
 from meresco.components.venturi import Venturi, VenturiException
-from meresco.core import TransactionScope, be, Observable
-from weightless.core import compose
+from meresco.core import TransactionScope, Observable
+from meresco.core.generatorutils import asyncnoreturnvalue
 
+from weightless.core import compose, be
+
+def yieldNothing(**kwargs):
+    return
+    yield
 
 def fromstring(aString):
     xmlParsed = parse(StringIO(aString))
@@ -55,12 +61,12 @@
         )
     )
 
-class VenturiTest(CQ2TestCase):
+class VenturiTest(SeecrTestCase):
     def testOutline(self):
         inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;message&lt;/some&gt;</part><part name="parttwo"><second>message</second></part></document>""")
-        interceptor = CallTrace('Interceptor')
+        interceptor = CallTrace('Interceptor', methods={'add': yieldNothing})
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()'), ('parttwo', '/document/part/second')], [], interceptor)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('identifier', interceptor.calledMethods[1].kwargs['identifier'])
         self.assertEquals('partone', interceptor.calledMethods[1].kwargs['partname'])
@@ -74,51 +80,52 @@
 
     def testOnlyPassPartsSpecified(self):
         inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;message&lt;/some&gt;</part><part name="parttwo"><second/></part></document>""")
-        interceptor = CallTrace('Interceptor')
+        interceptor = CallTrace('Interceptor', methods={'add': yieldNothing})
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()')], [], interceptor)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('<some>message</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
 
     def testReadFromStorage(self):
         inputEvent = fromstring('<document/>')
-        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'unknown'])
-        storage = CallTrace('Storage', ignoredAttributes=['add'])
+        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'all_unknown', 'any_unknown', 'call_unknown'])
+        interceptor.methods['add'] = yieldNothing
+        storage = CallTrace('Storage', ignoredAttributes=['add', 'all_unknown'])
         storage.returnValues['isAvailable'] = (True, True)
         storage.returnValues['getStream'] = StringIO('<some>this is partone</some>')
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()')], [], interceptor, storage)
-        v.do.add('identifier', 'document', inputEvent)
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('<some>this is partone</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         self.assertEquals(('identifier', 'partone'), storage.calledMethods[1].args)
 
     def testCouldHave(self):
         inputEvent = fromstring('<document><one/></document>')
-        interceptor = CallTrace('Interceptor', ignoredAttributes=['getStream', 'unknown'])
+        interceptor = CallTrace('Interceptor', ignoredAttributes=['getStream', 'all_unknown', 'any_unknown', 'call_unknown'], methods={'add': yieldNothing})
         v = createVenturiHelix([], [('one', '/document/one')], interceptor)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('<one/>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
 
     def testCouldHaveInStorage(self):
         inputEvent = fromstring('<document><other/></document>')
-        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'unknown'])
-        storage = CallTrace('Storage', ignoredAttributes=['add'])
+        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'all_unknown', 'any_unknown', 'call_unknown'], methods={'add': yieldNothing})
+        storage = CallTrace('Storage', ignoredAttributes=['add', 'all_unknown'])
         storage.returnValues['isAvailable'] = (True, True)
         storage.returnValues['getStream'] = StringIO('<one/>')
         v = createVenturiHelix([], [('one', '/document/one')], interceptor, storage)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('<one/>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         self.assertEquals(('identifier', 'one'), storage.calledMethods[1].args)
 
     def testCouldHaveButDoesnot(self):
         inputEvent = fromstring('<document><other/></document>')
-        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'unknown'])
-        storage = CallTrace('Storage', ignoredAttributes=['add'])
+        interceptor = CallTrace('Interceptor', ignoredAttributes=['isAvailable', 'getStream', 'all_unknown', 'any_unknown', 'call_unknown'], methods={'add': yieldNothing})
+        storage = CallTrace('Storage', ignoredAttributes=['add', 'all_unknown'])
         storage.exceptions['getStream'] = KeyError('Part not available')
         v = createVenturiHelix([('other', '/document/other')], [('one', '/document/one')], interceptor, storage)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
         self.assertEquals('identifier', interceptor.calledMethods[1].kwargs['identifier'])
         self.assertEquals('other', interceptor.calledMethods[1].kwargs['partname'])
@@ -127,7 +134,7 @@
         inputEvent = fromstring('<document><one/><two/></document>')
         v = createVenturiHelix([('one', '/document/*')], [])
         try:
-            result = v.all.add('identifier', 'document', inputEvent)
+            result = compose(v.all.add('identifier', 'document', inputEvent))
             list(result)
             self.fail('no good no')
         except Exception, e:
@@ -137,35 +144,36 @@
 
     def testNamespace(self):
         inputEvent = fromstring('<document xmlns="ns1" xmlns:ns2="ns2"><ns2:one/><two/></document>')
-        interceptor = CallTrace('Interceptor')
+        interceptor = CallTrace('Interceptor', methods={'add': yieldNothing})
         v = createVenturiHelix([('one', '/prefixone:document/prefixtwo:one'), ('two','/prefixone:document/prefixone:two')], [], interceptor, namespaceMap={'prefixone':'ns1', 'prefixtwo':'ns2'})
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add', 'add'], [m.name for m in interceptor.calledMethods])
 
     def testTransactionScopeFilledWithIdentifier(self):
         ids = []
         class TempComponent(Observable):
+            @asyncnoreturnvalue
             def add(this, identifier, partname, lxmlNode):
                 ids.append(this.ctx.tx.locals['id'])
         v = createVenturiHelix([('PARTNAME', '/document')],[], TempComponent())
-        v.do.add(identifier='ID', partname='PARTNAME', lxmlNode=fromstring('<document><other/></document>'))
+        list(compose(v.all.add(identifier='ID', partname='PARTNAME', lxmlNode=fromstring('<document><other/></document>'))))
         self.assertEquals(1, len(ids))
 
     def testDeleteAlsoSetsIdOnTransaction(self):
         __callstack_var_tx__ = CallTrace('Transaction')
         __callstack_var_tx__.locals={}
         v = Venturi(should=[('PARTNAME', '/document')],could=[])
-        list(v.delete(identifier='identifier'))
+        list(compose(v.delete(identifier='identifier')))
         self.assertEquals('identifier', __callstack_var_tx__.locals['id'])
 
     def testPartInShouldDoesNotExist(self):
         inputEvent = fromstring('<document/>')
-        interceptor = CallTrace('Interceptor', ignoredAttributes=['begin', 'isAvailable', 'getStream', 'unknown'])
+        interceptor = CallTrace('Interceptor', ignoredAttributes=['begin', 'isAvailable', 'getStream', 'all_unknown', 'any_unknown', 'call_unknown'])
         storage = CallTrace('Storage', ignoredAttributes=['begin', 'add'])
         storage.returnValues['isAvailable'] = (False, False)
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()')], [], interceptor, storage)
         try:
-            v.do.add('identifier', 'document', inputEvent)
+            list(compose(v.all.add('identifier', 'document', inputEvent)))
             self.fail('Expected exception')
         except VenturiException:
             pass
@@ -186,20 +194,11 @@
         self.assertEquals([callable], result)
         self.assertEquals(['delete'], [m.name for m in observer.calledMethods])
 
-    def testAddDocumentPartCallsAdd(self):
-        v = Venturi()
-        addInvocations = []
-        def add(*args, **kwargs):
-            addInvocations.append(dict(args=args, kwargs=kwargs))
-        v.add = add
-        v.addDocumentPart(identifier='x', partname='y', lxmlNode='dummy')
-        self.assertEquals([{'args': (), 'kwargs': dict(identifier='x', partname='y', lxmlNode='dummy')}], addInvocations)
-
     def testNoLxmlTailOnPart(self):
         inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;message&lt;/some&gt;\n\n\n\n</part><part name="parttwo"><second>message</second>\n\n\n\n</part></document>""")
-        interceptor = CallTrace('Interceptor')
+        interceptor = CallTrace('Interceptor', methods={'add': yieldNothing})
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()'), ('parttwo', '/document/part/second')], [], interceptor)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
 
         self.assertEquals('<some>message</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         secondXml = interceptor.calledMethods[2].kwargs['lxmlNode']
@@ -207,9 +206,9 @@
 
     def testPartsWithUnicodeChars(self):
         inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;t€xt&lt;/some&gt;\n\n\n\n</part><part name="parttwo"><second>t€xt</second>\n\n\n\n</part></document>""")
-        interceptor = CallTrace('Interceptor')
+        interceptor = CallTrace('Interceptor', methods={'add': yieldNothing})
         v = createVenturiHelix([('partone', '/document/part[@name="partone"]/text()'), ('parttwo', '/document/part/second')], [], interceptor)
-        list(v.all.add('identifier', 'document', inputEvent))
+        list(compose(v.all.add('identifier', 'document', inputEvent)))
 
         firstXml = interceptor.calledMethods[1].kwargs['lxmlNode']
         self.assertEquals('<some>t&#8364;xt</some>', tostring(firstXml))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/web/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/web/__init__.py
--- version_0/test/web/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/web/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,28 +1,29 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/web/webquerytest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/web/webquerytest.py
--- version_0/test/web/webquerytest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/web/webquerytest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
 
 from meresco.components.web import WebQuery
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xml2fieldstest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xml2fieldstest.py
--- version_0/test/xml2fieldstest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xml2fieldstest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,45 +1,49 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
-from cq2utils import CallTrace
+from seecr.test import CallTrace
 
+from weightless.core import compose
 from meresco.core import Observable
 from meresco.components import Xml2Fields
 
 from lxml.etree import parse
 from StringIO import StringIO
 
+
 def parselxml(aString):
     return parse(StringIO(aString)).getroot()
 
-class Xml2FieldsTest(TestCase):
 
+class Xml2FieldsTest(TestCase):
     def setUp(self):
         xml2fields = Xml2Fields()
         self.observer = CallTrace('Observer')
@@ -48,12 +52,13 @@
         self.observable.addObserver(xml2fields)
 
     def testOneField(self):
-        self.observable.do.add('id0','partName', parselxml('<fields><tag>value</tag></fields>'))
+        result = list(compose(self.observable.all.add('id0','partName', parselxml('<fields><tag>value</tag></fields>'))))
+        self.assertEquals([], result)
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertEquals("addField(name='fields.tag', value='value')", str(self.observer.calledMethods[0]))
 
     def testDoNotIncludeNamespaces(self):
-        self.observable.do.add('id0','partName', parselxml('<fields xmlns="aap"><tag>value</tag></fields>'))
+        list(compose(self.observable.all.add('id0','partName', parselxml('<fields xmlns="aap"><tag>value</tag></fields>'))))
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertEquals("addField(name='fields.tag', value='value')", str(self.observer.calledMethods[0]))
 
@@ -63,16 +68,15 @@
                 <title>The title</title>
             </general>
         </lom>""")
-        self.observable.do.add('id', 'legacy partname', node)
+        list(compose(self.observable.all.add('id', 'legacy partname', node)))
         self.assertEquals("addField(name='lom.general.title', value='The title')", str(self.observer.calledMethods[0]))
 
     def testMultipleValuesForField(self):
-
         node = parselxml("""<tag>
             <name>Name One</name>
             <name>Name Two</name>
         </tag>""")
-        self.observable.do.add('id', 'legacy partname', node)
+        list(compose(self.observable.all.add('id', 'legacy partname', node)))
         self.assertEquals(2, len(self.observer.calledMethods))
         self.assertEquals("addField(name='tag.name', value='Name One')", str(self.observer.calledMethods[0]))
         self.assertEquals("addField(name='tag.name', value='Name Two')", str(self.observer.calledMethods[1]))
@@ -85,7 +89,8 @@
             <name>
             </name>
         </tag>""")
-        self.observable.do.add('id', 'legacy partname', node)
+        list(compose(self.observable.all.add('id', 'legacy partname', node)))
         self.assertEquals(2, len(self.observer.calledMethods))
         self.assertEquals("addField(name='tag.name', value='Name One')", str(self.observer.calledMethods[0]))
         self.assertEquals("addField(name='tag.name', value='Name Two')", str(self.observer.calledMethods[1]))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xmlcomposetest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xmlcomposetest.py
--- version_0/test/xmlcomposetest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xmlcomposetest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,33 +1,34 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase as TestCase
+from seecr.test import SeecrTestCase as TestCase
 
 from meresco.core import Observable
 from StringIO import StringIO
@@ -36,18 +37,16 @@
 
 class XmlComposeTest(TestCase):
     def testOne(self):
-        observable = Observable()
         xmlcompose = XmlCompose(
             template = """<template><one>%(one)s</one><two>%(two)s</two></template>""",
             nsMap = {'ns1': "http://namespaces.org/ns1"},
             one = ('partname1', '/ns1:one/ns1:tag/text()'),
             two = ('partname2', '/two/tag/@name')
         )
-        observable.addObserver(xmlcompose)
         observer = MockStorage()
         xmlcompose.addObserver(observer)
 
-        result = ''.join(list(observable.any.getRecord("recordId")))
+        result = xmlcompose.getRecord("recordId")
         self.assertEqualsWS(result, """<template><one>1</one><two>&lt;one&gt;</two></template>""")
 
     def testModuloThing(self):
@@ -58,7 +57,6 @@
                     aDictionary['two'].upper(),
                     aDictionary['three'].swapcase()
                 ])
-        observable = Observable()
         xmlcompose = SubXmlCompose(
             template = None,
             nsMap = {},
@@ -66,11 +64,10 @@
             two = ('partname3', '/root/two/text()'),
             three = ('partname3', '/root/three/text()'),
         )
-        observable.addObserver(xmlcompose)
         observer = MockStorage()
         xmlcompose.addObserver(observer)
 
-        result = ''.join(list(observable.any.getRecord("recordId")))
+        result = xmlcompose.getRecord("recordId")
         self.assertEqualsWS(result, """One|TWO|thrEE""")
 
     
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xml_generic/__init__.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xml_generic/__init__.py
--- version_0/test/xml_generic/__init__.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xml_generic/__init__.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,27 +1,28 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xml_generic/validatetest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xml_generic/validatetest.py
--- version_0/test/xml_generic/validatetest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xml_generic/validatetest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,53 +1,59 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cStringIO import StringIO
-from cq2utils.cq2testcase import CQ2TestCase
+from seecr.test import SeecrTestCase
 
 from lxml.etree import parse, _ElementTree
 
 from meresco.components.xml_generic.validate import Validate, ValidateException
 from meresco.core import Observable
 
+from weightless.core import compose
+
 from meresco.components.xml_generic import  __file__ as xml_genericpath
 from os.path import join, dirname, abspath
 
-class ValidateTest(CQ2TestCase):
+class ValidateTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.validate = Validate(join(abspath(dirname(xml_genericpath)), 'schemas-lom', 'lomCc.xsd'))
         self.exception = None
         self.args = None
         class Interceptor:
-            def unknown(inner, message, *args, **kwargs):
+            def all_unknown(inner, message, *args, **kwargs):
                 self.args = args
                 yield None
+            def any_unknown(inner, message, *args, **kwargs):
+                self.args = args
+                return 'sync_any'
             def logException(inner, anException):
                 self.exception = anException
 
@@ -55,22 +61,28 @@
         self.observable = Observable()
         self.observable.addObserver(self.validate)
 
+    # async too!
     def testOneInvalid(self):
         invalidXml = '<lom xmlns="http://ltsc.ieee.org/xsd/LOM_this_should_not_work"/>'
         try:
-            self.observable.any.someMethod(parse(StringIO(invalidXml)))
+            list(compose(self.observable.any.someMethod(parse(StringIO(invalidXml)))))
             self.fail('must raise exception')
         except ValidateException:
             pass
         self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
         self.assertTrue("1 %s" % invalidXml in str(self.exception), str(self.exception))
 
+        self.assertRaises(ValidateException, lambda: list(compose(self.observable.all.someMethod(parse(StringIO(invalidXml))))))
+        self.assertRaises(ValidateException, lambda: list(compose(self.observable.do.someMethod(parse(StringIO(invalidXml))))))
+        self.assertRaises(ValidateException, lambda: list(compose(self.observable.call.someMethod(parse(StringIO(invalidXml))))))
+
     def testAssertInvalidString(self):
         invalid = '<OAI-PMH/>'
         try:
-            self.observable.any.message(parse(StringIO(invalid)))
+            list(compose(self.observable.any.message(parse(StringIO(invalid)))))
             self.fail('must raise exception')
         except ValidateException, e:
             pass
         self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
         self.assertTrue("1 <OAI-PMH/>" in str(self.exception), str(self.exception))
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xmlpumptest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xmlpumptest.py
--- version_0/test/xmlpumptest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xmlpumptest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,45 +1,47 @@
 # encoding=utf-8
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from StringIO import StringIO
-from meresco.core.observable import Observable, be
-from cq2utils import CallTrace, CQ2TestCase
+from meresco.core import Observable
+from seecr.test import SeecrTestCase, CallTrace
+from weightless.core import be, compose
 from amara import binderytools
 from lxml.etree import _ElementTree, tostring, parse, _ElementStringResult, _ElementUnicodeResult
 
 from meresco.components import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml
 
-class XmlPumpTest(CQ2TestCase):
+class XmlPumpTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.observer = CallTrace('Observer', ignoredAttributes=['start'])
         self.observable = be(
             (Observable(),
@@ -63,6 +65,16 @@
         self.assertEquals('tag', xmlNode.localName)
         self.assertEquals('content', xmlNode.content.localName)
 
+    def testInflate(self):
+        xmlString = """<tag><content>contents</content></tag>"""
+        self.observable.do.add(identifier="id", partname="partName", data=xmlString)
+        self.observable.call.add(identifier="id", partname="partName", data=xmlString)
+        self.observer.methods['add'] = lambda **kwargs: (x for x in [])
+        list(compose(self.observable.all.add(identifier="id", partname="partName", data=xmlString)))
+        list(compose(self.observable.any.add(identifier="id", partname="partName", data=xmlString)))
+
+        self.assertEquals(4, len(self.observer.calledMethods))
+
     def testInflateWithElementStringResult(self):
         xmlString = _ElementStringResult("""<tag><content>contents</content></tag>""")
         self.observable.do.add(identifier="id", partname="partName", data=xmlString)
@@ -104,10 +116,12 @@
         class Observer:
             def ape(inner, lxmlNode):
                 self.lxmlNode = lxmlNode
+                return
+                yield
         amara2lxml = Amara2Lxml(fromKwarg='amaraNode', toKwarg='lxmlNode')
         amara2lxml.addObserver(Observer())
         amaraNode = binderytools.bind_string('<a><b>“c</b></a>')
-        list(amara2lxml.unknown('ape', amaraNode=amaraNode))
+        list(compose(amara2lxml.all_unknown('ape', amaraNode=amaraNode)))
         self.assertEquals(_ElementTree, type(self.lxmlNode))
         self.assertEquals('<a><b>“c</b></a>', tostring(self.lxmlNode, encoding='utf-8'))
 
@@ -115,10 +129,12 @@
         class Observer:
             def ape(inner, amaraNode):
                 self.amaraNode = amaraNode
+                return
+                yield
         lxml2amara = Lxml2Amara(fromKwarg='lxmlNode', toKwarg='amaraNode')
         lxml2amara.addObserver(Observer())
         lxmlNode = parse(StringIO('<a><b>“c</b></a>'))
-        list(lxml2amara.unknown('ape', lxmlNode=lxmlNode))
+        list(compose(lxml2amara.all_unknown('ape', lxmlNode=lxmlNode)))
         self.assertEquals('<a><b>“c</b></a>', self.amaraNode.xml())
 
     def testXmlParseAmaraRespondsToEveryMessage(self):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xmlxpathtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xmlxpathtest.py
--- version_0/test/xmlxpathtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xmlxpathtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,35 +1,38 @@
 # -*- coding=utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from cq2utils import CQ2TestCase, CallTrace
-from meresco.core import Observable, be
+from seecr.test import SeecrTestCase, CallTrace
+from meresco.core import Observable
+
+from weightless.core import be, compose
 
 from meresco.components import XmlXPath, XmlParseLxml
 from meresco.components.xmlxpath import lxmlElementUntail
@@ -38,7 +41,7 @@
 import sys
 
 
-class XmlXPathTest(CQ2TestCase):
+class XmlXPathTest(SeecrTestCase):
 
     def createXmlXPath(self, xpathList, nsMap):
         self.observer = CallTrace('observer',ignoredAttributes=['start'] )
@@ -51,23 +54,6 @@
                 )
             )
         )
-        strm = StringIO()
-        sys.stderr = strm
-        try:
-            self.observableWithoutKwarg = be(
-                (Observable(),
-                    (XmlParseLxml(),
-                        (XmlXPath(xpathList, nsMap),
-                            (self.observer, ),
-                        )
-                    )
-                )
-            )
-        finally:
-            sys.stderr = sys.__stderr__
-            msg = strm.getvalue()
-            if msg:
-                self.assertTrue('DeprecationWarning: This use of XmlParseLxml is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument.\n  warn("This use of %s is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument." % self.__class__.__name__, DeprecationWarning)\n' in msg, msg)
 
     def testSimpleXPath(self):
         self.createXmlXPath(['/root/path'], {})
@@ -93,14 +79,14 @@
     def testElementInKwargs(self):
         self.createXmlXPath(['/root/path'], {})
 
-        self.observableWithoutKwarg.do.aMethod('otherArgument', aKeyword='<root><path><to>me</to></path></root>', otherKeyword='okay')
+        self.observable.do.aMethod('otherArgument', data='<root><path><to>me</to></path></root>', otherKeyword='okay')
 
         self.assertEquals(1, len(self.observer.calledMethods))
         method = self.observer.calledMethods[0]
         self.assertEquals('aMethod', method.name)
         self.assertEquals(1, len(method.args))
-        self.assertEquals(set(['aKeyword', 'otherKeyword']), set(method.kwargs.keys()))
-        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['aKeyword']))
+        self.assertEquals(set(['otherKeyword', 'lxmlNode']), set(method.kwargs.keys()))
+        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
 
     def testNoElementInArgumentsPassesOn(self):
         self.createXmlXPath(['/root/path'], {})
@@ -155,13 +141,13 @@
     def testXPathWithNoResults(self):
         self.createXmlXPath(['/does/not/exist'], {})
 
-        self.observableWithoutKwarg.do.aMethod("""<some><element>data</element></some>""")
+        self.observable.do.aMethod(data="""<some><element>data</element></some>""")
         self.assertEquals(0, len(self.observer.calledMethods))
 
     def testOnlyOneXMLAllowed(self):
         self.createXmlXPath('/root', {})
         try:
-            self.observableWithoutKwarg.do.aMethod("<somexml/>", data="<otherxml/>")
+            self.observable.do.aMethod(parse(StringIO("<somexml/>")), data="<otherxml/>")
             self.fail()
         except AssertionError, e:
             self.assertEquals('Can only handle one ElementTree in argument list.', str(e))
@@ -169,7 +155,7 @@
     def testDoNotChangeArgs(self):
         xmlXPath = XmlXPath(['/a'])
         arg = parse(StringIO('<a>a</a>'))
-        xmlXPath.unknown('message', arg)
+        list(compose(xmlXPath.all_unknown('message', arg)))
         self.assertEquals('<a>a</a>', tostring(arg))
 
     def testNamespaces(self):
@@ -194,12 +180,12 @@
     def testFindUsingMultipleXPaths(self):
         self.createXmlXPath(['/does/not/exist', '/a/b', '/a/b/c'], {})
 
-        self.observableWithoutKwarg.do.test('<a><b><c>one</c></b><b><d>two</d></b></a>')
+        self.observable.do.test(data='<a><b><c>one</c></b><b><d>two</d></b></a>')
 
         self.assertEquals(3, len(self.observer.calledMethods))
         allResults = []
         for method in self.observer.calledMethods:
-            allResults.append(method.args[0])
+            allResults.append(method.kwargs['lxmlNode'])
         self.assertEqualsWS('<b><c>one</c></b>', tostring(allResults[0]))
         self.assertEqualsWS('<b><d>two</d></b>', tostring(allResults[1]))
         self.assertEqualsWS('<c>one</c>', tostring(allResults[2]))
@@ -207,24 +193,18 @@
     def testTestWithCondition(self):
         self.createXmlXPath(['/a/*[not(self::b) and not(self::c)]'], {})
 
-        self.observableWithoutKwarg.do.test('<a><b>zero</b><c>one</c><d>two</d></a>')
+        self.observable.do.test(data='<a><b>zero</b><c>one</c><d>two</d></a>')
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        allResults = []
-        for method in self.observer.calledMethods:
-            allResults.append(method.args[0])
-        self.assertEqualsWS('<d>two</d>', tostring(allResults[0]))
+        self.assertEqualsWS('<d>two</d>', tostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
 
     def testTestWithConditionAndNS(self):
         self.createXmlXPath(['/a:a/*[not(self::a:b) and not(self::a:c)]'], {"a":"aSpace"})
 
-        self.observableWithoutKwarg.do.test('<z:a xmlns:z="aSpace"><z:b>zero</z:b><z:c>one</z:c><z:d>two</z:d></z:a>')
+        self.observable.do.test(data='<z:a xmlns:z="aSpace"><z:b>zero</z:b><z:c>one</z:c><z:d>two</z:d></z:a>')
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        allResults = []
-        for method in self.observer.calledMethods:
-            allResults.append(method.args[0])
-        self.assertEqualsWS('two', allResults[0].xpath("text()")[0])
+        self.assertEqualsWS('two', self.observer.calledMethods[0].kwargs['lxmlNode'].xpath("text()")[0])
 
     def testXPathReturnsString(self):
         xpath = XmlXPath(['/a/t/text()'])
@@ -241,7 +221,7 @@
         self.assertEquals({'lxmlNode': 'some text & some <entities>'}, result)
 
     def testTailTakeCareOfWithoutAffectingOriginal(self):
-        observer = CallTrace('observer')
+        observer = CallTrace('observer', methods={'test': lambda *args, **kwargs: (x for x in [])})
         observable = be(
             (Observable(),
                 (XmlXPath(
@@ -262,7 +242,7 @@
 
         lxmlNode = parse(StringIO(XML))
         self.assertEquals(XML, tostring(lxmlNode))
-        list(observable.all.test('een tekst', lxmlNode=lxmlNode))
+        list(compose(observable.all.test('een tekst', lxmlNode=lxmlNode)))
 
         self.assertEquals(1, len(observer.calledMethods))
         method = observer.calledMethods[0]
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xpath2fieldtest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xpath2fieldtest.py
--- version_0/test/xpath2fieldtest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xpath2fieldtest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,38 +1,42 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase, CallTrace
 
+from seecr.test import SeecrTestCase, CallTrace
+
+from weightless.core import compose
 from meresco.components import XPath2Field
 
 from lxml.etree import parse
 from StringIO import StringIO
 
-class XPath2FieldTest(CQ2TestCase):
+
+class XPath2FieldTest(SeecrTestCase):
     def testSingleXPath2Field(self):
         observer = CallTrace()
         xpath2field = XPath2Field([('/a/b//@attr', 'a.b.attr')], namespaceMap={'ns': 'http://namespace.org/'})
@@ -44,7 +48,7 @@
             </b>
         </a>"""))
 
-        xpath2field.add('id', 'partname', node)
+        list(compose(xpath2field.add('id', 'partname', node)))
         self.assertEquals(1, len(observer.calledMethods))
 
         self.assertEquals("addField(name='a.b.attr', value='The Attribute')", str(observer.calledMethods[0]))
@@ -66,7 +70,7 @@
             </b>
         </a>"""))
 
-        xpath2field.add('id', 'partname', node)
+        list(compose(xpath2field.add('id', 'partname', node)))
         self.assertEquals(3, len(observer.calledMethods))
         self.assertEquals("addField(name='a.b.attr', value='attr_1')", str(observer.calledMethods[0]))
         self.assertEquals("addField(name='a.b.attr', value='attr_2')", str(observer.calledMethods[1]))
@@ -79,7 +83,7 @@
 
         node = parse(StringIO("""<a><b>1</b><b>2</b><b>3</b><b>4</b></a>"""))
 
-        xpath2field.add('id', 'partname', node)
+        list(compose(xpath2field.add('id', 'partname', node)))
         self.assertEquals(1, len(observer.calledMethods))
         self.assertEquals(['1','2','3','4'], observer.calledMethods[0].kwargs['value'])
         
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xsltcrosswalktest.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test/xsltcrosswalktest.py
--- version_0/test/xsltcrosswalktest.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/test/xsltcrosswalktest.py	2012-01-29 19:09:47.000000000 +0100
@@ -1,36 +1,39 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
-from cq2utils import CQ2TestCase
+
+from seecr.test import SeecrTestCase
 from os.path import join
 from lxml.etree import parse, tostring, _ElementTree
 
-from meresco.core import Observable, be
+from weightless.core import be
+from meresco.core import Observable
 from meresco.components import XsltCrosswalk
 
 xmlCode = """<?xml version="1.0"?>
@@ -65,10 +68,10 @@
 </xsl:stylesheet>"""
 
 
-class XsltCrosswalkTest(CQ2TestCase):
+class XsltCrosswalkTest(SeecrTestCase):
 
     def setUp(self):
-        CQ2TestCase.setUp(self)
+        SeecrTestCase.setUp(self)
         self.xsltFilename = join(self.tempdir, 'stylesheet.xsl')
         self.xmlFilename = join(self.tempdir, 'source.xml')
         fp = open(self.xsltFilename, 'w')
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test-deps.txt /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/test-deps.txt
--- version_0/test-deps.txt	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test-deps.txt	2012-01-29 19:09:50.000000000 +0100
@@ -0,0 +1,2 @@
+seecr-test (>= 1.0)
+seecr-test (<< 1.1)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/testsetup.sh /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/testsetup.sh
--- version_0/testsetup.sh	2012-01-16 13:37:10.000000000 +0100
+++ version_1/testsetup.sh	2012-01-29 19:09:48.000000000 +0100
@@ -1,5 +1,30 @@
 #!/bin/bash
-set -e
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+set -o errexit
 
 rm -rf tmp build
 fullPythonVersion=python2.6
@@ -11,14 +36,22 @@
 CPLUS_INCLUDE_PATH=/usr/include/c++/${GCCVERSION}:/usr/lib/gcc/$MACHINE/${GCCVERSION}/include \
 CPP=cpp-${GCCVERSION_SHORT} CC=gcc-${GCCVERSION_SHORT} CXX=g++-${GCCVERSION_SHORT} ${fullPythonVersion} setup.py install --root tmp
 
+VERSION="x.y.z"
+
+find tmp -name '*.py' -exec sed -r -e \
+    "/DO_NOT_DISTRIBUTE/ d;
+    s/\\\$Version:[^\\\$]*\\\$/\\\$Version: ${VERSION}\\\$/" -i '{}' \;
+
 cp meresco/__init__.py tmp/usr/local/lib/${fullPythonVersion}/dist-packages/meresco
-export PYTHONPATH=`pwd`/tmp/usr/local/lib/${fullPythonVersion}/dist-packages
+export PYTHONPATH=`pwd`/tmp/usr/local/lib/${fullPythonVersion}/dist-packages:${PYTHONPATH}
 cp -r test tmp/test
 
+set +o errexit
 (
 cd tmp/test
 ./alltests.sh
 )
+set -o errexit
 
 rm -rf tmp build
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/tools/_dumpserver.py /home/thijs/development/sf/meresco-components/workingsets/4.0-beta2-Seecr/version_1/tools/_dumpserver.py
--- version_0/tools/_dumpserver.py	2012-01-16 13:37:07.000000000 +0100
+++ version_1/tools/_dumpserver.py	2012-01-29 19:09:47.000000000 +0100
@@ -36,13 +36,14 @@
     path.insert(0, directory)
 path.insert(0, '..')
 
+from weightless.core import be
 from weightless.io import Reactor
 from sys import stdout
 from os.path import abspath, dirname, join, isdir, basename
 from os import makedirs
 from meresco.components.http import ObservableHttpServer
 from meresco.components.sru.srurecordupdate import RESPONSE_XML, DIAGNOSTIC_XML, escapeXml, bind_string
-from meresco.core import Observable, be
+from meresco.core import Observable
 from re import compile
 from traceback import format_exc
 
