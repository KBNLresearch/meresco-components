Changeset created on Fri Feb 10 14:40:39 UTC 2012 by Seecr (Seek You Too B.V.)

Description: fixes issue with FilterMessages with respect to any and call calls being absorbed

    'any' and 'call' calls with messages that did not match 'allowed' pattern would be absorbed. This is now fixed by raising NoneOfTheObserversRespond with unknownCall=True.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/4.0-Seecr/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/deps.txt /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-Seecr/version_1/deps.txt
--- version_0/deps.txt	2012-02-10 13:49:19.000000000 +0100
+++ version_1/deps.txt	2012-02-10 15:38:36.000000000 +0100
@@ -16,6 +16,6 @@
 python-meresco-xml (<< 2)
 python-storage (>= 6.0)
 python-storage (<< 6.1)
-python-weightless-core (>= 0.7)
+python-weightless-core (>= 0.7.0.1)
 python-weightless-core (<< 0.8)
 lsof
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/filtermessages.py /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-Seecr/version_1/meresco/components/filtermessages.py
--- version_0/meresco/components/filtermessages.py	2012-02-10 13:49:18.000000000 +0100
+++ version_1/meresco/components/filtermessages.py	2012-02-10 15:38:36.000000000 +0100
@@ -27,8 +27,10 @@
 # 
 ## end license ##
 
+from weightless.core import NoneOfTheObserversRespond
 from meresco.core import Observable
 
+
 class FilterMessages(Observable):
     def __init__(self, allowed=[], disallowed=[]):
         Observable.__init__(self)
@@ -42,6 +44,7 @@
         if self._allowedMessage(message):
             response = yield self.any.unknown(message, *args, **kwargs)
             raise StopIteration(response)
+        raise NoneOfTheObserversRespond(message, unknownCall=True)
 
     def all_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
@@ -50,7 +53,9 @@
     def call_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
             return self.call.unknown(message, *args, **kwargs)
+        raise NoneOfTheObserversRespond(message, unknownCall=True)
 
     def do_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
             self.do.unknown(message, *args, **kwargs)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_alltests.py /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-Seecr/version_1/test/_alltests.py
--- version_0/test/_alltests.py	2012-02-10 13:49:17.000000000 +0100
+++ version_1/test/_alltests.py	2012-02-10 15:38:36.000000000 +0100
@@ -54,6 +54,7 @@
 from fields2xmltest import Fields2XmlTest
 from fields2xmlfieldstest import Fields2XmlFieldsTest
 from filelisttest import FileListTest
+from filtermessagestest import FilterMessagesTest
 from filterpartbynametest import FilterPartByNameTest
 from inboxtest import InboxTest
 from multileveldrilldowntest import MultiLevelDrilldownTest
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/filtermessagestest.py /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-Seecr/version_1/test/filtermessagestest.py
--- version_0/test/filtermessagestest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/filtermessagestest.py	2012-02-10 15:38:36.000000000 +0100
@@ -0,0 +1,79 @@
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from seecr.test import SeecrTestCase, CallTrace
+
+from weightless.core import compose, be
+from meresco.core import Observable
+from meresco.components import FilterMessages
+
+
+class FilterMessagesTest(SeecrTestCase):
+    def setUp(self):
+        SeecrTestCase.setUp(self)
+        self.observer1 = CallTrace(
+            'observer1', 
+            emptyGeneratorMethods=['message'], 
+            returnValues={
+                'function': 41, 
+                'gen': (i for i in [41]),
+                'noop': None
+            }
+        )
+        self.observer2 = CallTrace(
+            'observer2', 
+            emptyGeneratorMethods=['message'], 
+            returnValues={
+                'function': 42, 
+                'gen': (i for i in [42]),
+                'noop': None
+            }
+        )
+        self.dna = be((Observable(),
+            (FilterMessages(disallowed=['message', 'function', 'gen', 'noop']),
+                (self.observer1,)
+            ),
+            (FilterMessages(allowed=['message', 'function', 'gen', 'noop']),
+                (self.observer2,)
+            )
+        ))
+
+
+    def testAll(self):
+        list(compose(self.dna.all.message()))
+        self.assertEquals([], [m.name for m in self.observer1.calledMethods])
+        self.assertEquals(['message'], [m.name for m in self.observer2.calledMethods])
+
+    def testCall(self):
+        self.assertEquals(42, self.dna.call.function())
+
+    def testDo(self):
+        self.dna.do.noop()
+        self.assertEquals([], [m.name for m in self.observer1.calledMethods])
+        self.assertEquals(['noop'], [m.name for m in self.observer2.calledMethods])
+
+    def testAny(self):
+        self.assertEquals([42], list(compose(self.dna.any.gen())))
+
