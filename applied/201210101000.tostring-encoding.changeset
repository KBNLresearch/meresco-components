Changeset created on Wed Oct 10 10:00:00 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Always use UTF-8 encoded xml

    Added lxmltostring method to support encoding lxml nodes.
    Please use meresco.compomnents.lxmltostring instead of lxml.etree.tostring

Baseline version: 4.2

From 4eb1c9cfbe1ea79bf4972329c9b040ecafc71ec7 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Wed, 10 Oct 2012 10:29:06 +0100
Subject: [PATCH 1/2] HM/TJ: lxmltostring added (does tostring(..., encoding="UTF-8"))

---
 meresco/components/__init__.py             |    3 ++-
 meresco/components/venturi.py              |    6 ++++--
 meresco/components/xml_generic/validate.py |    6 ++++--
 meresco/components/xmlpump.py              |    7 +++++--
 test/xmlpumptest.py                        |   18 +++++++++++++++++-
 5 files changed, 32 insertions(+), 8 deletions(-)

diff --git a/meresco/components/__init__.py b/meresco/components/__init__.py
index c7cdfba..ea78e5c 100644
--- a/meresco/components/__init__.py
+++ b/meresco/components/__init__.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -32,6 +33,7 @@ from converter import Converter
 from timeddictionary import TimedDictionary
 from xmlcompose import XmlCompose
 
+from xmlpump import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml, lxmltostring
 from berkeleydict import DoubleUniqueBerkeleyDict, BerkeleyDict
 from clausecollector import ClauseCollector
 from combineparts import CombineParts
@@ -61,7 +63,6 @@ from statisticsxml import StatisticsXml
 from storagecomponent import StorageComponent, defaultSplit, defaultJoin
 from venturi import Venturi
 from xml2fields import Xml2Fields
-from xmlpump import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml
 from xmlxpath import XmlXPath
 from xpath2field import XPath2Field
 from xsltcrosswalk import XsltCrosswalk
diff --git a/meresco/components/venturi.py b/meresco/components/venturi.py
index f47fdf3..5bf39e2 100644
--- a/meresco/components/venturi.py
+++ b/meresco/components/venturi.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010, 2012 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -28,12 +29,13 @@
 # 
 ## end license ##
 
-from lxml.etree import _Element, ElementTree, parse, XMLParser, tostring
+from lxml.etree import _Element, ElementTree, parse, XMLParser
 from StringIO import StringIO
 
 from meresco.core import Observable
 
 from meresco.components.xmlxpath import lxmlElementUntail
+from meresco.components import lxmltostring
 from warnings import warn
 
 
@@ -92,7 +94,7 @@ class Venturi(Observable):
 
     def _elementOrText2Text(self, elementOrText):
         if type(elementOrText) == _Element:
-            return tostring(elementOrText)
+            return lxmltostring(elementOrText)
         return elementOrText
 
 
diff --git a/meresco/components/xml_generic/validate.py b/meresco/components/xml_generic/validate.py
index af64e24..8cc910c 100644
--- a/meresco/components/xml_generic/validate.py
+++ b/meresco/components/xml_generic/validate.py
@@ -8,6 +8,7 @@
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -27,11 +28,12 @@
 # 
 ## end license ##
 
-from lxml.etree import parse, XMLSchema, XMLSchemaParseError, _ElementTree, tostring
+from lxml.etree import parse, XMLSchema, XMLSchemaParseError, _ElementTree
 from StringIO import StringIO
 
 from weightless.core import NoneOfTheObserversRespond, DeclineMessage
 from meresco.core import Observable
+from meresco.components import lxmltostring
 
 class ValidateException(Exception):
     pass
@@ -89,7 +91,7 @@ def assertValid(xmlString, schemaPath):
 
 def formatException(schema, lxmlNode):
     message = str(schema.error_log.last_error) + "\n\n"
-    for nr, line in enumerate(tostring(lxmlNode, encoding="utf-8", pretty_print=True).split('\n')):
+    for nr, line in enumerate(lxmltostring(lxmlNode, pretty_print=True).split('\n')):
         message += "%s %s\n" % (nr+1, line)
     return message
 
diff --git a/meresco/components/xmlpump.py b/meresco/components/xmlpump.py
index 7967529..ea1ef90 100644
--- a/meresco/components/xmlpump.py
+++ b/meresco/components/xmlpump.py
@@ -10,6 +10,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -37,6 +38,8 @@ from meresco.core import Observable
 
 from converter import Converter
 
+def lxmltostring(lxmlNode, **kwargs):
+    return tostring(lxmlNode, encoding="UTF-8", **kwargs)
 
 class XmlParseAmara(Converter):
     def _convert(self, anObject):
@@ -56,7 +59,7 @@ class XmlParseLxml(Converter):
         
 class XmlPrintLxml(Converter):
     def _convert(self, anObject):
-        return tostring(anObject, pretty_print = True, encoding="UTF-8")
+        return lxmltostring(anObject, pretty_print=True)
 
 class Amara2Lxml(Converter):
     def _convert(self, anObject):
@@ -64,5 +67,5 @@ class Amara2Lxml(Converter):
 
 class Lxml2Amara(Converter):
     def _convert(self, anObject):
-        return bind_string(tostring(anObject, encoding="UTF-8")).childNodes[0]
+        return bind_string(lxmltostring(anObject)).childNodes[0]
 
diff --git a/test/xmlpumptest.py b/test/xmlpumptest.py
index 6be8bb3..25818c4 100644
--- a/test/xmlpumptest.py
+++ b/test/xmlpumptest.py
@@ -1,4 +1,4 @@
-# encoding=utf-8
+# -*- coding=utf-8
 ## begin license ##
 # 
 # "Meresco Components" are components to build searchengines, repositories
@@ -10,6 +10,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -137,6 +138,21 @@ class XmlPumpTest(SeecrTestCase):
         list(compose(lxml2amara.all_unknown('ape', lxmlNode=lxmlNode)))
         self.assertEquals('<a><b>“c</b></a>', self.amaraNode.xml())
 
+    def testXmlPrintLxml(self):
+        observable = Observable()
+        xmlprintlxml = XmlPrintLxml(fromKwarg='lxmlNode', toKwarg="data")
+        observer = CallTrace('observer', emptyGeneratorMethods=['someMessage'])
+        xmlprintlxml.addObserver(observer)
+        observable.addObserver(xmlprintlxml)
+        list(compose(observable.all.someMessage(lxmlNode=parse(StringIO('<a><b>“c</b></a>')))))
+        self.assertEquals(['someMessage'], observer.calledMethodNames())
+        self.assertEquals(['data'], observer.calledMethods[0].kwargs.keys())
+        self.assertEquals('''<a>
+  <b>“c</b>
+</a>
+''', observer.calledMethods[0].kwargs['data'])
+
+
     def testXmlParseAmaraRespondsToEveryMessage(self):
         self.observable.do.aMethodCall('do not parse this', data='<parse>this</parse>')
 
-- 
1.7.1


From 2336bdc91278096384876991a2dab96c3f05ac62 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Wed, 10 Oct 2012 10:48:57 +0100
Subject: [PATCH 2/2] HM/TJ: use lxmltostring.

---
 test/crosswalktest.py            |    6 +++-
 test/http/httpclienttest.py      |    5 ++-
 test/inboxtest.py                |    3 +-
 test/msgbox/msgboxtest.py        |    3 +-
 test/msgbox/updateadaptertest.py |    4 ++-
 test/periodicdownloadtest.py     |    3 +-
 test/reindextest.py              |    7 +++--
 test/sru/sruhandlertest.py       |    7 +++--
 test/venturitest.py              |   22 +++++++++++---------
 test/xmlpumptest.py              |    9 ++++---
 test/xmlxpathtest.py             |   40 +++++++++++++++++++------------------
 test/xsltcrosswalktest.py        |    6 +++-
 12 files changed, 66 insertions(+), 49 deletions(-)

diff --git a/test/crosswalktest.py b/test/crosswalktest.py
index 2df730c..5ef4d52 100644
--- a/test/crosswalktest.py
+++ b/test/crosswalktest.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -32,7 +33,8 @@ from seecr.test import SeecrTestCase, CallTrace
 from meresco.xml import XMLRewrite
 
 from StringIO import StringIO
-from lxml.etree import parse, tostring, XMLParser
+from lxml.etree import parse, XMLParser
+from meresco.components import lxmltostring
 from difflib import unified_diff
 
 from re import match
@@ -89,7 +91,7 @@ class CrosswalkTest(SeecrTestCase):
         self.observer.methods['add'] = lambda *args, **kwargs: (x for x in [])
         list(compose(self.crosswalk.all_unknown('add', None, 'metadata', theXmlRecord=parse(readRecord('triple-lrecord.xml')))))
         self.assertEquals(1, len(self.observer.calledMethods))
-        self.assertFalse('2006-11-28 19:00' in tostring(self.observer.calledMethods[0].kwargs['theXmlRecord']))
+        self.assertFalse('2006-11-28 19:00' in lxmltostring(self.observer.calledMethods[0].kwargs['theXmlRecord']))
 
     def testReplacePrefix(self):
         rules = [('classification/taxonPath/taxon/entry', 'imsmd:classification/imsmd:taxonpath/imsmd:taxon/imsmd:entry', ('imsmd:langstring/@xml:lang', 'imsmd:langstring'), '<string language="%s">%s</string>',
diff --git a/test/http/httpclienttest.py b/test/http/httpclienttest.py
index d70c76f..961302f 100644
--- a/test/http/httpclienttest.py
+++ b/test/http/httpclienttest.py
@@ -4,6 +4,7 @@
 # and archives, based on "Meresco Core". 
 # 
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -30,7 +31,7 @@ from meresco.components.http.httpclient import HttpClient
 
 from weightless.core import compose
 
-from lxml.etree import tostring
+from meresco.components import lxmltostring
 
 class HttpClientTest(SeecrTestCase):
 
@@ -59,5 +60,5 @@ class HttpClientTest(SeecrTestCase):
         gen = client.httpGet(hostname='localhost', port=80, path='/', arguments={})
         headers, body = self.sendAndReceive(gen,  """HTTP/1.0 200 Ok\r\nContent-Type: text/xml\r\n\r\n<xml/>""")
         
-        self.assertEquals('<xml/>', tostring(body))
+        self.assertEquals('<xml/>', lxmltostring(body))
         self.assertEquals(['HTTP/1.0 200 Ok', 'Content-Type: text/xml'], headers.split(CRLF))
diff --git a/test/inboxtest.py b/test/inboxtest.py
index c2e3775..3b4a093 100644
--- a/test/inboxtest.py
+++ b/test/inboxtest.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -37,7 +38,7 @@ from weightless.io import Reactor
 
 from os.path import join, isfile
 from os import makedirs, rename, listdir, remove
-from lxml.etree import tostring
+from meresco.components import lxmltostring
 
 from meresco.components.inbox import Inbox, InboxException
 
diff --git a/test/msgbox/msgboxtest.py b/test/msgbox/msgboxtest.py
index cf6d440..8b863fe 100644
--- a/test/msgbox/msgboxtest.py
+++ b/test/msgbox/msgboxtest.py
@@ -7,6 +7,7 @@
 # Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -36,7 +37,7 @@ from weightless.io import Reactor
 
 from os.path import join, isfile, basename
 from os import makedirs, rename, listdir, system, chmod, remove
-from lxml.etree import tostring
+from meresco.components import lxmltostring
 from re import sub
 from shutil import rmtree
 from stat import S_IXUSR, S_IRUSR, S_IWUSR
diff --git a/test/msgbox/updateadaptertest.py b/test/msgbox/updateadaptertest.py
index e422b87..f1a7735 100644
--- a/test/msgbox/updateadaptertest.py
+++ b/test/msgbox/updateadaptertest.py
@@ -6,6 +6,7 @@
 # Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -28,7 +29,8 @@
 from meresco.components.msgbox import UpdateAdapterToMsgbox, UpdateAdapterFromMsgbox, Msgbox
 from weightless.core import compose
 from seecr.test import SeecrTestCase, CallTrace
-from lxml.etree import parse, tostring
+from lxml.etree import parse
+from meresco.components import lxmltostring
 from StringIO import StringIO
 from os.path import basename, join
 from os import makedirs
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 859b2ae..3677ad9 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -7,6 +7,7 @@
 # Copyright (C) 2010 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
 # Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -32,7 +33,7 @@ from random import randint
 from threading import Event, Thread
 from time import sleep
 from socket import socket, error as SocketError
-from lxml.etree import tostring
+from meresco.components import lxmltostring
 from StringIO import StringIO
 from os.path import join
 
diff --git a/test/reindextest.py b/test/reindextest.py
index 75db934..c855c97 100644
--- a/test/reindextest.py
+++ b/test/reindextest.py
@@ -10,6 +10,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -32,7 +33,7 @@
 from seecr.test import SeecrTestCase, CallTrace
 from meresco.components import StorageComponent, Reindex, FilterMessages
 from meresco.core import Observable, asyncnoreturnvalue
-from lxml.etree import tostring
+from meresco.components import lxmltostring
 from escaping import unescapeFilename, escapeFilename
 
 from os.path import join, isdir
@@ -142,7 +143,7 @@ class ReindexTest(SeecrTestCase):
         self.assertEquals(['add']*3, [m.name for m in observer.calledMethods])
         self.assertEquals(['id:1','id:2','id:3'], sorted([m.kwargs['identifier'] for m in observer.calledMethods]))
         self.assertEquals(['ignoredName']*3, [m.kwargs['partname'] for m in observer.calledMethods])
-        self.assertEquals(['<empty/>']*3, [tostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
+        self.assertEquals(['<empty/>']*3, [lxmltostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
 
     def testRemoveFilesAndDirectoryAfterProcess(self):
         storage = self.setupStorage([
@@ -224,5 +225,5 @@ class ReindexTest(SeecrTestCase):
         self.assertEquals(['add'], [m.name for m in observer.calledMethods])
         self.assertEquals([identifier], [m.kwargs['identifier'] for m in observer.calledMethods])
         self.assertEquals(['ignoredName'], [m.kwargs['partname'] for m in observer.calledMethods])
-        self.assertEquals(['<empty/>'], [tostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
+        self.assertEquals(['<empty/>'], [lxmltostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
 
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index 25fec24..c3ea0f6 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -36,7 +36,8 @@ from urllib2 import urlopen
 import sys
 
 import traceback
-from lxml.etree import parse, tostring
+from lxml.etree import parse
+from meresco.components import lxmltostring
 from xml.sax.saxutils import quoteattr, escape as xmlEscape
 
 from weightless.core import compose
@@ -561,8 +562,8 @@ class SruHandlerTest(SeecrTestCase):
             <sru>PT1.500S</sru>        
             <index>PT0.005S</index>    
         </querytimes>
-</srw:extraResponseData>""", tostring(extraResponseData))
-        queryTimes = tostring(extraResponseData.xpath('//ti:querytimes', namespaces={'ti':"http://meresco.org/namespace/timing"})[0])
+</srw:extraResponseData>""", lxmltostring(extraResponseData))
+        queryTimes = lxmltostring(extraResponseData.xpath('//ti:querytimes', namespaces={'ti':"http://meresco.org/namespace/timing"})[0])
         assertValid(queryTimes, join(schemasPath, 'timing-20120827.xsd'))
 
     def testTestXSDequalsPublishedXSD(self):
diff --git a/test/venturitest.py b/test/venturitest.py
index 7c200c0..851be51 100644
--- a/test/venturitest.py
+++ b/test/venturitest.py
@@ -10,6 +10,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010-2012 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -34,7 +35,8 @@ from StringIO import StringIO
 from seecr.test import SeecrTestCase, CallTrace
 from seecr.test.io import stderr_replaced
 
-from lxml.etree import parse, tostring
+from lxml.etree import parse
+from meresco.components import lxmltostring
 
 from meresco.components.venturi import Venturi, VenturiException
 from meresco.core import TransactionScope, Observable
@@ -80,7 +82,7 @@ class VenturiTest(SeecrTestCase):
         self.assertEquals('identifier', interceptor.calledMethods[2].kwargs['identifier'])
         self.assertEquals('parttwo', interceptor.calledMethods[2].kwargs['partname'])
         secondXml = interceptor.calledMethods[2].kwargs['lxmlNode']
-        self.assertEquals('<second>message</second>', tostring(secondXml))
+        self.assertEquals('<second>message</second>', lxmltostring(secondXml))
         self.assertEquals('second', secondXml.getroot().tag)
 
     def testOnlyPassPartsSpecified(self):
@@ -89,7 +91,7 @@ class VenturiTest(SeecrTestCase):
         v = createVenturiHelix([{'partname': 'partone', 'xpath': '/document/part[@name="partone"]/text()'}], [], interceptor)
         list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
-        self.assertEquals('<some>message</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEquals('<some>message</some>', lxmltostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
 
     def testReadFromStorage(self):
         inputEvent = fromstring('<document/>')
@@ -101,7 +103,7 @@ class VenturiTest(SeecrTestCase):
         v = createVenturiHelix([{'partname': 'partone', 'xpath': '/document/part[@name="partone"]/text()'}], [], interceptor, storage)
         list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
-        self.assertEquals('<some>this is partone</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEquals('<some>this is partone</some>', lxmltostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         self.assertEquals(('identifier', 'partone'), storage.calledMethods[1].args)
 
     def testReadFromStorageAsString(self):
@@ -122,7 +124,7 @@ class VenturiTest(SeecrTestCase):
         v = createVenturiHelix([], [{'partname': 'one', 'xpath': '/document/one'}], interceptor)
         list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
-        self.assertEquals('<one/>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEquals('<one/>', lxmltostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
 
     def testCouldHaveAsString(self):
         inputEvent = fromstring('<document><one>some text</one></document>')
@@ -141,7 +143,7 @@ class VenturiTest(SeecrTestCase):
         v = createVenturiHelix([], [{'partname': 'one', 'xpath': '/document/one'}], interceptor, storage)
         list(compose(v.all.add('identifier', 'document', inputEvent)))
         self.assertEquals(['begin', 'add'], [m.name for m in interceptor.calledMethods])
-        self.assertEquals('<one/>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEquals('<one/>', lxmltostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         self.assertEquals(('identifier', 'one'), storage.calledMethods[1].args)
 
     def testCouldHaveButDoesnot(self):
@@ -225,9 +227,9 @@ class VenturiTest(SeecrTestCase):
         v = createVenturiHelix([{'partname': 'partone', 'xpath': '/document/part[@name="partone"]/text()'}, {'partname': 'parttwo', 'xpath': '/document/part/second'}], [], interceptor)
         list(compose(v.all.add('identifier', 'document', inputEvent)))
 
-        self.assertEquals('<some>message</some>', tostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEquals('<some>message</some>', lxmltostring(interceptor.calledMethods[1].kwargs['lxmlNode']))
         secondXml = interceptor.calledMethods[2].kwargs['lxmlNode']
-        self.assertEquals('<second>message</second>', tostring(secondXml))
+        self.assertEquals('<second>message</second>', lxmltostring(secondXml))
 
     def testPartsWithUnicodeChars(self):
         inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;t€xt&lt;/some&gt;\n\n\n\n</part><part name="parttwo"><second>t€xt</second>\n\n\n\n</part></document>""")
@@ -236,10 +238,10 @@ class VenturiTest(SeecrTestCase):
         list(compose(v.all.add('identifier', 'document', inputEvent)))
 
         firstXml = interceptor.calledMethods[1].kwargs['lxmlNode']
-        self.assertEquals('<some>t&#8364;xt</some>', tostring(firstXml))
+        self.assertEquals('<some>t€xt</some>', lxmltostring(firstXml))
         self.assertEquals('t€xt', firstXml.getroot().text)
         secondXml = interceptor.calledMethods[2].kwargs['lxmlNode']
-        self.assertEquals('<second>t&#8364;xt</second>', tostring(secondXml))
+        self.assertEquals('<second>t€xt</second>', lxmltostring(secondXml))
         self.assertEquals('t€xt', secondXml.getroot().text)
 
     def testEmptyIdInAddNotAllowed(self):
diff --git a/test/xmlpumptest.py b/test/xmlpumptest.py
index 25818c4..502d39e 100644
--- a/test/xmlpumptest.py
+++ b/test/xmlpumptest.py
@@ -35,7 +35,8 @@ from meresco.core import Observable
 from seecr.test import SeecrTestCase, CallTrace
 from weightless.core import be, compose
 from amara import binderytools
-from lxml.etree import _ElementTree, tostring, parse, _ElementStringResult, _ElementUnicodeResult
+from lxml.etree import _ElementTree, parse, _ElementStringResult, _ElementUnicodeResult
+from meresco.components import lxmltostring
 
 from meresco.components import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml
 
@@ -124,7 +125,7 @@ class XmlPumpTest(SeecrTestCase):
         amaraNode = binderytools.bind_string('<a><b>“c</b></a>')
         list(compose(amara2lxml.all_unknown('ape', amaraNode=amaraNode)))
         self.assertEquals(_ElementTree, type(self.lxmlNode))
-        self.assertEquals('<a><b>“c</b></a>', tostring(self.lxmlNode, encoding='utf-8'))
+        self.assertEquals('<a><b>“c</b></a>', lxmltostring(self.lxmlNode))
 
     def testLxml2Amara(self):
         class Observer:
@@ -226,11 +227,11 @@ class XmlPumpTest(SeecrTestCase):
 
         observable.do.someMessage(filedata=a)
         lxmlA = observer.calledMethods[0].kwargs['lxmlNode']
-        self.assertEquals('<a>aaa</a>', tostring(lxmlA))
+        self.assertEquals('<a>aaa</a>', lxmltostring(lxmlA))
 
         observable.do.someMessage(filedata=b)
         lxmlB = observer.calledMethods[1].kwargs['lxmlNode']
-        self.assertEquals('<b>bbb</b>', tostring(lxmlB))
+        self.assertEquals('<b>bbb</b>', lxmltostring(lxmlB))
 
     def testRenameKwargOnConvert(self):
         observer = CallTrace()
diff --git a/test/xmlxpathtest.py b/test/xmlxpathtest.py
index 9d34eb9..03dc4d7 100644
--- a/test/xmlxpathtest.py
+++ b/test/xmlxpathtest.py
@@ -10,6 +10,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010, 2012 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -31,7 +32,8 @@
 
 import sys
 from StringIO import StringIO
-from lxml.etree import parse, ElementTree, _ElementTree as ElementTreeType, tostring
+from lxml.etree import parse, ElementTree, _ElementTree as ElementTreeType
+from meresco.components import lxmltostring
 
 from seecr.test import SeecrTestCase, CallTrace
 
@@ -65,8 +67,8 @@ class XmlXPathTest(SeecrTestCase):
         self.assertEquals('test', method.name)
         self.assertEquals(1, len(method.args))
         self.assertEquals('een tekst', method.args[0])
-        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
-        self.assertEquals('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
+        self.assertEqualsWS('<path><to>me</to></path>', lxmltostring(method.kwargs['lxmlNode']))
+        self.assertEquals('<path><to>me</to></path>', lxmltostring(method.kwargs['lxmlNode']))
 
     def testSimpleXPathWithUnicodeChars(self):
         self.createXmlXPath(['/root/text()'], {})
@@ -85,7 +87,7 @@ class XmlXPathTest(SeecrTestCase):
         self.assertEquals('aMethod', method.name)
         self.assertEquals(1, len(method.args))
         self.assertEquals(set(['otherKeyword', 'lxmlNode']), set(method.kwargs.keys()))
-        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
+        self.assertEqualsWS('<path><to>me</to></path>', lxmltostring(method.kwargs['lxmlNode']))
 
     def testFromKwargMissingRaisesKeyError(self):
         self.createXmlXPath(['/root/path'], {})
@@ -119,7 +121,7 @@ class XmlXPathTest(SeecrTestCase):
 </root>""")
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        self.assertEqualsWS('<data>This data</data>', tostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
+        self.assertEqualsWS('<data>This data</data>', lxmltostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
 
     def testXPathWithMultipleResults(self):
         self.createXmlXPath(['/root/element/data'], {})
@@ -133,8 +135,8 @@ class XmlXPathTest(SeecrTestCase):
     </element>
 </root>""")
         self.assertEquals(2, len(self.observer.calledMethods))
-        self.assertEqualsWS('<data>one</data>', tostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
-        self.assertEqualsWS('<data>two</data>', tostring(self.observer.calledMethods[1].kwargs['lxmlNode']))
+        self.assertEqualsWS('<data>one</data>', lxmltostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
+        self.assertEqualsWS('<data>two</data>', lxmltostring(self.observer.calledMethods[1].kwargs['lxmlNode']))
 
     def testXPathWithNoResults(self):
         self.createXmlXPath(['/does/not/exist'], {})
@@ -146,7 +148,7 @@ class XmlXPathTest(SeecrTestCase):
         xmlXPath = XmlXPath(['/a'], fromKwarg='lxmlNode')
         lxmlNode = parse(StringIO('<a>a</a>'))
         list(compose(xmlXPath.all_unknown('message', lxmlNode=lxmlNode)))
-        self.assertEquals('<a>a</a>', tostring(lxmlNode))
+        self.assertEquals('<a>a</a>', lxmltostring(lxmlNode))
 
     def testNamespaces(self):
         xmlXPath = XmlXPath(['/a:aNode/b:bNode'], fromKwarg='lxmlNode', namespaceMap={'a':'aNamespace', 'b':'bNamespace' })
@@ -161,10 +163,10 @@ class XmlXPathTest(SeecrTestCase):
         message = observer.calledMethods[0]
         self.assertEquals('message', message.name)
         newNode = message.kwargs['lxmlNode']
-        self.assertEqualsWS('<bNode xmlns="bNamespace">ccc</bNode>', tostring(newNode))
+        self.assertEqualsWS('<bNode xmlns="bNamespace">ccc</bNode>', lxmltostring(newNode))
 
         newNamespaces = newNode.getroot().nsmap
-        nameSpacesAfterParsing = parse(StringIO(tostring(newNode))).getroot().nsmap
+        nameSpacesAfterParsing = parse(StringIO(lxmltostring(newNode))).getroot().nsmap
         self.assertEquals(nameSpacesAfterParsing, newNamespaces)
 
     def testFindUsingMultipleXPaths(self):
@@ -176,9 +178,9 @@ class XmlXPathTest(SeecrTestCase):
         allResults = []
         for method in self.observer.calledMethods:
             allResults.append(method.kwargs['lxmlNode'])
-        self.assertEqualsWS('<b><c>one</c></b>', tostring(allResults[0]))
-        self.assertEqualsWS('<b><d>two</d></b>', tostring(allResults[1]))
-        self.assertEqualsWS('<c>one</c>', tostring(allResults[2]))
+        self.assertEqualsWS('<b><c>one</c></b>', lxmltostring(allResults[0]))
+        self.assertEqualsWS('<b><d>two</d></b>', lxmltostring(allResults[1]))
+        self.assertEqualsWS('<c>one</c>', lxmltostring(allResults[2]))
 
     def testTestWithCondition(self):
         self.createXmlXPath(['/a/*[not(self::b) and not(self::c)]'], {})
@@ -186,7 +188,7 @@ class XmlXPathTest(SeecrTestCase):
         self.observable.do.test(data='<a><b>zero</b><c>one</c><d>two</d></a>')
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        self.assertEqualsWS('<d>two</d>', tostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
+        self.assertEqualsWS('<d>two</d>', lxmltostring(self.observer.calledMethods[0].kwargs['lxmlNode']))
 
     def testTestWithConditionAndNS(self):
         self.createXmlXPath(['/a:a/*[not(self::a:b) and not(self::a:c)]'], {"a":"aSpace"})
@@ -232,19 +234,19 @@ class XmlXPathTest(SeecrTestCase):
 </root>"""
 
         lxmlNode = parse(StringIO(XML))
-        self.assertEquals(XML, tostring(lxmlNode))
+        self.assertEquals(XML, lxmltostring(lxmlNode))
         list(compose(observable.all.test('een tekst', lxmlNode=lxmlNode)))
 
         self.assertEquals(1, len(observer.calledMethods))
         method = observer.calledMethods[0]
         self.assertEquals('test', method.name)
-        self.assertEqualsWS('<myns:path xmlns:myns="http://myns.org/" xmlns="http://myns.org/"><to>me</to></myns:path>', tostring(method.kwargs['lxmlNode']))
+        self.assertEqualsWS('<myns:path xmlns:myns="http://myns.org/" xmlns="http://myns.org/"><to>me</to></myns:path>', lxmltostring(method.kwargs['lxmlNode']))
         self.assertEquals("""\
 <myns:path xmlns:myns="http://myns.org/" xmlns="http://myns.org/">
         <to>me</to>
-    </myns:path>""", tostring(method.kwargs['lxmlNode']))
+    </myns:path>""", lxmltostring(method.kwargs['lxmlNode']))
 
-        self.assertEquals(XML, tostring(lxmlNode))
+        self.assertEquals(XML, lxmltostring(lxmlNode))
 
 
     def testLxmlElementUntail(self):
@@ -260,5 +262,5 @@ class XmlXPathTest(SeecrTestCase):
         newElement = lxmlElementUntail(element)
         self.assertFalse(newElement is element)
         self.assertEquals(None, newElement.tail)
-        self.assertEquals('<a xmlns="http://myns.org/"><b>c</b>\n\n</a>', tostring(newElement))
+        self.assertEquals('<a xmlns="http://myns.org/"><b>c</b>\n\n</a>', lxmltostring(newElement))
 
diff --git a/test/xsltcrosswalktest.py b/test/xsltcrosswalktest.py
index 24b4b10..7da9ff7 100644
--- a/test/xsltcrosswalktest.py
+++ b/test/xsltcrosswalktest.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -30,7 +31,8 @@
 
 from seecr.test import SeecrTestCase
 from os.path import join
-from lxml.etree import parse, tostring, _ElementTree
+from lxml.etree import parse, _ElementTree
+from meresco.components import lxmltostring
 
 from weightless.core import be
 from meresco.core import Observable
@@ -90,7 +92,7 @@ class XsltCrosswalkTest(SeecrTestCase):
 
         class Intercept:
             def someMessage(innerself, lxmlNode):
-                self.crosswalkedNode.append(tostring(lxmlNode, pretty_print=True))
+                self.crosswalkedNode.append(lxmltostring(lxmlNode, pretty_print=True))
                 self.assertEquals(_ElementTree, type(lxmlNode))
         root = be(
             (Observable(),
-- 
1.7.1

