Changeset created on Wed Jan 25 12:47:48 UTC 2012 by Seecr (Seek You Too B.V.)

Description: SruHandler response extension

    SruHandler now supports passing data to 'extraResponseData' through response object. 
    + added some more xml escaping to SRU response.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/4.0-beta1-Seecr/version_9

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_9/meresco/components/sru/sruhandler.py /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-beta1-Seecr/version_10/meresco/components/sru/sruhandler.py
--- version_9/meresco/components/sru/sruhandler.py	2011-11-30 15:10:54.000000000 +0100
+++ version_10/meresco/components/sru/sruhandler.py	2012-01-25 13:47:42.000000000 +0100
@@ -95,7 +95,7 @@
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, x_term_drilldown=x_term_drilldown, **kwargs)
-        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, **kwargs)
+        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, response=response, **kwargs)
         yield self._endResults()
 
     def _writeEchoedSearchRetrieveRequest(self, **kwargs):
@@ -140,10 +140,10 @@
 
     def _writeResult(self, recordSchema=None, recordPacking=None, recordId=None, version=None, **kwargs):
         yield '<srw:record>'
-        yield '<srw:recordSchema>%s</srw:recordSchema>' % recordSchema
-        yield '<srw:recordPacking>%s</srw:recordPacking>' % recordPacking
+        yield '<srw:recordSchema>%s</srw:recordSchema>' % xmlEscape(recordSchema)
+        yield '<srw:recordPacking>%s</srw:recordPacking>' % xmlEscape(recordPacking)
         if version == "1.2": 
-            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % recordId
+            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % xmlEscape(recordId)
         yield self._writeRecordData(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId)
         yield self._writeExtraRecordData(recordPacking=recordPacking, recordId=recordId, **kwargs)
         yield '</srw:record>'
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_9/test/sru/sruhandlertest.py /home/jurjanpaul/development/sf/meresco-components/workingsets/4.0-beta1-Seecr/version_10/test/sru/sruhandlertest.py
--- version_9/test/sru/sruhandlertest.py	2011-11-30 15:10:46.000000000 +0100
+++ version_10/test/sru/sruhandlertest.py	2012-01-25 13:47:41.000000000 +0100
@@ -41,8 +41,10 @@
 
 
 from StringIO import StringIO
+from lxml.etree import parse
 from cq2utils import CQ2TestCase, CallTrace
 from cqlparser import parseString
+from xml.sax.saxutils import quoteattr, escape as xmlEscape
 import traceback
 
 from weightless.core import compose
@@ -143,7 +145,7 @@
 
     def testMerescoLuceneDrilldown(self):
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
+        response = Response(total=100, hits=hitsRange(11, 26))
         drilldownData = iter([
             ('field0', iter([('value0_0', 14)])),
             ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
@@ -159,13 +161,15 @@
         component.addObserver(observer)
 
         result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
-        self.assertEquals(['executeQuery', 'docsetFromQuery', 'drilldown'], [m.name for m in observer.calledMethods][:3])
+        self.assertEquals(['executeQuery', 'docsetFromQuery', 'drilldown'] + ['yieldRecord'] * 15 + ['echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
         self.assertEquals('cqltree', observer.calledMethods[2].kwargs['docset'])
         self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[2].kwargs['fieldnamesAndMaximums']))
+        extraResponseDataMethod = observer.calledMethods[-1]
+        self.assertEquals(response, extraResponseDataMethod.kwargs['response'])
 
     def testDrilldownResultInExecuteQuery(self):
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
+        response = Response(total=100, hits=hitsRange(11, 26))
         drilldownData = iter([
             ('field0', iter([('value0_0', 14)])),
             ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
@@ -189,7 +193,7 @@
             raise Exception("Some Exception")
             yield "Some thing"
         observer.methods["drilldown"] = mockDrilldown
-        response = Response(total=100, hits=range(11, 26))
+        response = Response(total=100, hits=hitsRange(11, 26))
         observer.exceptions['executeQuery'] = StopIteration(response)
         sruHandler = SruHandler()
         sruHandler.addObserver(observer)
@@ -205,7 +209,7 @@
 
     def testNextRecordPosition(self):
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 26))
+        response = Response(total=100, hits=hitsRange(11, 26))
         observer.exceptions['executeQuery'] = StopIteration(response)
         observer.returnValues['yieldRecord'] = "record"
         observer.returnValues['extraResponseData'] = 'extraResponseData'
@@ -225,7 +229,7 @@
         arguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 13))
+        response = Response(total=100, hits=hitsRange(11, 13))
         observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
@@ -314,13 +318,13 @@
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore'], 'x_extra_key': 'extraValue'}
 
         observer = CallTrace()
-        response = Response(total=100, hits=range(11, 13))
+        response = Response(total=100, hits=['<aap&noot>', 'vuur'])
         observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
             yieldRecordCalls.append(1)
-            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (identifier, partname)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (xmlEscape(identifier), partname)
         observer.yieldRecord = yieldRecord
 
         observer.returnValues['extraResponseData'] = 'extraResponseData'
@@ -341,6 +345,10 @@
 
         self.assertEquals(6, sum(yieldRecordCalls))
 
+        resultXml = parse(StringIO(result))
+        ids = resultXml.xpath('//srw:recordIdentifier/text()', namespaces={'srw':"http://www.loc.gov/zing/srw/"})
+        self.assertEquals(['<aap&noot>', 'vuur'], ids)
+
         self.assertEqualsWS("""
 <srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
     <srw:version>1.2</srw:version>
@@ -349,23 +357,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>11</srw:recordIdentifier>
+            <srw:recordIdentifier>&lt;aap&amp;noot&gt;</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>11-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -373,23 +381,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>12</srw:recordIdentifier>
+            <srw:recordIdentifier>vuur</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>12-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>vuur-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -414,13 +422,13 @@
         self.assertEquals((), echoedExtraRequestDataMethod.args)
         self.assertEquals(set(['version', 'x_term_drilldown', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'x_extra_key']), set(echoedExtraRequestDataMethod.kwargs.keys()))
         self.assertEquals((), extraResponseDataMethod.args)
-        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'drilldownData', 'x_extra_key']), set(extraResponseDataMethod.kwargs.keys()))
+        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'response', 'drilldownData', 'x_extra_key']), set(extraResponseDataMethod.kwargs.keys()))
  
     def testExtraRecordDataOldStyle(self):
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        response = Response(total=100, hits=[11])
+        response = Response(total=100, hits=['11'])
         observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
@@ -513,3 +521,5 @@
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('diagnostic' in body, body)
 
+def hitsRange(*args):
+    return ['%s' % i for i in range(*args)]
