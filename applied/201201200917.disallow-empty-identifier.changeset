Changeset created on Fri Jan 20 09:17:57 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Empty identifiers in SruRecordUpdate and Venturi not allowed

   Empty identifiers in SruRecordUpdate and Venturi add/delete where not 
   checked. This is not allowed.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.27-Edurep/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/components/sru/srurecordupdate.py /vol/extra_disk/development/meresco-components/workingsets/3.4.27-Edurep/version_1/meresco/components/sru/srurecordupdate.py
--- version_0/meresco/components/sru/srurecordupdate.py	2012-01-20 09:09:15.000000000 +0100
+++ version_1/meresco/components/sru/srurecordupdate.py	2012-01-20 10:17:16.000000000 +0100
@@ -40,6 +40,8 @@
         try:
             updateRequest = bind_string(Body).updateRequest
             recordId = str(updateRequest.recordIdentifier)
+            if not recordId:
+                raise ValueError("Empty recordIdentifier not allowed.")
             prefix = "info:srw/action/1/"
             action = str(updateRequest.action)
             if action == prefix + "replace" or action == prefix + "create":
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/components/venturi.py /vol/extra_disk/development/meresco-components/workingsets/3.4.27-Edurep/version_1/meresco/components/venturi.py
--- version_0/meresco/components/venturi.py	2012-01-20 09:09:15.000000000 +0100
+++ version_1/meresco/components/venturi.py	2012-01-20 10:17:16.000000000 +0100
@@ -47,6 +47,8 @@
 
     def add(self, identifier, partname=None, lxmlNode=None):
         """should be obsoleted in favor of addDocumentPart"""
+        if not identifier:
+            raise ValueError("Empty identifier not allowed.")
         self.ctx.tx.locals['id'] = identifier
         for shouldPartname, partXPath in self._should:
             part = self._findPart(identifier, shouldPartname, lxmlNode, partXPath)
@@ -59,6 +61,8 @@
                 yield self.all.add(identifier=identifier, partname=couldPartname, lxmlNode=part)
 
     def delete(self, identifier):
+        if not identifier:
+            raise ValueError("Empty identifier not allowed.")
         self.ctx.tx.locals['id'] = identifier
         yield self.asyncdo.delete(identifier=identifier)
 
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/sru/srurecordupdatetest.py /vol/extra_disk/development/meresco-components/workingsets/3.4.27-Edurep/version_1/test/sru/srurecordupdatetest.py
--- version_0/test/sru/srurecordupdatetest.py	2012-01-20 09:09:15.000000000 +0100
+++ version_1/test/sru/srurecordupdatetest.py	2012-01-20 10:17:16.000000000 +0100
@@ -66,10 +66,10 @@
         self.observer = CallTrace("Observer")
         self.sruRecordUpdate.addObserver(self.observer)
 
-    def createRequestBody(self, action=CREATE, recordData="<dc>empty</dc>"):
+    def createRequestBody(self, action=CREATE, recordIdentifier="123", recordData="<dc>empty</dc>"):
         return XML % {
             "action": action,
-            "recordIdentifier": "123",
+            "recordIdentifier": recordIdentifier,
             "recordPacking": "text/xml",
             "recordSchema": "irrelevantXML",
             "recordData": recordData,
@@ -174,3 +174,31 @@
         self.assertEquals("info:srw/diagnostic/12/12", str(diag.updateResponse.diagnostics.diagnostic.uri))
         self.assertEquals("Some <Exception>", str(diag.updateResponse.diagnostics.diagnostic.details))
         self.assertEquals("Invalid data:  record rejected", str(diag.updateResponse.diagnostics.diagnostic.message))
+
+    def testEmptyIdentifierNotAccepted(self):
+        requestBody = self.createRequestBody(recordIdentifier="")
+        headers, result = self.performRequest(requestBody)
+        self.assertTrue("""<ucp:operationStatus>fail</ucp:operationStatus>""" in result, result)
+        diag = bind_string(result)
+        self.assertEquals("info:srw/diagnostic/12/1", str(diag.updateResponse.diagnostics.diagnostic.uri))
+        self.assertTrue("Empty recordIdentifier not allowed." in str(diag.updateResponse.diagnostics.diagnostic.details))
+        self.assertEquals("Invalid component:  record rejected", str(diag.updateResponse.diagnostics.diagnostic.message))
+
+    def testNoIdentifierNotAccepted(self):
+        requestBody = """<?xml version="1.0" encoding="UTF-8"?>
+<srw:updateRequest xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:ucp="info:lc/xmlns/update-v1">
+    <srw:version>1.0</srw:version>
+    <ucp:action>info:srw/action/1/%(action)s</ucp:action>
+    <srw:record>
+        <srw:recordPacking>xml</srw:recordPacking>
+        <srw:recordSchema>ascheme</srw:recordSchema>
+        <srw:recordData>some data</srw:recordData>
+    </srw:record>
+</srw:updateRequest>"""
+        headers, result = self.performRequest(requestBody)
+        self.assertTrue("""<ucp:operationStatus>fail</ucp:operationStatus>""" in result, result)
+        diag = bind_string(result)
+        self.assertEquals("info:srw/diagnostic/12/1", str(diag.updateResponse.diagnostics.diagnostic.uri))
+        self.assertTrue("no attribute \'recordIdentifier\'" in str(diag.updateResponse.diagnostics.diagnostic.details))
+        self.assertEquals("Invalid component:  record rejected", str(diag.updateResponse.diagnostics.diagnostic.message))
+
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/venturitest.py /vol/extra_disk/development/meresco-components/workingsets/3.4.27-Edurep/version_1/test/venturitest.py
--- version_0/test/venturitest.py	2012-01-20 09:09:15.000000000 +0100
+++ version_1/test/venturitest.py	2012-01-20 10:17:16.000000000 +0100
@@ -218,3 +218,35 @@
         self.assertEquals('<second>t&#8364;xt</second>', tostring(secondXml))
         self.assertEquals('t€xt', secondXml.getroot().text)
 
+    def testEmptyIdInAddNotAllowed(self):
+        __callstack_var_tx__ = CallTrace('Transaction')
+        __callstack_var_tx__.locals={}
+        inputEvent = fromstring("""<document><part name="partone">&lt;some&gt;t€xt&lt;/some&gt;\n\n\n\n</part><part name="parttwo"><second>t€xt</second>\n\n\n\n</part></document>""")
+        v = Venturi()
+        try:
+            list(compose(v.add('', 'document', inputEvent)))
+            self.fail("Should raise an exception")
+        except ValueError, e:
+            self.assertEquals("Empty identifier not allowed.", str(e))
+
+        try:
+            list(compose(v.add(None, 'document', inputEvent)))
+            self.fail("Should raise an exception")
+        except ValueError, e:
+            self.assertEquals("Empty identifier not allowed.", str(e))
+
+    def testEmptyIdInDeleteNotAllowed(self):
+        __callstack_var_tx__ = CallTrace('Transaction')
+        __callstack_var_tx__.locals={}
+        v = Venturi()
+        try:
+            list(compose(v.delete('')))
+            self.fail("Should raise an exception")
+        except ValueError, e:
+            self.assertEquals("Empty identifier not allowed.", str(e))
+
+        try:
+            list(compose(v.delete(None)))
+            self.fail("Should raise an exception")
+        except ValueError, e:
+            self.assertEquals("Empty identifier not allowed.", str(e))
