Changeset created on Mon Sep 24 13:04:17 UTC 2012 by Seecr (Seek You Too B.V.)

Description: PeriodicDownload error-logging improved

    On unexpected/error response, the whole response is logged to
    stderr, instead of status-line only.  Additionally, when an exception
    occurs at the handling of a response, the request and response
    are also logged.

Baseline version: 4.1.6

From c94b0c437b98d486d35e83c6ac862dc0e356a8c7 Mon Sep 17 00:00:00 2001
From: Tom van der Sommen <tom@seecr.nl>
Date: Mon, 24 Sep 2012 11:30:20 +0200
Subject: [PATCH 1/2] TS: PeriodicDownload now logs the full response of the unexpected/error-response, instead of statusline only.

- Pass through name init-param to Observable
- Removed _log method and deprecated verbose flag (didn't do anything)
---
 meresco/components/periodicdownload.py |   20 ++++++++------------
 test/periodicdownloadtest.py           |   15 +++++++++++++--
 2 files changed, 21 insertions(+), 14 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index 6283198..559945b 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -41,18 +41,20 @@ from weightless.core import compose, Yield
 from sys import stderr, stdout
 from time import time
 from tempfile import TemporaryFile
+from warnings import warn
+
 
 class PeriodicDownload(Observable):
-    def __init__(self, reactor, host, port, period=1, verbose=False, prio=None, err=None):
-        super(PeriodicDownload, self).__init__()
+    def __init__(self, reactor, host, port, period=1, verbose=None, prio=None, name=None, err=None):
+        super(PeriodicDownload, self).__init__(name=name)
         self._reactor = reactor
         self._host = host
         self._port = port 
         self._period = period
         self._prio = prio
         self._err = err or stderr
-        if not verbose:
-            self._log = lambda x: None
+        if verbose in [True, False]:
+            warn('Verbose flag is deprecated', DeprecationWarning)
 
     def observer_init(self):
         self.startTimer()
@@ -91,7 +93,7 @@ class PeriodicDownload(Observable):
             headers, body = response.split(2 * CRLF, 1)
             statusLine = headers.split(CRLF)[0]
             if not statusLine.strip().lower().endswith('200 ok'):
-                yield self._retryAfterError('Unexpected response: ' + statusLine, request=requestString)
+                yield self._retryAfterError('Unexpected response: ' + response, request=requestString)
                 return
 
             self._reactor.addProcess(self._processOne.next)
@@ -151,7 +153,7 @@ class PeriodicDownload(Observable):
         self._logError(message, request)
         self.startTimer(additionalTime=additionalTime)
         yield
-        
+
     def _logError(self, message, request=None):
         self._err.write("%s:%s: " % (self._host, self._port))
         self._err.write(message)
@@ -164,9 +166,3 @@ class PeriodicDownload(Observable):
                 self._err.write('\n')
         self._err.flush()
 
-    def _log(self, message):
-        stdout.write(message)
-        if not message.endswith('\n'):
-            stdout.write('\n')
-        stdout.flush()
-
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 5a661fc..acfddc5 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -37,6 +37,7 @@ from StringIO import StringIO
 from os.path import join
 
 from seecr.test import SeecrTestCase, CallTrace
+from seecr.test.io import stderr_replaced
 from weightless.core import be
 from weightless.io import  Suspend
 from meresco.core import Observable
@@ -127,9 +128,19 @@ class PeriodicDownloadTest(SeecrTestCase):
         self.assertEquals("addWriter", reactor.calledMethods[-1].name)
         self.assertEquals("localhost:8899: error in sockopt\n", downloader._err.getvalue()) # remains 1 error
  
+    def testVerboseDeprecationWarning(self):
+        with stderr_replaced() as s:
+            PeriodicDownload(reactor='x', host='x', port='x')
+            result = s.getvalue()
+            self.assertEquals('', result)
+
+        with stderr_replaced() as s:
+            PeriodicDownload(reactor='x', host='x', port='x', verbose=True)
+            result = s.getvalue()
+            self.assertTrue('DeprecationWarning: Verbose flag is deprecated' in result, result)
 
     def testErrorResponse(self):
-        with server(['HTTP/1.0 400 Error\r\n\r\nIllegal Request']) as (port, msgs):
+        with server(['HTTP/1.0 400 Error\r\nContent-Type: text/plain\r\n\r\nIllegal Request']) as (port, msgs):
             downloader, observer, reactor = self.getDownloader("localhost", port)
             callback = reactor.calledMethods[0].args[1]
             callback() # connect
@@ -141,7 +152,7 @@ class PeriodicDownloadTest(SeecrTestCase):
 
             callback() # yield After Error 
 
-            self.assertEquals("localhost:%d: Unexpected response: HTTP/1.0 400 Error\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % port, downloader._err.getvalue())
+            self.assertEquals("localhost:%d: Unexpected response: HTTP/1.0 400 Error\r\nContent-Type: text/plain\r\n\r\nIllegal Request\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % port, downloader._err.getvalue())
             self.assertEquals(['buildRequest'], [m.name for m in observer.calledMethods])
             self.assertReactorState(reactor)
 
-- 
1.7.2.5


From 5529d5ae671130ccab614f7f8e81c6b2d9a1e57f Mon Sep 17 00:00:00 2001
From: Tom van der Sommen <tom@seecr.nl>
Date: Mon, 24 Sep 2012 14:51:05 +0200
Subject: [PATCH 2/2] JPM/TS: on exception in PeriodicDownload's self.all.handle(...) print HTTP response and request too.

---
 meresco/components/periodicdownload.py |   12 ++++---
 test-deps.txt                          |    2 +-
 test/periodicdownloadtest.py           |   48 ++++++++++++++++++++++++++++++++
 3 files changed, 56 insertions(+), 6 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index 559945b..ed996f4 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -101,18 +101,20 @@ class PeriodicDownload(Observable):
             try:
                 gen = self.all.handle(data=body)
                 g = compose(gen)
-                for response  in g:
-                    if callable(response) and not response is Yield:
-                        response(self._reactor, self._processOne.next)
+                for _response  in g:
+                    if callable(_response) and not _response is Yield:
+                        _response(self._reactor, self._processOne.next)
                         yield
-                        response.resumeProcess()
+                        _response.resumeProcess()
                     yield
             finally:
                 self._reactor.removeProcess()
         except (AssertionError, KeyboardInterrupt, SystemExit), e:
             raise
         except Exception:
-            self._logError(format_exc())
+            message = format_exc()
+            message += 'Error while processing response: ' + response
+            self._logError(message, request=requestString)
         self.startTimer()
         yield
 
diff --git a/test-deps.txt b/test-deps.txt
index 4a5af8e..7b4d3e8 100644
--- a/test-deps.txt
+++ b/test-deps.txt
@@ -1,2 +1,2 @@
-seecr-test (>= 1.2.10)
+seecr-test (>= 1.2.11)
 seecr-test (<< 1.3)
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index acfddc5..859b2ae 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -38,12 +38,22 @@ from os.path import join
 
 from seecr.test import SeecrTestCase, CallTrace
 from seecr.test.io import stderr_replaced
+from seecr.test.utils import ignoreLineNumbers
+
 from weightless.core import be
 from weightless.io import  Suspend
+
 from meresco.core import Observable
+
 from meresco.components.http.utils import CRLF
 from meresco.components import PeriodicDownload
 
+def _dunderFile(): pass
+fileDict = {
+    '__file__': _dunderFile.func_code.co_filename,
+    'periodicdownload.py': PeriodicDownload.__init__.func_code.co_filename,
+}
+
 DROP_CONNECTION = object()
 
 @contextmanager
@@ -237,6 +247,43 @@ class PeriodicDownloadTest(SeecrTestCase):
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
             self.assertReactorState(reactor)
 
+    def testRaiseInHandle(self):
+        def handleGenerator():
+            yield 'first'
+            raise Exception('xcptn')
+            yield
+
+        with server([RESPONSE_ONE_RECORD]) as (port, msgs):
+            downloader, observer, reactor = self.getDownloader("localhost", port, handleGenerator=handleGenerator())
+            callback = self.doConnect() # _processOne.next
+            callback() # _processOne.next -> HTTP GET
+            self.assertEquals('buildRequest', observer.calledMethods[0].name)
+            sleep(0.01)
+            self.assertEquals(['GET /path?argument=value HTTP/1.0\r\n\r\n'], msgs) # message received, getting response
+            callback() # _processOne.next -> sok.recv
+            callback() # _processOne.next -> recv = ''; then addProcess
+            callback() # first self.all.handle(data=body) -> 1st response
+
+            result = downloader._err.getvalue()
+            self.assertEquals('', result)
+
+            callback() # 2nd response / raise Exception(...)
+            result = downloader._err.getvalue()
+            self.assertTrue('Traceback' in result, result)
+            expected =  ignoreLineNumbers("""localhost:%(port)s: Traceback (most recent call last):
+  File "%%(periodicdownload.py)s", line 104, in processOne
+    for _response  in g:
+  File "%%(__file__)s", line 243, in handleGenerator
+    raise Exception('xcptn')
+Exception: xcptn
+Error while processing response: HTTP/1.0 200 OK \r\n\r\n<aap:noot xmlns:aap="mies"><record>ignored</record></aap:noot>
+For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fileDict)
+            self.assertEquals(expected, ignoreLineNumbers(result))
+
+            self.assertEquals('removeProcess', reactor.calledMethods[-2].name)
+            self.assertEquals('addTimer', reactor.calledMethods[-1].name)
+            self.assertReactorState(reactor)
+
     def testAssertionErrorReraised(self):
         with server([RESPONSE_TWO_RECORDS]) as (port, msgs):
             downloader, observer, reactor = self.getDownloader("localhost", port)
@@ -369,6 +416,7 @@ class PeriodicDownloadTest(SeecrTestCase):
                 len([n for n in names if n == 'remove%s' % what]), 
                 'Expected same amount of add and remove for %s' % what)
 
+
 HTTP_SEPARATOR = 2 * CRLF
 STATUSLINE = """HTTP/1.0 200 OK """ + HTTP_SEPARATOR
 STATUSLINE_ALTERNATIVE = """HTTP/1.1 200 ok """ + HTTP_SEPARATOR
-- 
1.7.2.5

