Changeset created on Mon Nov 07 15:23:04 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Taking care of unexpected 'tail' attribute on xpath result node.

    libxml2/lxml deliberately keep text nodes (usually whitespace) after an element node 
    with that element node. In xslt processing this sometimes causes aborts.
    By getting rid of this tail (that was unwanted in the first place) these aborts 
    can be prevented.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.20-Natag/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xmlxpath.py version_1/meresco/components/xmlxpath.py
--- version_0/meresco/components/xmlxpath.py	2011-11-07 14:14:50.000000000 +0100
+++ version_1/meresco/components/xmlxpath.py	2011-11-07 16:20:48.000000000 +0100
@@ -27,6 +27,7 @@
 #
 ## end license ##
 
+from copy import copy
 from meresco.core import Observable
 from lxml.etree import ElementTree, _ElementTree as ElementTreeType, parse
 from StringIO import StringIO
@@ -79,4 +80,9 @@
                 if type(element) in [_ElementStringResult, _ElementUnicodeResult]:
                     yield element
                 else:
-                    yield ElementTree(element)
+                    yield self._buildNewTree(element)
+
+    def _buildNewTree(self, element):
+        newElement = copy(element)
+        newElement.tail = None
+        return ElementTree(newElement)
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xmlxpathtest.py version_1/test/xmlxpathtest.py
--- version_0/test/xmlxpathtest.py	2011-11-07 14:14:49.000000000 +0100
+++ version_1/test/xmlxpathtest.py	2011-11-07 16:20:48.000000000 +0100
@@ -41,7 +41,6 @@
 class XmlXPathTest(CQ2TestCase):
 
     def createXmlXPath(self, xpathList, nsMap):
-        self.observable = Observable()
         self.observer = CallTrace('observer',ignoredAttributes=['start'] )
         self.observable = be(
             (Observable(),
@@ -73,7 +72,8 @@
     def testSimpleXPath(self):
         self.createXmlXPath(['/root/path'], {})
 
-        self.observable.do.test('een tekst', data='<root><path><to>me</to></path></root>')
+        xml = '<root><path><to>me</to></path>\n</root>'
+        self.observable.do.test('een tekst', data=xml)
 
         self.assertEquals(1, len(self.observer.calledMethods))
         method = self.observer.calledMethods[0]
@@ -81,6 +81,7 @@
         self.assertEquals(1, len(method.args))
         self.assertEquals('een tekst', method.args[0])
         self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
+        self.assertEquals('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
 
     def testSimpleXPathWithUnicodeChars(self):
         self.createXmlXPath(['/root/text()'], {})
@@ -165,7 +166,7 @@
         except AssertionError, e:
             self.assertEquals('Can only handle one ElementTree in argument list.', str(e))
 
-    def testDoNotChangesArgs(self):
+    def testDoNotChangeArgs(self):
         xmlXPath = XmlXPath(['/a'])
         arg = parse(StringIO('<a>a</a>'))
         xmlXPath.unknown('message', arg)
@@ -239,3 +240,39 @@
         result = observer.calledMethods[0].kwargs
         self.assertEquals({'lxmlNode': 'some text & some <entities>'}, result)
 
+    def testTailTakeCareOfWithoutAffectingOriginal(self):
+        observer = CallTrace('observer')
+        observable = be(
+            (Observable(),
+                (XmlXPath(
+                        ['/myns:root/myns:path'],
+                        {'myns': 'http://myns.org/'}
+                    ),
+                    (observer, ),
+                )
+            )
+        )
+
+        XML = """\
+<root xmlns:myns="http://myns.org/" xmlns="http://myns.org/">
+    <myns:path>
+        <to>me</to>
+    </myns:path>\n
+</root>"""
+
+        lxmlNode = parse(StringIO(XML))
+        self.assertEquals(XML, tostring(lxmlNode))
+        list(observable.all.test('een tekst', lxmlNode=lxmlNode))
+
+        self.assertEquals(1, len(observer.calledMethods))
+        method = observer.calledMethods[0]
+        self.assertEquals('test', method.name)
+        self.assertEqualsWS('<myns:path xmlns:myns="http://myns.org/" xmlns="http://myns.org/"><to>me</to></myns:path>', tostring(method.kwargs['lxmlNode']))
+        self.assertEquals("""\
+<myns:path xmlns:myns="http://myns.org/" xmlns="http://myns.org/">
+        <to>me</to>
+    </myns:path>""", tostring(method.kwargs['lxmlNode']))
+
+        self.assertEquals(XML, tostring(lxmlNode))
+
+
