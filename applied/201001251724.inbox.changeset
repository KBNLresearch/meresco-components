Changeset created on Mon Jan 25 17:24:47 CET 2010 by Seek You Too

Description: Copied inbox from TUD

Baseline version: meresco-components/workingsets/2.21.4-TUD/version_2

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocomponents/facetindex/docset.py version_2-inbox/merescocomponents/facetindex/docset.py
--- version_2/merescocomponents/facetindex/docset.py	2010-01-25 17:19:01.957034553 +0100
+++ version_2-inbox/merescocomponents/facetindex/docset.py	2010-01-25 17:24:16.384970871 +0100
@@ -150,7 +150,8 @@
     def add(self, doc):
         l = DocSet_len(self)
         if l > 0 and doc <= DocSet_get(self, l-1):
-            raise Exception('non-increasing docid: %d must be > %d' % (doc, l))
+            lastDoc = DocSet_get(self, l-1)
+            raise Exception('non-increasing docid: %d must be > %d, (length %d)' % (doc, lastDoc, l))
         DocSet_add(self._cobj, doc)
 
     def merge(self, anotherDocSet):
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocomponents/facetindex/lucene.py version_2-inbox/merescocomponents/facetindex/lucene.py
--- version_2/merescocomponents/facetindex/lucene.py	2010-01-25 17:19:01.963033560 +0100
+++ version_2-inbox/merescocomponents/facetindex/lucene.py	2010-01-25 17:24:16.390969877 +0100
@@ -50,9 +50,35 @@
     def tokenStream(self, fieldName, reader):
         return LowerCaseFilter(StandardFilter(StandardTokenizer(reader)))
 
+class _Logger(object):
+    def comment(self, *strings):
+        self.writeLine('# ', *strings)
+    def delete(self, identifier):
+        self.writeLine('-', identifier)
+    def add(self, identifier):
+        self.writeLine('+', identifier)
+    def commit(self):
+        self.writeLine('=')
+
+class DebugLogger(_Logger):
+    def __init__(self, filename):
+        self._file = open(filename, 'w')
+
+    def writeLine(self, *strings):
+        for aString in strings:
+            self._file.write(str(aString))
+        self._file.write('\n')
+
+    def flush(self):
+        self._file.flush()
+
+class DevNullLogger(_Logger):
+    def writeLine(self, *args):
+        pass
+
 class LuceneIndex(Observable):
 
-    def __init__(self, directoryName, transactionName=None):
+    def __init__(self, directoryName, transactionName=None, debugLogFilename=None):
         Observable.__init__(self)
         self._searcher = None
         self._reader = None
@@ -77,6 +103,10 @@
         maxDoc = self.docCount() if optimized else 0
         self._currentTracker = LuceneDocIdTracker(mergeFactor, directory=self._directoryName, maxDoc=maxDoc)
         self._lucene2docId = self._currentTracker.getMap()
+        self._debugLog = DevNullLogger() if debugLogFilename == None else DebugLogger(debugLogFilename)
+        self._debugLog.comment('Debug Log for LuceneIndex')
+        self._debugLog.comment('directoryName = ', repr(directoryName))
+        self._debugLog.comment('transactionName = ', transactionName)
 
     def getDocIdMapping(self):
         return self._lucene2docId
@@ -144,9 +174,11 @@
                 self.do.deleteDocument(docId=docId)
 
     def delete(self, identifier):
+        self._debugLog.delete(identifier)
         self._luceneDelete(identifier)
 
     def addDocument(self, luceneDocument=None):
+        self._debugLog.add(luceneDocument.identifier)
         try:
             luceneDocument.validate()
             self._luceneDelete(luceneDocument.identifier)
@@ -163,6 +195,7 @@
             self.ctx.tx.join(self)
 
     def commit(self):
+        self._debugLog.commit()
         if len(self._commandQueue) == 0:
             return
         for command in self._commandQueue:
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocomponents/inbox.py version_2-inbox/merescocomponents/inbox.py
--- version_2/merescocomponents/inbox.py	1970-01-01 01:00:00.000000000 +0100
+++ version_2-inbox/merescocomponents/inbox.py	2010-01-25 17:24:16.440961600 +0100
@@ -0,0 +1,76 @@
+from merescocore.framework import Observable
+
+from cq2utils import DirectoryWatcher
+from lxml.etree import parse
+
+from os.path import join, isdir
+from os import rename, listdir
+from traceback import format_exc
+
+class InboxException(Exception):
+    pass
+
+class Inbox(Observable):
+    """
+    Inbox monitors a directory for files XML files being moved into it.  Each
+    file moved into the directory is assumed to be in XML format.  It is read,
+    parsed (using lxml) and passed on to the observers of Inbox using
+    self.do.add(identifier=filename, lxmlNode=<parsed xml>). When the add()
+    calls succeeds, the file is moved to another directory.
+
+    Parameters
+
+    Both the inbox directory and the done directory are taken as parameters from
+    the constructor (__init__).  It is strongly recommended to put both
+    directories on the same file system, so the move is atomic and does not
+    incur data copying.
+
+    Errors
+
+    When an error occured, the file causing the error is also moved to the done
+    directory, but an .error file is written next to it.  This file contains
+    a complete stacktrace of the error.
+
+    Notes
+
+    The Inbox intentionally only listens to move events.  This avoids reading
+    partial files that are still being written to.  The move operation is atomic
+    and makes sure that the events of putting something into the inbox and
+    reading it are serialized.  NOTE: move files into the inbox only from the
+    same file system to keep it atomicity property.
+
+    When the system starts up, the Inbox does not generate events for files that
+    are already in the inbox directory.  This avoids uncontrolled bursts.
+    Instead, when there are still files in the inbox when the system is
+    restarted, either move them out and than back into the directory.
+    Alternatively, one could use the method processInboxDirectory() to generate
+    events for existing files programmatically.
+    """
+    def __init__(self, reactor=None, inboxDirectory='', doneDirectory=''):
+        Observable.__init__(self)
+
+        if not isdir(inboxDirectory):
+            raise InboxException("directory %s does not exist" % inboxDirectory)
+
+        if not isdir(doneDirectory):
+            raise InboxException("directory %s does not exist" % doneDirectory)
+
+        self._inboxDirectory = inboxDirectory
+        self._doneDirectory = doneDirectory
+        self._watcher = DirectoryWatcher(self._inboxDirectory, self._processEvent, MoveInFile=True)
+        reactor.addReader(self._watcher, self._watcher)
+
+    def processInboxDirectory(self):
+        for filename in listdir(self._inboxDirectory):
+            self.processFile(filename)
+
+    def _processEvent(self, event):
+        self.processFile(event.name)
+
+    def processFile(self, filename):
+        try:
+            lxmlNode = parse(open(join(self._inboxDirectory, filename)))
+            self.do.add(identifier=filename, lxmlNode=lxmlNode)
+        except Exception, e:
+            open(join(self._doneDirectory, filename + ".error"), 'w').write(format_exc(limit=7))
+        rename(join(self._inboxDirectory, filename), join(self._doneDirectory, filename))
\ No newline at end of file
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/merescocomponents/web/webquery.py version_2-inbox/merescocomponents/web/webquery.py
--- version_2/merescocomponents/web/webquery.py	2010-01-25 17:19:01.967032898 +0100
+++ version_2-inbox/merescocomponents/web/webquery.py	2010-01-25 17:24:16.434962593 +0100
@@ -49,8 +49,13 @@
         boolean = _feelsLikeBooleanQuery(aString)
         self._needsHelp = boolean and plusminus
         if plusminus and not boolean:
-            self._kind = PLUSMINUS_KIND
-            self.ast = parseString(_plusminus2Cql(aString, antiUnaryClause))
+            try:
+                self._kind = PLUSMINUS_KIND
+                self.ast = parseString(_plusminus2Cql(aString, antiUnaryClause))
+            except CQLParseException:
+                self._needsHelp = True
+                self._kind = DEFAULT_KIND
+                self.ast = parseString(_default2CqlWithQuotes(aString, antiUnaryClause=antiUnaryClause))
         elif boolean and not plusminus:
             try:
                 self._kind = BOOLEAN_KIND
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/alltests.py version_2-inbox/test/alltests.py
--- version_2/test/alltests.py	2010-01-25 17:19:01.875048129 +0100
+++ version_2-inbox/test/alltests.py	2010-01-25 17:24:15.728079642 +0100
@@ -1,4 +1,5 @@
 #!/usr/bin/env python2.5
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -89,6 +90,8 @@
 
 from web.webquerytest import WebQueryTest
 
+from inboxtest import InboxTest
+
 if __name__ == '__main__':
     unittest.main()
     os.system('find .. -name "*.pyc" | xargs rm -f')
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/facetindex/docsettest.py version_2-inbox/test/facetindex/docsettest.py
--- version_2/test/facetindex/docsettest.py	2010-01-25 17:19:01.871048791 +0100
+++ version_2-inbox/test/facetindex/docsettest.py	2010-01-25 17:24:11.989698658 +0100
@@ -77,6 +77,16 @@
         i.add(10)
         self.assertEquals([0,1,2,3,4,  6,7,8,9,10], i)
 
+    def testAddRaisesException(self):
+        i = DocSet(xrange(10))
+        try:
+            i.add(9)
+            self.fail()
+        except AssertionError:
+            raise
+        except Exception, e:
+            self.assertTrue('non-increasing' in str(e))
+
     def assertIntersect(self, lhs, rhs):
         soll = set(lhs).intersection(set(rhs))
         intersection1 = DocSet(lhs).intersect(DocSet(rhs))
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/facetindex/lucenetest.py version_2-inbox/test/facetindex/lucenetest.py
--- version_2/test/facetindex/lucenetest.py	2010-01-25 17:19:01.869049122 +0100
+++ version_2-inbox/test/facetindex/lucenetest.py	2010-01-25 17:24:11.988698823 +0100
@@ -508,3 +508,24 @@
         self._luceneIndex._reopenIndex = reopenIndex
         self._luceneIndex.commit()
         self.assertEquals([], reopenIndexCalled)
+
+    def testDebugLog(self):
+        logfilename = join(self.tempdir, 'logfilename')
+        self._luceneIndex.close()
+        self._luceneIndex = LuceneIndex(directoryName=join(self.tempdir, 'index'), debugLogFilename=logfilename)
+        self.addDocument('1', field0='value0')
+        self.addDocument('2', field0='value0')
+        self._luceneIndex.delete('3')
+        self.addDocument('4', field0='value0')
+        self._luceneIndex.commit()
+        self._luceneIndex._debugLog.flush()
+        self.assertEqualsWS("""# Debug Log for LuceneIndex
+# directoryName = '%s/index'
+# transactionName = None
++1
++2
+-3
++4
+=
+""" % self.tempdir, open(logfilename).read()) 
+
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/inboxtest.py version_2-inbox/test/inboxtest.py
--- version_2/test/inboxtest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_2-inbox/test/inboxtest.py	2010-01-25 17:24:15.729079476 +0100
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+from cq2utils import CQ2TestCase, CallTrace
+
+from merescocore.framework import be, Transparant
+
+from weightless import Reactor
+
+from os.path import join, isfile
+from os import makedirs, rename, listdir
+from lxml.etree import tostring
+
+from merescocomponents.inbox import Inbox, InboxException
+
+class InboxTest(CQ2TestCase):
+
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+        self.reactor = Reactor()
+        self.observer = CallTrace('Observer')
+        self.inboxDirectory = join(self.tempdir, 'inbox')
+        self.doneDirectory = join(self.tempdir, 'done')
+        makedirs(self.inboxDirectory)
+        makedirs(self.doneDirectory)
+        self.inbox = Inbox(self.reactor, inboxDirectory=self.inboxDirectory, doneDirectory=self.doneDirectory)
+        self.inbox.addObserver(self.observer)
+
+    def testCheckDirectoriesOnCreate(self):
+        try:
+            Inbox(CallTrace('Reactor'), inboxDirectory="/no_such_inbox", doneDirectory="/tmp")
+            self.fail()
+        except InboxException, e:
+            self.assertEquals("directory /no_such_inbox does not exist", str(e))
+
+        try:
+            Inbox(CallTrace('Reactor'), inboxDirectory="/tmp", doneDirectory="/no_such_done")
+            self.fail()
+        except InboxException, e:
+            self.assertEquals("directory /no_such_done does not exist", str(e))
+
+    def testMovedInFileTriggersThings(self):
+        events = []
+        self.inbox.processFile = lambda event: events.append(event)
+
+        self.moveInRecord('repository:some:identifier:1')
+        self.reactor.step()
+        self.assertEquals(1, len(events))
+        self.assertEquals("repository:some:identifier:1.record", events[0])
+
+
+    def testProcessedGetsMovedToDone(self):
+        self.moveInRecord(identifier='repository:some:identifier:1')
+
+        self.assertEquals(0, len(self.observer.calledMethods))
+        self.assertTrue(isfile(join(self.inboxDirectory, 'repository:some:identifier:1.record')))
+        self.assertFalse(isfile(join(self.doneDirectory, 'repository:some:identifier:1.record')))
+        self.reactor.step()
+        self.assertEquals(1, len(self.observer.calledMethods))
+        self.assertFalse(isfile(join(self.inboxDirectory, 'repository:some:identifier:1.record')))
+        self.assertTrue(isfile(join(self.doneDirectory, 'repository:some:identifier:1.record')))
+
+    def testProcessRecordsOnCommand(self):
+        self.inboxDirectory = join(self.tempdir, 'inbox2')
+        self.doneDirectory = join(self.tempdir, 'done2')
+        makedirs(self.inboxDirectory)
+        makedirs(self.doneDirectory)
+
+        self.moveInRecord(identifier='repo:ident:1')
+        self.moveInRecord(identifier='repo:ident:2')
+        self.moveInRecord(identifier='repo:ident:3')
+        inbox = Inbox(self.reactor, inboxDirectory=self.inboxDirectory, doneDirectory=self.doneDirectory)
+        dna = be(
+            (Transparant(),
+                (inbox,)
+            )
+        )
+        dna.once.observer_init()
+        self.assertEquals(set(['repo:ident:1.record', 'repo:ident:2.record', 'repo:ident:3.record']), set(listdir(self.inboxDirectory)))
+
+        inbox.processInboxDirectory()
+
+        self.assertEquals(set(['repo:ident:1.record', 'repo:ident:2.record', 'repo:ident:3.record']), set(listdir(self.doneDirectory)))
+
+
+    def testErrorHandling(self):
+        self.moveInRecord(identifier='repo:identifier:1')
+
+        def mockedAddCall(identifier=None, name=None, lxmlNode=None):
+            result = 1/0
+
+        self.observer.add = mockedAddCall
+
+        self.reactor.step()
+        self.assertFalse(isfile(join(self.inboxDirectory, 'repo:identifier:1.record')))
+        self.assertTrue(isfile(join(self.doneDirectory, 'repo:identifier:1.record')))
+        errorFile = join(self.doneDirectory, 'repo:identifier:1.record.error')
+        self.assertTrue(isfile(errorFile))
+
+        errorMessage = open(errorFile).read()
+        self.assertTrue(errorMessage.startswith("Traceback (most recent call last):"))
+        self.assertTrue(errorMessage.endswith("ZeroDivisionError: integer division or modulo by zero\n"), errorMessage)
+
+    def testNoXmlFile(self):
+        identifier = 'repository:record'
+        self.moveInRecord(identifier=identifier, data='this is no xml')
+        self.reactor.step()
+        errorFile = join(self.doneDirectory, identifier+'.record.error')
+        self.assertTrue(isfile(errorFile))
+        self.assertFalse(isfile(join(self.inboxDirectory, identifier+'.record')))
+        self.assertTrue('Start tag expected' in open(errorFile).read())
+
+    def moveInRecord(self, identifier, data="<record/>"):
+        filename = join(self.tempdir, identifier+".record")
+        open(filename, 'w').write(data)
+        rename(filename, join(self.inboxDirectory, identifier+".record"))
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified version_2/test/web/webquerytest.py version_2-inbox/test/web/webquerytest.py
--- version_2/test/web/webquerytest.py	2010-01-25 17:19:01.875048129 +0100
+++ version_2-inbox/test/web/webquerytest.py	2010-01-25 17:24:11.994697830 +0100
@@ -124,23 +124,10 @@
         self.assertFalse(_feelsLikeBooleanQuery('-label="cat +cheese"'))
         self.assertTrue(_feelsLikeBooleanQuery('water +(rain or snow)'))
 
-    def _assertQuery(self, expected, input, boolean=False, plusminus=False, default=False, needsBooleanHelp=False, asString=None):
-        input = expected if input == None else input
-        asString = expected if asString == None else asString
-        wq = WebQuery(input, antiUnaryClause='antiunary exact true')
-        self.assertEquals((boolean, plusminus, default, needsBooleanHelp), (wq.isBooleanQuery(), wq.isPlusMinusQuery(), wq.isDefaultQuery(), wq.needsBooleanHelp()))
-        self.assertEquals(parseCql(expected), wq.ast)
-        self.assertEquals(asString, wq.asString())
-        self.assertEquals(input, wq.original)
-
-    def assertDefaultQuery(self, expected, input=None, needsBooleanHelp = False, asString=None):
-        self._assertQuery(expected, input, default=True, needsBooleanHelp=needsBooleanHelp, asString=asString)
+    def testWrongQueries(self):
+        self.assertDefaultQuery('+', needsBooleanHelp=True)
+        self.assertDefaultQuery('-', needsBooleanHelp=True)
 
-    def assertPlusMinusQuery(self, expected, input, asString=None):
-        self._assertQuery(expected, input, plusminus=True, asString=asString)
-
-    def assertBooleanQuery(self, expected, input=None, asString=None):
-        self._assertQuery(expected, input, boolean=True, asString=asString)
 
     def testReportedProblemWithGoogleLikeQuery(self):
         self.assertDefaultQuery('fiscal AND OR AND "(market" AND "municipalities)"', 'fiscal OR (market municipalities)', needsBooleanHelp=True)
@@ -215,3 +202,22 @@
 
     def assertCql(self, expected, input):
         self.assertEquals(expected, input, '%s != %s' %(expected.prettyPrint(), input.prettyPrint()))
+
+    def _assertQuery(self, expected, input, boolean=False, plusminus=False, default=False, needsBooleanHelp=False, asString=None):
+        input = expected if input == None else input
+        asString = expected if asString == None else asString
+        wq = WebQuery(input, antiUnaryClause='antiunary exact true')
+        self.assertEquals((boolean, plusminus, default, needsBooleanHelp), (wq.isBooleanQuery(), wq.isPlusMinusQuery(), wq.isDefaultQuery(), wq.needsBooleanHelp()))
+        self.assertEquals(parseCql(expected), wq.ast)
+        self.assertEquals(asString, wq.asString())
+        self.assertEquals(input, wq.original)
+
+    def assertDefaultQuery(self, expected, input=None, needsBooleanHelp = False, asString=None):
+        self._assertQuery(expected, input, default=True, needsBooleanHelp=needsBooleanHelp, asString=asString)
+
+    def assertPlusMinusQuery(self, expected, input, asString=None):
+        self._assertQuery(expected, input, plusminus=True, asString=asString)
+
+    def assertBooleanQuery(self, expected, input=None, asString=None):
+        self._assertQuery(expected, input, boolean=True, asString=asString)
+
