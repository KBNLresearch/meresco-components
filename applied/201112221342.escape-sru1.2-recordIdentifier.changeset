Changeset created on Thu Dec 22 13:42:28 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Escape sru1.2 recordIdentifier

    Properly xml escape returned recordIdentifier in SRU 1.2 SearchRetrieveResponse

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.24-Edurep/version_0

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/meresco/components/sru/sruhandler.py version_1/meresco/components/sru/sruhandler.py
--- version_0/meresco/components/sru/sruhandler.py	2011-12-22 14:40:15.000000000 +0100
+++ version_1/meresco/components/sru/sruhandler.py	2011-12-22 14:42:18.000000000 +0100
@@ -121,10 +121,10 @@
 
     def _writeResult(self, recordSchema=None, recordPacking=None, recordId=None, version=None, **kwargs):
         yield '<srw:record>'
-        yield '<srw:recordSchema>%s</srw:recordSchema>' % recordSchema
-        yield '<srw:recordPacking>%s</srw:recordPacking>' % recordPacking
+        yield '<srw:recordSchema>%s</srw:recordSchema>' % xmlEscape(recordSchema)
+        yield '<srw:recordPacking>%s</srw:recordPacking>' % xmlEscape(recordPacking)
         if version == "1.2": 
-            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % recordId
+            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % xmlEscape(recordId)
         yield self._writeRecordData(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId)
         yield self._writeExtraRecordData(recordPacking=recordPacking, recordId=recordId, **kwargs)
         yield '</srw:record>'
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_0/test/sru/sruhandlertest.py version_1/test/sru/sruhandlertest.py
--- version_0/test/sru/sruhandlertest.py	2011-12-22 14:40:14.000000000 +0100
+++ version_1/test/sru/sruhandlertest.py	2011-12-22 14:42:18.000000000 +0100
@@ -40,8 +40,10 @@
 
 
 from StringIO import StringIO
+from lxml.etree import parse
 from cq2utils import CQ2TestCase, CallTrace
 from cqlparser import parseString
+from xml.sax.saxutils import quoteattr, escape as xmlEscape
 import traceback
 
 from weightless.core import compose
@@ -144,7 +146,7 @@
 
     def testNextRecordPosition(self):
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 26))
+        observer.returnValues['executeCQL'] = (100, hitsRange(11, 26))
         observer.returnValues['yieldRecord'] = "record"
         observer.returnValues['extraResponseData'] = 'extraResponseData'
         observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
@@ -163,7 +165,7 @@
         arguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 13))
+        observer.returnValues['executeCQL'] = (100, hitsRange(11, 13))
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
@@ -251,12 +253,12 @@
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore'], 'x_extra_key': 'extraValue'}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 13))
+        observer.returnValues['executeCQL'] = (100, ['<aap&noot>', 'vuur'])
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
             yieldRecordCalls.append(1)
-            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (identifier, partname)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (xmlEscape(identifier), partname)
         observer.yieldRecord = yieldRecord
 
         observer.returnValues['extraResponseData'] = 'extraResponseData'
@@ -279,6 +281,10 @@
 
         self.assertEquals(6, sum(yieldRecordCalls))
 
+        resultXml = parse(StringIO(result))
+        ids = resultXml.xpath('//srw:recordIdentifier/text()', namespaces={'srw':"http://www.loc.gov/zing/srw/"})
+        self.assertEquals(['<aap&noot>', 'vuur'], ids)
+
         self.assertEqualsWS("""
 <srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
     <srw:version>1.2</srw:version>
@@ -287,23 +293,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>11</srw:recordIdentifier>
+            <srw:recordIdentifier>&lt;aap&amp;noot&gt;</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>11-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>11-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>&lt;aap&amp;noot&gt;-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -311,23 +317,23 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
-            <srw:recordIdentifier>12</srw:recordIdentifier>
+            <srw:recordIdentifier>vuur</srw:recordIdentifier>
             <srw:recordData>
-                <MOCKED_WRITTEN_DATA>12-schema</MOCKED_WRITTEN_DATA>
+                <MOCKED_WRITTEN_DATA>vuur-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
             <srw:extraRecordData>
                 <srw:record>
                     <srw:recordSchema>extra</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-extra</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-extra</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
                 <srw:record>
                     <srw:recordSchema>evenmore</srw:recordSchema>
                     <srw:recordPacking>xml</srw:recordPacking>
                     <srw:recordData>
-                    <MOCKED_WRITTEN_DATA>12-evenmore</MOCKED_WRITTEN_DATA>
+                    <MOCKED_WRITTEN_DATA>vuur-evenmore</MOCKED_WRITTEN_DATA>
                     </srw:recordData>
                 </srw:record>
             </srw:extraRecordData>
@@ -358,7 +364,7 @@
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, [11])
+        observer.returnValues['executeCQL'] = (100, ['11'])
 
         yieldRecordCalls = []
         def yieldRecord(identifier, partname):
@@ -449,3 +455,5 @@
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('diagnostic' in body)
 
+def hitsRange(*args):
+    return ['%s' % i for i in range(*args)]
