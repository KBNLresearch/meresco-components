Changeset created on Thu Nov 22 10:43:24 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Correct order of details and message for creating diagnostics

    The diagnostics created in SruHandler had the details as message and the 
    message as details. This is solved with a helper method in diagnostics. 
    All diagnostics created in de SruParser are correct.

Baseline version: 4.3.9

From 3124cf8d45bf3200d2bff08581cb931ff9e83cc3 Mon Sep 17 00:00:00 2001
From: Hendrik Moree <hendrik@seecr.nl>
Date: Thu, 22 Nov 2012 11:11:18 +0100
Subject: [PATCH] TS/HM: convenience createDiagnostic method for not messing up details and messages

---
 meresco/components/sru/diagnostic.py |    3 ++
 meresco/components/sru/sruhandler.py |   14 +++++-----
 test/sru/sruhandlertest.py           |   47 ++++++++++++++++++---------------
 3 files changed, 36 insertions(+), 28 deletions(-)

diff --git a/meresco/components/sru/diagnostic.py b/meresco/components/sru/diagnostic.py
index 1576587..7ee4c97 100644
--- a/meresco/components/sru/diagnostic.py
+++ b/meresco/components/sru/diagnostic.py
@@ -42,3 +42,6 @@ DIAGNOSTIC = """<diagnostic xmlns="http://www.loc.gov/zing/srw/diagnostic/">
     
 def generalSystemError(message):
     return DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [message])
+
+def createDiagnostic(uri, message, details):
+	return DIAGNOSTIC % (uri, details, message)
diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index f23408b..0051448 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -42,7 +42,7 @@ from time import time
 from decimal import Decimal
 from traceback import print_exc
 
-from diagnostic import DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, UNSUPPORTED_PARAMETER_VALUE
+from diagnostic import createDiagnostic, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, UNSUPPORTED_PARAMETER_VALUE
 from sruparser import DIAGNOSTICS, RESPONSE_HEADER, RESPONSE_FOOTER
 
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet']
@@ -89,7 +89,7 @@ class SruHandler(Observable):
             drilldownData = getattr(response, "drilldownData", None)
         except Exception, e:
             print_exc()
-            yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
+            yield createDiagnostic(uri=QUERY_FEATURE_UNSUPPORTED[0], message=QUERY_FEATURE_UNSUPPORTED[1], details=xmlEscape(str(e)))
             return
 
         queryTime = str(self._timeNow() - t0)
@@ -130,8 +130,8 @@ class SruHandler(Observable):
         if not diagnostics:
             return
         yield '<srw:diagnostics>'
-        for code, details, message in diagnostics:
-            yield DIAGNOSTIC % (code, xmlEscape(details), xmlEscape(message))
+        for code, message, details in diagnostics:
+            yield createDiagnostic(uri=code, message=xmlEscape(message), details=xmlEscape(details))
         yield '</srw:diagnostics>'
 
     def _writeExtraResponseData(self, response=None, queryTime=None, **kwargs):
@@ -168,7 +168,7 @@ class SruHandler(Observable):
         try:
             yield self.all.extraResponseData(**kwargs)
         except Exception, e:
-            yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape(str(e))])
+            yield createDiagnostic(uri=GENERAL_SYSTEM_ERROR[0], message=GENERAL_SYSTEM_ERROR[1], details=xmlEscape(str(e)))
 
     def _startResults(self, numberOfRecords, version):
         yield RESPONSE_HEADER
@@ -197,9 +197,9 @@ class SruHandler(Observable):
         try:
             yield dataGenerator
         except IOError, e:
-            yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape("recordSchema '%s' for identifier '%s' does not exist" % (recordSchema, recordId))])
+            yield createDiagnostic(uri=GENERAL_SYSTEM_ERROR[0], message=GENERAL_SYSTEM_ERROR[1], details=xmlEscape("recordSchema '%s' for identifier '%s' does not exist" % (recordSchema, recordId)))
         except Exception, e:
-            yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape(str(e))])
+            yield createDiagnostic(uri=GENERAL_SYSTEM_ERROR[0], message=GENERAL_SYSTEM_ERROR[1], details=xmlEscape(str(e)))
 
     def _writeOldStyleExtraRecordData(self, schema, recordPacking, recordId):
         yield '<recordData recordSchema="%s">' % xmlEscape(schema)
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index f971faa..c4c496c 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -35,10 +35,9 @@ from StringIO import StringIO
 from urllib2 import urlopen
 import sys
 
-import traceback
 from lxml.etree import parse
 from meresco.components import lxmltostring
-from xml.sax.saxutils import quoteattr, escape as xmlEscape
+from xml.sax.saxutils import escape as xmlEscape
 
 from weightless.core import compose
 
@@ -52,7 +51,7 @@ from meresco.components.xml_generic import schemasPath
 from meresco.components.facetindex import Response
 
 from seecr.test import SeecrTestCase, CallTrace
-
+from seecr.test.io import stderr_replaced
 
 SUCCESS = "SUCCESS"
 
@@ -476,17 +475,19 @@ class SruHandlerTest(SeecrTestCase):
         component = SruHandler()
         component.addObserver(observer)
         result = "".join(list(compose(component._writeRecordData(recordPacking="string", recordSchema="schema", recordId="ID"))))
-        self.assertTrue("diagnostic" in result, result)
-        self.assertTrue("recordSchema 'schema' for identifier 'ID' does not exist" in result, result)
-
+        self.assertTrue("<uri>info://srw/diagnostics/1/1</uri>" in result)
+        self.assertTrue("<message>General System Error</message>" in result)
+        self.assertTrue("<details>recordSchema 'schema' for identifier 'ID' does not exist</details>" in result)
+        
     def testExceptionInWriteRecordData(self):
         observer = CallTrace()
         observer.exceptions["yieldRecord"] = Exception("Test Exception")
         component = SruHandler()
         component.addObserver(observer)
         result = "".join(list(compose(component._writeRecordData(recordPacking="string", recordSchema="schema", recordId="ID"))))
-        self.assertTrue("diagnostic" in result, result)
-        self.assertTrue("Test Exception" in result, result)
+        self.assertTrue("<uri>info://srw/diagnostics/1/1</uri>" in result)
+        self.assertTrue("<message>General System Error</message>" in result)
+        self.assertTrue("<details>Test Exception</details>" in result)
 
     def testExceptionInWriteExtraRecordData(self):
         class RaisesException(object):
@@ -495,22 +496,26 @@ class SruHandlerTest(SeecrTestCase):
         component = SruHandler()
         component.addObserver(RaisesException())
         result = "".join(compose(component._writeExtraResponseData(cqlAbstractSyntaxTree=None)))
-        self.assertTrue("diagnostic" in result)
+        self.assertTrue("<uri>info://srw/diagnostics/1/1</uri>" in result)
+        self.assertTrue("<message>General System Error</message>" in result)
+        self.assertTrue("<details>Test Exception</details>" in result)
 
     def testDiagnosticOnExecuteCql(self):
-        sys.stderr = StringIO()
-        try:
+        with stderr_replaced():
             class RaisesException(object):
                 def executeQuery(self, *args, **kwargs):
                     raise Exception("Test Exception")
             component = SruHandler()
             component.addObserver(RaisesException())
             arguments = dict(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema')
-            result = "".join(compose(component.searchRetrieve(sruArguments=arguments, **arguments)))
-            self.assertTrue("diagnostic" in result)
-        finally:
-            sys.stderr = sys.__stderr__
-
+            result = parse(StringIO("".join(compose(component.searchRetrieve(sruArguments=arguments, **arguments)))))
+            namespaces = {'diag': 'http://www.loc.gov/zing/srw/diagnostic/'}
+            diagnostic = result.xpath("//diag:diagnostic", namespaces=namespaces)
+            self.assertEquals(1, len(diagnostic))
+            self.assertEquals(["info://srw/diagnostics/1/48"], diagnostic[0].xpath("diag:uri/text()", namespaces=namespaces))
+            self.assertEquals(["Query Feature Unsupported"], diagnostic[0].xpath("diag:message/text()", namespaces=namespaces))
+            self.assertEquals(["Test Exception"], diagnostic[0].xpath("diag:details/text()", namespaces=namespaces))
+        
     def testDiagnosticWarning(self):
         sruArguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, }
         queryArguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2}
@@ -548,13 +553,13 @@ class SruHandlerTest(SeecrTestCase):
                 '{%(srw)s}extraResponseData',
             ]], [t.tag for t in xpath(response, '//srw:searchRetrieveResponse/*')])
 
-        diagnostics = [(xpath(d, 'diag:uri/text()')[0], 
-            xpath(d, 'diag:details/text()')[0],
-            xpath(d, 'diag:message/text()')[0]) for d in 
+        diagnostics = [{'uri': xpath(d, 'diag:uri/text()')[0], 
+            'details': xpath(d, 'diag:details/text()')[0],
+            'message': xpath(d, 'diag:message/text()')[0]} for d in 
                 xpath(response, '/srw:searchRetrieveResponse/srw:diagnostics/diag:diagnostic')]
         self.assertEquals([
-            ('info://srw/diagnostics/1/998', 'Diagnostic 998', 'The <tag> message'), 
-            ('info://srw/diagnostics/1/999', 'Diagnostic 999', 'Some message'),
+            {'uri': 'info://srw/diagnostics/1/998', 'message': 'Diagnostic 998', 'details': 'The <tag> message'}, 
+            {'uri': 'info://srw/diagnostics/1/999', 'message': 'Diagnostic 999', 'details': 'Some message'},
             ], diagnostics)
 
 
-- 
1.7.2.5

