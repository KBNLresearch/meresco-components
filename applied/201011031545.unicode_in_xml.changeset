Changeset created on Wed Nov  3 15:45:25 CET 2010 by Seek You Too

Description: Now also accept unicode from lxml 2

    Lxml 2 has a different way of treating string or unicode results,
    the string results were already adapted to the lxml 2 way of 
    presenting them. Now unicode results can be handled correctly as
    well.

Baseline version: meresco-components/workingsets/3.4.4-Edurep/version_1

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/xmlpump.py version_2/meresco/components/xmlpump.py
--- version_1/meresco/components/xmlpump.py	2010-11-03 14:02:24.000000000 +0100
+++ version_2/meresco/components/xmlpump.py	2010-11-03 15:45:07.000000000 +0100
@@ -37,9 +37,10 @@
 from warnings import warn
 
 try:
-    from lxml.etree import _ElementStringResult
+    from lxml.etree import _ElementStringResult, _ElementUnicodeResult
 except:
     _ElementStringResult = str
+    _ElementUnicodeResult = unicode
 
 class Converter(Observable):
     def __init__(self, name=None, fromKwarg=None, toKwarg=None):
@@ -80,7 +81,8 @@
 
 xmlStringRegexp = compile(r'(?s)^\s*<.*>\s*$')
 def isXmlString(anObject):
-    return type(anObject) in [str, _ElementStringResult, unicode] and xmlStringRegexp.match(anObject)
+
+    return type(anObject) in [str, _ElementStringResult, unicode, _ElementUnicodeResult] and xmlStringRegexp.match(anObject)
 
 class XmlParseAmara(_Converter):
     def _canConvert(self, anObject):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/xmlxpath.py version_2/meresco/components/xmlxpath.py
--- version_1/meresco/components/xmlxpath.py	2010-11-03 14:02:24.000000000 +0100
+++ version_2/meresco/components/xmlxpath.py	2010-11-03 15:45:07.000000000 +0100
@@ -33,9 +33,10 @@
 
 #HM: To support both lxml1.2 as 2.1
 try:
-    from lxml.etree import _ElementStringResult
+    from lxml.etree import _ElementStringResult, _ElementUnicodeResult
 except ImportError:
     _ElementStringResult = str 
+    _ElementUnicodeResult = unicode
 
 oftenUsedNamespaces = {
     'oai_dc': "http://www.openarchives.org/OAI/2.0/oai_dc/",
@@ -75,7 +76,7 @@
     def _findNewTree(self, elementTree):
         for xpath in self._xpaths:
             for element in elementTree.xpath(xpath, namespaces=self._namespacesMap):
-                if type(element) in [_ElementStringResult, unicode]:
+                if type(element) in [_ElementStringResult, _ElementUnicodeResult]:
                     yield element
                 else:
                     yield ElementTree(element)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/xml_generic/lxml_based/xmlxpathtest.py version_2/test/xml_generic/lxml_based/xmlxpathtest.py
--- version_1/test/xml_generic/lxml_based/xmlxpathtest.py	2010-10-27 10:24:39.000000000 +0200
+++ version_2/test/xml_generic/lxml_based/xmlxpathtest.py	2010-11-03 15:45:07.000000000 +0100
@@ -1,3 +1,4 @@
+# -*- coding=utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -67,7 +68,7 @@
             sys.stderr = sys.__stderr__
             msg = strm.getvalue()
             if msg:
-                self.assertEquals('../meresco/components/xmlpump.py:77: DeprecationWarning: This use of XmlParseLxml is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument.\n  warn("This use of %s is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument." % self.__class__.__name__, DeprecationWarning)\n', msg)
+                self.assertTrue('DeprecationWarning: This use of XmlParseLxml is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument.\n  warn("This use of %s is deprecated. Specify \'fromKwarg\' and \'toKwarg\' parameters to convert specific keyword argument." % self.__class__.__name__, DeprecationWarning)\n' in msg, msg)
 
     def testSimpleXPath(self):
         self.createXmlXPath(['/root/path'], {})
@@ -81,6 +82,13 @@
         self.assertEquals('een tekst', method.args[0])
         self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['lxmlNode']))
 
+    def testSimpleXPathWithUnicodeChars(self):
+        self.createXmlXPath(['/root/text()'], {})
+
+        self.observable.do.test('een tekst', data='<root>&lt;tag&gt;t€xt&lt;/tag&gt;</root>')
+        method = self.observer.calledMethods[0]
+        self.assertEquals('<tag>t€xt</tag>', method.kwargs['lxmlNode'])
+
     def testElementInKwargs(self):
         self.createXmlXPath(['/root/path'], {})
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/xmlpumptest.py version_2/test/xmlpumptest.py
--- version_1/test/xmlpumptest.py	2010-10-27 10:24:39.000000000 +0200
+++ version_2/test/xmlpumptest.py	2010-11-03 15:45:07.000000000 +0100
@@ -32,7 +32,7 @@
 from meresco.core.observable import Observable, be
 from cq2utils import CallTrace, CQ2TestCase
 from amara import binderytools
-from lxml.etree import _ElementTree, tostring, parse, _ElementStringResult
+from lxml.etree import _ElementTree, tostring, parse, _ElementStringResult, _ElementUnicodeResult
 
 from meresco.components import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml
 
@@ -76,6 +76,13 @@
         self.assertEquals('tag', xmlNode.localName)
         self.assertEquals('content', xmlNode.content.localName)
 
+    def testInflateWithElementUnicodeResult(self):
+        xmlString = _ElementUnicodeResult(u"""<tag><content>conténts</content></tag>""")
+        self.observable.do.add(identifier="id", partname="partName", data=xmlString)
+
+        xmlNode = self.observer.calledMethods[0].kwargs['amaraNode']
+        self.assertEquals('conténts', str(xmlNode.content))
+
     def testDeflate(self):
         observable = be(
             (Observable(),
