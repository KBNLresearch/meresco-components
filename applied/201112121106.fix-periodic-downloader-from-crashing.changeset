Changeset created on Mon Dec 12 11:06:39 UTC 2011 by Seecr (Seek You Too B.V.)

Description: Periodic downloader will not crash anymore on connect/send

    Sometimes the periodic downloader could crash on connect or send on socket 
    object. This is fixed by except all Exceptions and retry the connect after 
    5 minutes. The periodic downloaders should never be removed from the reactor 
    but for now this happens on any error.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/tags/version_3.4.23

diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_3.4.23/meresco/components/periodicdownload.py version_3.4.23.1/meresco/components/periodicdownload.py
--- version_3.4.23/meresco/components/periodicdownload.py	2011-12-12 12:03:45.000000000 +0100
+++ version_3.4.23.1/meresco/components/periodicdownload.py	2011-12-12 12:03:29.000000000 +0100
@@ -59,9 +59,13 @@
 
     def loop(self):
         while True:
-            sok = yield self._tryConnect()
-            sok.send(self.any.buildRequest())
-            sok.shutdown(SHUT_WR)
+            try:
+                sok = yield self._tryConnect()
+                sok.send(self.any.buildRequest())
+                sok.shutdown(SHUT_WR)
+            except Exception, e:
+                yield self._retryAfterError(str(e), period=5*60)
+                continue
             self._reactor.addReader(sok, self._loop.next, prio=self._prio)
             responses = []
             try:
@@ -106,26 +110,22 @@
         sok.setblocking(0)
         while True:
             try:
-                try:
-                    sok.connect((self._host, self._port))
-                except SocketError, (errno, msg):
-                    if errno != EINPROGRESS:
-                        yield self._retryAfterError("%s: %s" % (errno, msg))
-                        continue
-                self._reactor.addWriter(sok, self._loop.next)
-                yield
-                self._reactor.removeWriter(sok)
-
-                err = sok.getsockopt(SOL_SOCKET, SO_ERROR)
-                if err == ECONNREFUSED:
-                    yield self._retryAfterError("Connection refused.")
+                sok.connect((self._host, self._port))
+            except SocketError, (errno, msg):
+                if errno != EINPROGRESS:
+                    yield self._retryAfterError("%s: %s" % (errno, msg))
                     continue
-                if err != 0:   # any other error
-                    raise IOError(err)
-                break
-            except Exception, e:
-                yield self._retryAfterError(str(e), period=5*60)
+            self._reactor.addWriter(sok, self._loop.next)
+            yield
+            self._reactor.removeWriter(sok)
+
+            err = sok.getsockopt(SOL_SOCKET, SO_ERROR)
+            if err == ECONNREFUSED:
+                yield self._retryAfterError("Connection refused.")
                 continue
+            if err != 0:   # any other error
+                raise IOError(err)
+            break
         raise StopIteration(sok)
 
     def _retryAfterError(self, message, period=None):
diff --unidirectional-new-file --recursive --unified --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied version_3.4.23/test/periodicdownloadtest.py version_3.4.23.1/test/periodicdownloadtest.py
--- version_3.4.23/test/periodicdownloadtest.py	2011-12-12 12:03:45.000000000 +0100
+++ version_3.4.23.1/test/periodicdownloadtest.py	2011-12-12 12:03:27.000000000 +0100
@@ -54,12 +54,16 @@
         s.listen(0)
         start.set()
         for response in responses:
-            connection, address = s.accept()
-            msg = connection.recv(bufsize)
-            messages.append(msg)
-            if not response is DROP_CONNECTION:
-                connection.send(response)
-                connection.close()
+            try:
+                connection, address = s.accept()
+                msg = connection.recv(bufsize)
+                messages.append(msg)
+                if not response is DROP_CONNECTION:
+                    connection.send(response)
+                    connection.close()
+            except:
+                print "HIERO"
+                pass
     thread = Thread(None, serverThread)
     thread.start()
     start.wait()
@@ -67,6 +71,7 @@
     thread.join()
 
 
+
 class PeriodicDownloadTest(CQ2TestCase):
     def testOne(self):
         reactor = CallTrace("reactor")
@@ -102,13 +107,18 @@
         self.assertEquals("some.nl:no-port: an integer is required\n", harvester._err.getvalue())
 
     def testNoConnectionPossible(self):
-        harvester, observer, reactor = self.getHarvester("localhost", 8899)
+        harvester, observer, reactor = self.getHarvester("localhost", 888)
         callback = reactor.calledMethods[0].args[1]
         callback() # connect
         reactor.exceptions['removeWriter'] = IOError("error in sockopt") ## Simulate IOError as raised from sok.getsockopt
-        callback() # connect
-        self.assertEquals("localhost:8899: error in sockopt\n", harvester._err.getvalue())
+        callback() # HTTP GET
+        del reactor.exceptions['removeWriter']
+        self.assertEquals('addTimer', reactor.calledMethods[-1].name)
         self.assertEquals(5*60, reactor.calledMethods[-1].args[0])
+        callback = reactor.calledMethods[-1].args[1]
+        callback() # connect
+        self.assertEquals("addWriter", reactor.calledMethods[-1].name)
+        self.assertEquals("localhost:888: error in sockopt\n", harvester._err.getvalue())
 
     def testErrorResponse(self):
         reactor = CallTrace("reactor")
