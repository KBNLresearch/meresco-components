Changeset created on Tue Oct 23 18:19:35 UTC 2012 by Seecr (Seek You Too B.V.)

Description: SRU drilldownMaximumMaximumResults option added

    SruHandler option drilldownMaximumMaximumResults limits the
    x-term-drilldown's maximumResults per term.  More than the
    configured maximum or "term:0" (unlimited) are disallowed
    when set.  A SRU diagnostics is given on out-of-bounds.

Baseline version: 4.3.1

From 92237af40dc5b07ca33dfdcd3b9b263d865a0822 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Tue, 23 Oct 2012 18:20:58 +0100
Subject: [PATCH] TS: added SruHandler option drilldownMaximumMaximumResults

When requesting a x-term-drilldown for a term with an unbounded
(term:0) or more than drilldownMaximumMaximumResults, a SRU
Diagnostic with 'Unsupported Parameter Value' will be
returned.
---
 meresco/components/sru/sruhandler.py |   14 ++++-
 test/sru/sruhandlertest.py           |   87 +++++++++++++++++++++++++++++++++-
 2 files changed, 97 insertions(+), 4 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index 82d662f..7ffec64 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -32,6 +32,7 @@ from xml.sax.saxutils import quoteattr, escape as xmlEscape
 
 from meresco.core import Observable, decorate
 from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
+from meresco.components.sru.sruparser import SruException
 from weightless.core import compose, Yield
 
 from cqlparser import parseString as parseCQL
@@ -41,6 +42,7 @@ from time import time
 from decimal import Decimal
 from traceback import print_exc
 
+from diagnostic import UNSUPPORTED_PARAMETER_VALUE
 from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
 
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet']
@@ -48,7 +50,7 @@ ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', '
 millis = Decimal('0.001')
 
 class SruHandler(Observable):
-    def __init__(self, extraRecordDataNewStyle=True, drilldownSortedByTermCount=False, extraXParameters=None, includeQueryTimes=False, querySuggestionsCount=0):
+    def __init__(self, extraRecordDataNewStyle=True, drilldownSortedByTermCount=False, extraXParameters=None, includeQueryTimes=False, querySuggestionsCount=0, drilldownMaximumMaximumResults=None):
         Observable.__init__(self)
         self._drilldownSortedByTermCount = drilldownSortedByTermCount
         self._extraRecordDataNewStyle = extraRecordDataNewStyle
@@ -56,6 +58,7 @@ class SruHandler(Observable):
         self._extraXParameters.add("x-recordSchema")
         self._includeQueryTimes = includeQueryTimes
         self._querySuggestionsCount = querySuggestionsCount
+        self._drilldownMaximumMaximumResults = drilldownMaximumMaximumResults
 
     def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sruArguments=None, **kwargs):
         SRU_IS_ONE_BASED = 1
@@ -231,16 +234,21 @@ class SruHandler(Observable):
             return
 
         def splitTermAndMaximum(field):
-            maxTerms = DEFAULT_MAXIMUM_TERMS
+            maxTerms = DEFAULT_MAXIMUM_TERMS if self._drilldownMaximumMaximumResults is None else min(DEFAULT_MAXIMUM_TERMS, self._drilldownMaximumMaximumResults)
             splitted = field.rsplit(":", 1)
             if len(splitted) == 2:
                 try:
                     field, maxTerms = splitted[0], int(splitted[1])
+                    if self._drilldownMaximumMaximumResults is not None:
+                        if maxTerms > self._drilldownMaximumMaximumResults:
+                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults > %s' % (field, self._drilldownMaximumMaximumResults))
+                        elif maxTerms < 1:
+                            raise SruException(UNSUPPORTED_PARAMETER_VALUE, '%s; drilldown with maximumResults < 1' % field)
                 except ValueError:
                     pass
             return field, maxTerms, self._drilldownSortedByTermCount
 
-        return (splitTermAndMaximum(field) for field in x_term_drilldown[0].split(","))
+        return [splitTermAndMaximum(field) for field in x_term_drilldown[0].split(",")]
 
     def _timeNow(self):
         return time()
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index c3ea0f6..298b7fa 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -510,7 +510,92 @@ class SruHandlerTest(SeecrTestCase):
             self.assertTrue("diagnostic" in result)
         finally:
             sys.stderr = sys.__stderr__
-    
+
+    def testSearchRetrieveAssertsDrilldownMaximumMaximumResultsWhenSet(self):
+        drilldownMaximumMaximumResults = 3
+        self.assertTrue(drilldownMaximumMaximumResults < DEFAULT_MAXIMUM_TERMS)
+
+        def sruHandlerKwargs(x_term_drilldown):
+            arguments = {'version':'1.1', 'operation':'searchRetrieve', 'query':'blissfully_ignored', 'recordSchema':'blissfully_ignored', 'recordPacking':'string'}
+            arguments['x_term_drilldown'] = [x_term_drilldown]
+            arguments['sruArguments'] = dict((k.replace('_', '-'),v) for k,v in arguments.items())
+            return arguments
+
+        # No problem - max
+        kwargs = sruHandlerKwargs(x_term_drilldown='field0:3,fielddefault')
+        sruHandler = SruHandler(drilldownMaximumMaximumResults=drilldownMaximumMaximumResults)
+        observer = CallTrace('observer')
+        sruHandler.addObserver(observer)
+        def executeQuery(**kwargs):
+            raise KeyboardInterrupt('Ok')
+            yield
+        observer.methods['executeQuery'] = executeQuery
+
+        try:
+            ''.join(compose(sruHandler.searchRetrieve(**kwargs)))
+        except KeyboardInterrupt, e:
+            self.assertEquals('Ok', str(e))
+        else:
+            self.fail('Should not come here')
+
+        self.assertEquals(['executeQuery'], observer.calledMethodNames())
+        self.assertEquals([('field0', 3, False), ('fielddefault', 3, False)], observer.calledMethods[0].kwargs['fieldnamesAndMaximums'])
+
+        # No problem - min
+        kwargs = sruHandlerKwargs(x_term_drilldown='field0:1')
+        observer.calledMethods.reset()
+        try:
+            ''.join(compose(sruHandler.searchRetrieve(**kwargs)))
+        except KeyboardInterrupt, e:
+            self.assertEquals('Ok', str(e))
+        else:
+            self.fail('Should not come here')
+
+        self.assertEquals(['executeQuery'], observer.calledMethodNames())
+        self.assertEquals([('field0', 1, False)], observer.calledMethods[0].kwargs['fieldnamesAndMaximums'])
+
+        # Too high
+        kwargs = sruHandlerKwargs(x_term_drilldown='field0:4')
+
+        sruHandler = SruHandler(drilldownMaximumMaximumResults=drilldownMaximumMaximumResults)
+        observer = CallTrace('observer')
+        sruHandler.addObserver(observer)
+        def executeQuery(**kwargs):
+            raise KeyboardInterrupt('Should have failed before triggering this exception!')
+            yield
+        observer.methods['executeQuery'] = executeQuery
+
+        try:
+            ''.join(compose(sruHandler.searchRetrieve(**kwargs)))
+        except SruException, e:
+            self.assertEquals('field0; drilldown with maximumResults > 3', str(e))
+        except KeyboardInterrupt, e:
+            self.fail(str(e))
+        else:
+            self.fail('Should not come here')
+
+        # Too low
+        kwargs = sruHandlerKwargs(x_term_drilldown='field55:0')
+        try:
+            ''.join(compose(sruHandler.searchRetrieve(**kwargs)))
+        except SruException, e:
+            self.assertEquals('field55; drilldown with maximumResults < 1', str(e))
+        except KeyboardInterrupt, e:
+            self.fail(str(e))
+        else:
+            self.fail('Should not come here')
+
+        # Freezing
+        kwargs = sruHandlerKwargs(x_term_drilldown='field55:-1')
+        try:
+            ''.join(compose(sruHandler.searchRetrieve(**kwargs)))
+        except SruException, e:
+            self.assertEquals('field55; drilldown with maximumResults < 1', str(e))
+        except KeyboardInterrupt, e:
+            self.fail(str(e))
+        else:
+            self.fail('Should not come here')
+
     def testValidXml(self):
         component = SruParser()
         sruHandler = SruHandler()
-- 
1.7.1

