Changeset created on Tue Mar 29 12:32:59 CEST 2011 by Seek You Too

Description: SRU Record Update gives invaliddata response by a ValidateException

    When a ValidateException is raised SRU Record Update response with an InvalidData errors. All other cases are InvalidComponent errors. 
    The validate component now adds the whole recorddata to the exception message including line-numbers.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.9-Edurep/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/sru/srurecordupdate.py version_0-sru-validation-errors/meresco/components/sru/srurecordupdate.py
--- version_0/meresco/components/sru/srurecordupdate.py	2011-03-23 15:57:22.000000000 +0100
+++ version_0-sru-validation-errors/meresco/components/sru/srurecordupdate.py	2011-03-29 09:16:56.000000000 +0200
@@ -31,6 +31,7 @@
 from meresco.core.observable import Observable
 from traceback import format_exc
 from xml.sax.saxutils import escape as escapeXml
+from meresco.components.xml_generic.validate import ValidateException
 
 class SRURecordUpdate(Observable):
 
@@ -52,10 +53,20 @@
             answer = RESPONSE_XML % {
                 "operationStatus": "success",
                 "diagnostics": ""}
+        except ValidateException, e:
+            answer = RESPONSE_XML % {
+                "operationStatus": "fail",
+                "diagnostics": DIAGNOSTIC_XML % {
+                    'uri': 'info:srw/diagnostic/12/12',
+                    'details': escapeXml(str(e)),
+                    'message': 'Invalid data:  record rejected'}}
         except Exception, e:
             answer = RESPONSE_XML % {
                 "operationStatus": "fail",
-                "diagnostics": DIAGNOSTIC_XML % escapeXml(format_exc())}
+                "diagnostics": DIAGNOSTIC_XML % {
+                    'uri': 'info:srw/diagnostic/12/1', 
+                    'details': escapeXml(format_exc()), 
+                    'message': 'Invalid component:  record rejected'}}
 
         yield answer
 
@@ -67,8 +78,8 @@
 
 DIAGNOSTIC_XML = """<srw:diagnostics>
     <diag:diagnostic xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/">
-        <diag:uri>info:srw/diagnostic/12/1</diag:uri>
-        <diag:details>%s</diag:details>
-        <diag:message>Invalid component:  record rejected</diag:message>
+        <diag:uri>%(uri)s</diag:uri>
+        <diag:details>%(details)s</diag:details>
+        <diag:message>%(message)s</diag:message>
     </diag:diagnostic>
 </srw:diagnostics>"""
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/xml_generic/validate.py version_0-sru-validation-errors/meresco/components/xml_generic/validate.py
--- version_0/meresco/components/xml_generic/validate.py	2011-03-23 15:57:23.000000000 +0100
+++ version_0-sru-validation-errors/meresco/components/xml_generic/validate.py	2011-03-29 09:46:47.000000000 +0200
@@ -50,7 +50,7 @@
             if type(arg) == _ElementTree:
                 self._schema.validate(arg)
                 if self._schema.error_log:
-                    exception = ValidateException(self._schema.error_log.last_error)
+                    exception = ValidateException(formatException(self._schema, arg))
                     self.do.logException(exception)
                     raise exception
         return self.all.unknown(*args, **kwargs)
@@ -60,6 +60,10 @@
     toValidate = parse(StringIO(xmlString))
     schema.validate(toValidate)
     if schema.error_log:
-        for nr, line in enumerate(tostring(toValidate, encoding="utf-8", pretty_print=True).split('\n')):
-            print nr+1, line
-        raise AssertionError(str(schema.error_log))
+        raise AssertionError(formatException(schema, toValidate))
+
+def formatException(schema, lxmlNode):
+    message = str(schema.error_log.last_error) + "\n\n"
+    for nr, line in enumerate(tostring(lxmlNode, encoding="utf-8", pretty_print=True).split('\n')):
+        message += "%s %s\n" % (nr+1, line)
+    return message
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/srurecordupdatetest.py version_0-sru-validation-errors/test/sru/srurecordupdatetest.py
--- version_0/test/sru/srurecordupdatetest.py	2011-03-23 15:57:22.000000000 +0100
+++ version_0-sru-validation-errors/test/sru/srurecordupdatetest.py	2011-03-29 09:27:58.000000000 +0200
@@ -32,6 +32,7 @@
 from meresco.components.sru.srurecordupdate import SRURecordUpdate
 from amara.binderytools import bind_string
 from weightless.core import compose
+from meresco.components.xml_generic.validate import ValidateException
 
 
 XML = """<?xml version="1.0" encoding="UTF-8"?>
@@ -164,3 +165,12 @@
         self.assertTrue("""<ucp:operationStatus>fail</ucp:operationStatus>""" in result, result)
         diag = bind_string(result)
         self.assertTrue(str(diag.updateResponse.diagnostics.diagnostic.details).find("""Some <Exception>""") > -1)
+
+    def testValidationErrors(self):
+        self.observer.exceptions['add'] = ValidateException('Some <Exception>')
+        headers, result = self.performRequest(self.createRequestBody())
+        self.assertTrue("""<ucp:operationStatus>fail</ucp:operationStatus>""" in result, result)
+        diag = bind_string(result)
+        self.assertEquals("info:srw/diagnostic/12/12", str(diag.updateResponse.diagnostics.diagnostic.uri))
+        self.assertEquals("Some <Exception>", str(diag.updateResponse.diagnostics.diagnostic.details))
+        self.assertEquals("Invalid data:  record rejected", str(diag.updateResponse.diagnostics.diagnostic.message))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/xml_generic/validatetest.py version_0-sru-validation-errors/test/xml_generic/validatetest.py
--- version_0/test/xml_generic/validatetest.py	2011-03-23 15:57:22.000000000 +0100
+++ version_0-sru-validation-errors/test/xml_generic/validatetest.py	2011-03-29 09:42:22.000000000 +0200
@@ -63,6 +63,7 @@
         except ValidateException:
             pass
         self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
+        self.assertTrue("1 %s" % invalidXml in str(self.exception), str(self.exception))
 
     def testAssertInvalidString(self):
         invalid = '<OAI-PMH/>'
@@ -72,3 +73,4 @@
         except ValidateException, e:
             pass
         self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
+        self.assertTrue("1 <OAI-PMH/>" in str(self.exception), str(self.exception))
