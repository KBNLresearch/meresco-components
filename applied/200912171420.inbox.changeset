Changeset created on 2009-12-17 14:20 by Seek You Too

Description: Added Inbox
   
    Added component Inbox which was originally developed for University of Tilburg. Inbox is an alternative update mechanism for your Meresco server. It will pick up records from the inbox directory and sends a corresponding 'add' message to observing components.

Originally developed around 2008-12-08.
Added to Meresco around 2009-11-27.

Baseline version: meresco-components/tags/version_2.21.4

diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified without_inbox/merescocomponents/inbox.py with_inbox/merescocomponents/inbox.py
--- without_inbox/merescocomponents/inbox.py	1970-01-01 01:00:00.000000000 +0100
+++ with_inbox/merescocomponents/inbox.py	2009-12-17 14:18:20.000000000 +0100
@@ -0,0 +1,76 @@
+from merescocore.framework import Observable
+
+from cq2utils import DirectoryWatcher
+from lxml.etree import parse
+
+from os.path import join, isdir
+from os import rename, listdir
+from traceback import format_exc
+
+class InboxException(Exception):
+    pass
+
+class Inbox(Observable):
+    """
+    Inbox monitors a directory for files XML files being moved into it.  Each
+    file moved into the directory is assumed to be in XML format.  It is read,
+    parsed (using lxml) and passed on to the observers of Inbox using
+    self.do.add(identifier=filename, lxmlNode=<parsed xml>). When the add()
+    calls succeeds, the file is moved to another directory.
+
+    Parameters
+
+    Both the inbox directory and the done directory are taken as parameters from
+    the constructor (__init__).  It is strongly recommended to put both
+    directories on the same file system, so the move is atomic and does not
+    incur data copying.
+
+    Errors
+
+    When an error occured, the file causing the error is also moved to the done
+    directory, but an .error file is written next to it.  This file contains
+    a complete stacktrace of the error.
+
+    Notes
+
+    The Inbox intentionally only listens to move events.  This avoids reading
+    partial files that are still being written to.  The move operation is atomic
+    and makes sure that the events of putting something into the inbox and
+    reading it are serialized.  NOTE: move files into the inbox only from the
+    same file system to keep it atomicity property.
+
+    When the system starts up, the Inbox does not generate events for files that
+    are already in the inbox directory.  This avoids uncontrolled bursts.
+    Instead, when there are still files in the inbox when the system is
+    restarted, either move them out and than back into the directory.
+    Alternatively, one could use the method processInboxDirectory() to generate
+    events for existing files programmatically.
+    """
+    def __init__(self, reactor=None, inboxDirectory='', doneDirectory=''):
+        Observable.__init__(self)
+
+        if not isdir(inboxDirectory):
+            raise InboxException("directory %s does not exist" % inboxDirectory)
+
+        if not isdir(doneDirectory):
+            raise InboxException("directory %s does not exist" % doneDirectory)
+
+        self._inboxDirectory = inboxDirectory
+        self._doneDirectory = doneDirectory
+        self._watcher = DirectoryWatcher(self._inboxDirectory, self._processEvent, MoveInFile=True)
+        reactor.addReader(self._watcher, self._watcher)
+
+    def processInboxDirectory(self):
+        for filename in listdir(self._inboxDirectory):
+            self.processFile(filename)
+
+    def _processEvent(self, event):
+        self.processFile(event.name)
+
+    def processFile(self, filename):
+        try:
+            lxmlNode = parse(open(join(self._inboxDirectory, filename)))
+            self.do.add(identifier=filename, lxmlNode=lxmlNode)
+        except Exception, e:
+            open(join(self._doneDirectory, filename + ".error"), 'w').write(format_exc(limit=7))
+        rename(join(self._inboxDirectory, filename), join(self._doneDirectory, filename))
\ No newline at end of file
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified without_inbox/test/alltests.py with_inbox/test/alltests.py
--- without_inbox/test/alltests.py	2009-12-17 14:19:24.000000000 +0100
+++ with_inbox/test/alltests.py	2009-12-17 14:18:19.000000000 +0100
@@ -1,4 +1,5 @@
 #!/usr/bin/env python2.5
+# -*- coding: utf-8 -*-
 ## begin license ##
 #
 #    Meresco Components are components to build searchengines, repositories
@@ -89,6 +90,8 @@
 
 from web.webquerytest import WebQueryTest
 
+from inboxtest import InboxTest
+
 if __name__ == '__main__':
     unittest.main()
     os.system('find .. -name "*.pyc" | xargs rm -f')
diff --unidirectional-new-file --exclude=.svn --exclude='*.pyc' --exclude=applied --recursive --unified without_inbox/test/inboxtest.py with_inbox/test/inboxtest.py
--- without_inbox/test/inboxtest.py	1970-01-01 01:00:00.000000000 +0100
+++ with_inbox/test/inboxtest.py	2009-12-17 14:18:19.000000000 +0100
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+from cq2utils import CQ2TestCase, CallTrace
+
+from merescocore.framework import be, Transparant
+
+from weightless import Reactor
+
+from os.path import join, isfile
+from os import makedirs, rename, listdir
+from lxml.etree import tostring
+
+from merescocomponents.inbox import Inbox, InboxException
+
+class InboxTest(CQ2TestCase):
+
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+        self.reactor = Reactor()
+        self.observer = CallTrace('Observer')
+        self.inboxDirectory = join(self.tempdir, 'inbox')
+        self.doneDirectory = join(self.tempdir, 'done')
+        makedirs(self.inboxDirectory)
+        makedirs(self.doneDirectory)
+        self.inbox = Inbox(self.reactor, inboxDirectory=self.inboxDirectory, doneDirectory=self.doneDirectory)
+        self.inbox.addObserver(self.observer)
+
+    def testCheckDirectoriesOnCreate(self):
+        try:
+            Inbox(CallTrace('Reactor'), inboxDirectory="/no_such_inbox", doneDirectory="/tmp")
+            self.fail()
+        except InboxException, e:
+            self.assertEquals("directory /no_such_inbox does not exist", str(e))
+
+        try:
+            Inbox(CallTrace('Reactor'), inboxDirectory="/tmp", doneDirectory="/no_such_done")
+            self.fail()
+        except InboxException, e:
+            self.assertEquals("directory /no_such_done does not exist", str(e))
+
+    def testMovedInFileTriggersThings(self):
+        events = []
+        self.inbox.processFile = lambda event: events.append(event)
+
+        self.moveInRecord('repository:some:identifier:1')
+        self.reactor.step()
+        self.assertEquals(1, len(events))
+        self.assertEquals("repository:some:identifier:1.record", events[0])
+
+
+    def testProcessedGetsMovedToDone(self):
+        self.moveInRecord(identifier='repository:some:identifier:1')
+
+        self.assertEquals(0, len(self.observer.calledMethods))
+        self.assertTrue(isfile(join(self.inboxDirectory, 'repository:some:identifier:1.record')))
+        self.assertFalse(isfile(join(self.doneDirectory, 'repository:some:identifier:1.record')))
+        self.reactor.step()
+        self.assertEquals(1, len(self.observer.calledMethods))
+        self.assertFalse(isfile(join(self.inboxDirectory, 'repository:some:identifier:1.record')))
+        self.assertTrue(isfile(join(self.doneDirectory, 'repository:some:identifier:1.record')))
+
+    def testProcessRecordsOnCommand(self):
+        self.inboxDirectory = join(self.tempdir, 'inbox2')
+        self.doneDirectory = join(self.tempdir, 'done2')
+        makedirs(self.inboxDirectory)
+        makedirs(self.doneDirectory)
+
+        self.moveInRecord(identifier='repo:ident:1')
+        self.moveInRecord(identifier='repo:ident:2')
+        self.moveInRecord(identifier='repo:ident:3')
+        inbox = Inbox(self.reactor, inboxDirectory=self.inboxDirectory, doneDirectory=self.doneDirectory)
+        dna = be(
+            (Transparant(),
+                (inbox,)
+            )
+        )
+        dna.once.observer_init()
+        self.assertEquals(set(['repo:ident:1.record', 'repo:ident:2.record', 'repo:ident:3.record']), set(listdir(self.inboxDirectory)))
+
+        inbox.processInboxDirectory()
+
+        self.assertEquals(set(['repo:ident:1.record', 'repo:ident:2.record', 'repo:ident:3.record']), set(listdir(self.doneDirectory)))
+
+
+    def testErrorHandling(self):
+        self.moveInRecord(identifier='repo:identifier:1')
+
+        def mockedAddCall(identifier=None, name=None, lxmlNode=None):
+            result = 1/0
+
+        self.observer.add = mockedAddCall
+
+        self.reactor.step()
+        self.assertFalse(isfile(join(self.inboxDirectory, 'repo:identifier:1.record')))
+        self.assertTrue(isfile(join(self.doneDirectory, 'repo:identifier:1.record')))
+        errorFile = join(self.doneDirectory, 'repo:identifier:1.record.error')
+        self.assertTrue(isfile(errorFile))
+
+        errorMessage = open(errorFile).read()
+        self.assertTrue(errorMessage.startswith("Traceback (most recent call last):"))
+        self.assertTrue(errorMessage.endswith("ZeroDivisionError: integer division or modulo by zero\n"), errorMessage)
+
+    def testNoXmlFile(self):
+        identifier = 'repository:record'
+        self.moveInRecord(identifier=identifier, data='this is no xml')
+        self.reactor.step()
+        errorFile = join(self.doneDirectory, identifier+'.record.error')
+        self.assertTrue(isfile(errorFile))
+        self.assertFalse(isfile(join(self.inboxDirectory, identifier+'.record')))
+        self.assertTrue('Start tag expected' in open(errorFile).read())
+
+    def moveInRecord(self, identifier, data="<record/>"):
+        filename = join(self.tempdir, identifier+".record")
+        open(filename, 'w').write(data)
+        rename(filename, join(self.inboxDirectory, identifier+".record"))
