Changeset created on Mon Feb 13 15:12:07 UTC 2012 by Seecr (Seek You Too B.V.)

Description: implemented DeclineMessage

    'any_unknown' and 'call_unknown' implementations (of 'FilterMessages', 'Validate' and 'Converter') now raise DeclineMessage in case none of their observers respond to the given message (to comply with new Observable protocol for these situations).

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/4.0.1-DeclineMessage/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/deps.txt /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/deps.txt
--- version_0/deps.txt	2012-02-13 14:33:06.000000000 +0100
+++ version_1/deps.txt	2012-02-13 16:12:02.000000000 +0100
@@ -10,12 +10,12 @@
 python-lxml (>=2.1)
 python-lxml (<<3.0)
 python-magic
-python-meresco-core (>= 4.0)
+python-meresco-core (>= 4.0.1)
 python-meresco-core (<< 4.1)
 python-meresco-xml (>= 1.1)
 python-meresco-xml (<< 2)
 python-storage (>= 6.0)
 python-storage (<< 6.1)
-python-weightless-core (>= 0.7.0.1)
+python-weightless-core (>= 0.7.1)
 python-weightless-core (<< 0.8)
 lsof
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/converter.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/meresco/components/converter.py
--- version_0/meresco/components/converter.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/meresco/components/converter.py	2012-02-13 16:12:02.000000000 +0100
@@ -29,6 +29,7 @@
 # 
 ## end license ##
 
+from weightless.core import NoneOfTheObserversRespond, DeclineMessage
 from meresco.core import Observable
 
 
@@ -44,8 +45,11 @@
 
     def any_unknown(self, msg, *args, **kwargs):
         newArgs, newKwargs = self._convertArgs(*args, **kwargs)
-        response = yield self.any.unknown(msg, *newArgs, **newKwargs)
-        raise StopIteration(response)
+        try:
+            response = yield self.any.unknown(msg, *newArgs, **newKwargs)
+            raise StopIteration(response)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
 
     def do_unknown(self, msg, *args, **kwargs):
         newArgs, newKwargs = self._convertArgs(*args, **kwargs)
@@ -53,7 +57,10 @@
 
     def call_unknown(self, msg, *args, **kwargs):
         newArgs, newKwargs = self._convertArgs(*args, **kwargs)
-        return self.call.unknown(msg, *newArgs, **newKwargs)
+        try:
+            return self.call.unknown(msg, *newArgs, **newKwargs)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
 
     def _convertArgs(self, *args, **kwargs):
         try:
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/filtermessages.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/meresco/components/filtermessages.py
--- version_0/meresco/components/filtermessages.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/meresco/components/filtermessages.py	2012-02-13 16:12:02.000000000 +0100
@@ -27,7 +27,7 @@
 # 
 ## end license ##
 
-from weightless.core import NoneOfTheObserversRespond
+from weightless.core import NoneOfTheObserversRespond, DeclineMessage
 from meresco.core import Observable
 
 
@@ -42,9 +42,12 @@
 
     def any_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
-            response = yield self.any.unknown(message, *args, **kwargs)
-            raise StopIteration(response)
-        raise NoneOfTheObserversRespond(message, unknownCall=True)
+            try:
+                response = yield self.any.unknown(message, *args, **kwargs)
+                raise StopIteration(response)
+            except NoneOfTheObserversRespond:
+                pass
+        raise DeclineMessage
 
     def all_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
@@ -52,8 +55,11 @@
 
     def call_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
-            return self.call.unknown(message, *args, **kwargs)
-        raise NoneOfTheObserversRespond(message, unknownCall=True)
+            try:
+                return self.call.unknown(message, *args, **kwargs)
+            except NoneOfTheObserversRespond:
+                pass
+        raise DeclineMessage
 
     def do_unknown(self, message, *args, **kwargs):
         if self._allowedMessage(message):
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/xml_generic/validate.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/meresco/components/xml_generic/validate.py
--- version_0/meresco/components/xml_generic/validate.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/meresco/components/xml_generic/validate.py	2012-02-13 16:12:02.000000000 +0100
@@ -30,6 +30,7 @@
 from lxml.etree import parse, XMLSchema, XMLSchemaParseError, _ElementTree, tostring
 from StringIO import StringIO
 
+from weightless.core import NoneOfTheObserversRespond, DeclineMessage
 from meresco.core import Observable
 
 class ValidateException(Exception):
@@ -55,12 +56,18 @@
 
     def any_unknown(self, message, *args, **kwargs):
         self._detectAndValidate(*args, **kwargs)
-        response = yield self.any.unknown(message, *args, **kwargs)
-        raise StopIteration(response)
+        try:
+            response = yield self.any.unknown(message, *args, **kwargs)
+            raise StopIteration(response)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
 
     def call_unknown(self, message, *args, **kwargs):
         self._detectAndValidate(*args, **kwargs)
-        return self.call.unknown(message, *args, **kwargs)
+        try:
+            return self.call.unknown(message, *args, **kwargs)
+        except NoneOfTheObserversRespond:
+            raise DeclineMessage
 
     def _detectAndValidate(self, *args, **kwargs):
         allArguments = list(args) + kwargs.values()
@@ -85,3 +92,4 @@
     for nr, line in enumerate(tostring(lxmlNode, encoding="utf-8", pretty_print=True).split('\n')):
         message += "%s %s\n" % (nr+1, line)
     return message
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_alltests.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/test/_alltests.py
--- version_0/test/_alltests.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/test/_alltests.py	2012-02-13 16:12:02.000000000 +0100
@@ -45,8 +45,9 @@
 import unittest
 
 from berkeleydicttest import DoubleUniqueBerkeleyDictTest, BerkeleyDictTest
-from contextsettest import ContextSetTest
 from clausecollectortest import ClauseCollectorTest
+from contextsettest import ContextSetTest
+from convertertest import ConverterTest
 from cqlconversiontest import CQLConversionTest
 from combinepartstest import CombinePartsTest
 from crosswalktest import CrosswalkTest
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/convertertest.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/test/convertertest.py
--- version_0/test/convertertest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/convertertest.py	2012-02-13 16:12:02.000000000 +0100
@@ -0,0 +1,68 @@
+# encoding=utf-8
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from seecr.test import SeecrTestCase, CallTrace
+
+from weightless.core import be, compose
+from meresco.core import Observable
+
+from meresco.components import Converter
+
+
+class ConverterTest(SeecrTestCase):
+    def setUp(self):
+        class FourtytwoConverter(Converter):
+            def _convert(self, value):
+                return 42
+
+        SeecrTestCase.setUp(self)
+
+        self.observer1 = CallTrace('observer 1', returnValues={
+            'f': (i for i in ['done']),
+            'g': 'done'}, onlySpecifiedMethods=True)
+        self.observer2 = CallTrace('observer 2', returnValues={
+            'h': 'done2'}, onlySpecifiedMethods=True)
+
+        self.observable = be(
+            (Observable(),
+                (FourtytwoConverter(fromKwarg='data', toKwarg='fourtytwo'),
+                    (self.observer2, )
+                ),
+                (self.observer1, )
+            )
+        )
+
+    def testNoneOfTheObserversRespondTransparency(self):
+        self.assertEquals(['done'], list(compose(self.observable.any.f(data=41))))
+        self.assertEquals('done', self.observable.call.g(data=41))
+        self.assertEquals('done2', self.observable.call.h(data=41))
+
+        self.assertEquals(2, len(self.observer1.calledMethods))
+        self.assertEquals({'data': 41}, self.observer1.calledMethods[0].kwargs)
+        self.assertEquals({'data': 41}, self.observer1.calledMethods[1].kwargs)
+        self.assertEquals(1, len(self.observer2.calledMethods))
+        self.assertEquals({'fourtytwo': 42}, self.observer2.calledMethods[0].kwargs)
+
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/filtermessagestest.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/test/filtermessagestest.py
--- version_0/test/filtermessagestest.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/test/filtermessagestest.py	2012-02-13 16:12:02.000000000 +0100
@@ -42,8 +42,9 @@
                 'noop': None
             }
         )
-        self.observer2 = CallTrace(
-            'observer2', 
+        self.observer2 = object()
+        self.observer3 = CallTrace(
+            'observer3', 
             emptyGeneratorMethods=['message'], 
             returnValues={
                 'function': 42, 
@@ -57,6 +58,9 @@
             ),
             (FilterMessages(allowed=['message', 'function', 'gen', 'noop']),
                 (self.observer2,)
+            ),
+            (FilterMessages(allowed=['message', 'function', 'gen', 'noop']),
+                (self.observer3,)
             )
         ))
 
@@ -64,7 +68,7 @@
     def testAll(self):
         list(compose(self.dna.all.message()))
         self.assertEquals([], [m.name for m in self.observer1.calledMethods])
-        self.assertEquals(['message'], [m.name for m in self.observer2.calledMethods])
+        self.assertEquals(['message'], [m.name for m in self.observer3.calledMethods])
 
     def testCall(self):
         self.assertEquals(42, self.dna.call.function())
@@ -72,7 +76,7 @@
     def testDo(self):
         self.dna.do.noop()
         self.assertEquals([], [m.name for m in self.observer1.calledMethods])
-        self.assertEquals(['noop'], [m.name for m in self.observer2.calledMethods])
+        self.assertEquals(['noop'], [m.name for m in self.observer3.calledMethods])
 
     def testAny(self):
         self.assertEquals([42], list(compose(self.dna.any.gen())))
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/xml_generic/validatetest.py /home/weightless/development/meresco-components/workingsets/4.0.1-DeclineMessage/version_1/test/xml_generic/validatetest.py
--- version_0/test/xml_generic/validatetest.py	2012-02-13 14:33:06.000000000 +0100
+++ version_1/test/xml_generic/validatetest.py	2012-02-13 16:12:02.000000000 +0100
@@ -27,50 +27,57 @@
 # 
 ## end license ##
 
-from cStringIO import StringIO
-from seecr.test import SeecrTestCase
+from seecr.test import SeecrTestCase, CallTrace
 
+from os.path import join, dirname, abspath
+from cStringIO import StringIO
 from lxml.etree import parse, _ElementTree
 
-from meresco.components.xml_generic.validate import Validate, ValidateException
+from weightless.core import compose, be
 from meresco.core import Observable
+from meresco.components.xml_generic.validate import Validate, ValidateException
+from meresco.components.xml_generic import  __file__ as xml_genericpath
 
-from weightless.core import compose
 
-from meresco.components.xml_generic import  __file__ as xml_genericpath
-from os.path import join, dirname, abspath
+xsd = join(abspath(dirname(xml_genericpath)), 'schemas-lom', 'lomCc.xsd')
 
 class ValidateTest(SeecrTestCase):
-
     def setUp(self):
         SeecrTestCase.setUp(self)
-        self.validate = Validate(join(abspath(dirname(xml_genericpath)), 'schemas-lom', 'lomCc.xsd'))
-        self.exception = None
-        self.args = None
-        class Interceptor:
-            def all_unknown(inner, message, *args, **kwargs):
-                self.args = args
-                yield None
-            def any_unknown(inner, message, *args, **kwargs):
-                self.args = args
-                return 'sync_any'
-            def logException(inner, anException):
-                self.exception = anException
-
-        self.validate.addObserver(Interceptor())
+        self.validate = Validate(xsd)
+        self.interceptor = CallTrace('interceptor', returnValues={
+            'all_unknown': (x for x in ['done']),
+            'any_unknown': (x for x in ['done']),
+            'do_unknown': None,
+            'call_unknown': 'done',
+            'logException': None}, onlySpecifiedMethods=True)
+        self.validate.addObserver(self.interceptor)
         self.observable = Observable()
         self.observable.addObserver(self.validate)
 
-    # async too!
-    def testOneInvalid(self):
+    def testValid(self):
+        validXml = '<lom xmlns="http://ltsc.ieee.org/xsd/LOM"/>'
+        self.assertEquals(['done'], list(compose(self.observable.all.someMethod(parse(StringIO(validXml))))))
+        self.assertEquals(['done'], list(compose(self.observable.any.someMethod(parse(StringIO(validXml))))))
+
+        self.interceptor.calledMethods.reset()
+        self.observable.do.someMethod(parse(StringIO(validXml)))
+        self.assertEquals(['do_unknown'], [m.name for m in self.interceptor.calledMethods])
+
+        self.interceptor.calledMethods.reset()
+        self.assertEquals('done', self.observable.call.someMethod(parse(StringIO(validXml))))
+
+    def testInvalid(self):
         invalidXml = '<lom xmlns="http://ltsc.ieee.org/xsd/LOM_this_should_not_work"/>'
         try:
             list(compose(self.observable.any.someMethod(parse(StringIO(invalidXml)))))
             self.fail('must raise exception')
         except ValidateException:
             pass
-        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
-        self.assertTrue("1 %s" % invalidXml in str(self.exception), str(self.exception))
+        self.assertEquals(['logException'], [m.name for m in self.interceptor.calledMethods])
+        exception = self.interceptor.calledMethods[0].args[0]
+        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root." in str(exception), str(exception))
+        self.assertTrue("1 %s" % invalidXml in str(exception), str(exception))
 
         self.assertRaises(ValidateException, lambda: list(compose(self.observable.all.someMethod(parse(StringIO(invalidXml))))))
         self.assertRaises(ValidateException, lambda: list(compose(self.observable.do.someMethod(parse(StringIO(invalidXml))))))
@@ -83,6 +90,21 @@
             self.fail('must raise exception')
         except ValidateException, e:
             pass
-        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
-        self.assertTrue("1 <OAI-PMH/>" in str(self.exception), str(self.exception))
+        self.assertEquals(['logException'], [m.name for m in self.interceptor.calledMethods])
+        exception = self.interceptor.calledMethods[0].args[0]
+        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root." in str(exception), str(exception))
+        self.assertTrue("1 <OAI-PMH/>" in str(exception), str(exception))
+
+    def testTransparencyInCaseOfNoAnyAndCallResponders(self):
+        observer = CallTrace('observer', returnValues={
+            'f': (i for i in [42]),
+            'g': 42
+        })
+        root = be((Observable(),
+            (Validate(xsd),),
+            (observer,)
+        ))
+
+        self.assertEquals([42], list(compose(root.any.f())))
+        self.assertEquals(42, root.call.g())
 
