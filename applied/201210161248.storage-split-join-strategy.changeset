Changeset created on Tue Oct 16 12:48:09 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Introduction of splitting strategy instead of split/join

    StorageComponent must now be configured with a strategy class with a split
    and join function. These functions are called instead of the previously given
    split and join functions

Baseline version: 4.2.1

From dbcb109f0f7a47a9b6d0fb50a1b21771d2d1bffa Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Tue, 16 Oct 2012 10:54:55 +0100
Subject: [PATCH] HM/EG: introduction of splitting strategy instead of split/join

---
 meresco/components/storagecomponent.py |   46 +++++++++++++++++++-------
 test/storagecomponenttest.py           |   56 +++++++++++++++++++++++++++++++-
 2 files changed, 89 insertions(+), 13 deletions(-)

diff --git a/meresco/components/storagecomponent.py b/meresco/components/storagecomponent.py
index 946f49d..b069c0a 100644
--- a/meresco/components/storagecomponent.py
+++ b/meresco/components/storagecomponent.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -28,24 +29,44 @@
 # 
 ## end license ##
 
+from hashlib import sha1
+
 from storage import HierarchicalStorage, Storage
 from meresco.core import asyncnoreturnvalue
 
-def defaultSplit((identifier, partname)):
-    result = identifier.split(':',1)
-    if partname != None:
-        result += [partname]
-    return result
+class DefaultStrategy(object):
+
+    @classmethod
+    def split(self, (identifier, partname)):
+        result = identifier.split(':',1)
+        if partname != None:
+            result += [partname]
+        return result
+
+    @classmethod
+    def join(self, parts):
+        identifier = ":".join(parts[:-1])
+        partname = parts[-1]
+        return identifier, partname
+
+defaultSplit = DefaultStrategy.split
+defaultJoin = DefaultStrategy.join
+
+class HashDistributeStrategy(object):
+
+    def split(self, (identifier, partname)):
+        hash = sha1(identifier).hexdigest()
+        if partname is None:
+            partname = ""
+        return hash[0:2], hash[2:4], hash + '.' + partname
 
-def defaultJoin(parts):
-    identifier = ":".join(parts[:-1])
-    partname = parts[-1]
-    return identifier, partname
+    def join(self, _):
+        raise KeyError("Unable to join due to hashing of identifiers")
 
 class StorageComponent(object):
-    def __init__(self, directory, split=defaultSplit, join=defaultJoin, partsRemovedOnDelete=None, partsRemovedOnPurge=None, name=None):
+    def __init__(self, directory, partsRemovedOnDelete=None, partsRemovedOnPurge=None, name=None, strategy=DefaultStrategy):
         assert type(directory) == str, 'Please use directory as first parameter'
-        self._storage = HierarchicalStorage(Storage(directory), split, join)
+        self._storage = HierarchicalStorage(Storage(directory), strategy.split, strategy.join)
         self._partsRemovedOnDelete = set([]) if partsRemovedOnDelete is None else set(partsRemovedOnDelete)
         self._partsRemovedOnPurge = self._partsRemovedOnDelete if partsRemovedOnPurge is None else self._partsRemovedOnDelete.union(set(partsRemovedOnPurge))
         self._name = name
@@ -113,5 +134,6 @@ class StorageComponent(object):
         def filterPrefixAndPart((identifier, partname)):
             return identifier.startswith(prefix) and (wantedPartname == None or wantedPartname == partname)
 
-        return ((identifier, partname) for (identifier, partname) in self._storage.glob((prefix, wantedPartname)) if filterPrefixAndPart((identifier, partname)))
+        return ((identifier, partname) for (identifier, partname) in self._storage.glob((prefix, wantedPartname))
+                if filterPrefixAndPart((identifier, partname)))
 
diff --git a/test/storagecomponenttest.py b/test/storagecomponenttest.py
index 8767093..3b229e8 100644
--- a/test/storagecomponenttest.py
+++ b/test/storagecomponenttest.py
@@ -9,6 +9,7 @@
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -30,12 +31,13 @@
 
 from seecr.test import SeecrTestCase
 
-from meresco.components.storagecomponent import StorageComponent
+from meresco.components.storagecomponent import StorageComponent, DefaultStrategy, HashDistributeStrategy
 from storage import HierarchicalStorage, Storage
 from cStringIO import StringIO
 from meresco.core import Observable
 from subprocess import Popen, PIPE
 from weightless.core import compose
+from os.path import join
 
 
 class StorageComponentTest(SeecrTestCase):
@@ -175,5 +177,57 @@ class StorageComponentTest(SeecrTestCase):
         s = StorageComponent(self.tempdir, name="name")
         self.assertEquals("name", s.observable_name())
 
+    def testDirectoryStrategy(self):
+        class TestStrategy:
+            @classmethod
+            def split(self, (identifier, partname)):
+                return identifier.swapcase(), partname.swapcase()
+            join = None
+        s = StorageComponent(self.tempdir, strategy=TestStrategy)
+        list(compose(s.add("AnIdentifier", "Part1", "Contents")))
+        self.assertEquals("Contents", open(join(self.tempdir, "aNiDENTIFIER", "pART1")).read())
+
+    def testDirectorySplit(self):
+        class TestStrategy:
+            @classmethod
+            def split(self, (identifier, partname)):
+                return tuple(c for c in identifier) + (partname,)
+            join = None
+        s = StorageComponent(self.tempdir, strategy=TestStrategy)
+        list(compose(s.add("id09", "Part1", "Contents")))
+        self.assertEquals("Contents", open(join(self.tempdir, "i", "d", "0", "9", "Part1")).read())
+
+    def testDirectoryStrategyJoin(self):
+        class TestStrategy:
+            @classmethod
+            def split(self, (identifier, partname)):
+                result = tuple(c for c in identifier)
+                return result if not partname else result + (partname,)
+            @classmethod
+            def join(self, parts):
+                return ''.join(parts[:-1]), parts[-1]
+        s = StorageComponent(self.tempdir, strategy=TestStrategy)
+        list(compose(s.add("id09", "Part1", "Contents")))
+        self.assertEquals(["id09"], list(s.listIdentifiers()))
+
+    def testDefaultStrategy(self):
+        s = DefaultStrategy
+        self.assertEquals(["a", "b", "c"], s.split(("a:b", "c")))
+        self.assertEquals(("a:b", "c"), s.join(("a", "b", "c")))
+        self.assertEquals(["a", "b"], s.split(("a:b", None)))
+        self.assertEquals(["a", "b:c", "d"], s.split(("a:b:c", "d")))
+        self.assertEquals(("a:b:c", "d"), s.join(("a", "b:c", "d")))
+
+    def testDefaultStrategyIsDefaultStrategy(self):
+        s = StorageComponent(self.tempdir)
+        list(compose(s.add("a:b:c", "d", "Hi")))
+        self.assertEquals("Hi", open(join(self.tempdir, "a", "b:c", "d")).read())
 
+    def testHashDistributeStrategy(self):
+        s = HashDistributeStrategy()
+        self.assertEquals(("58", "eb", "58eb8a535f07b1f7b94cd6083e664137301048a7.rdf"), s.split(("AnIdentifier", "rdf")))
+        self.assertEquals(("58", "eb", "58eb8a535f07b1f7b94cd6083e664137301048a7.xml"), s.split(("AnIdentifier", "xml")))
+        self.assertEquals(("35", "6a", "356a192b7913b04c54574d18c28d46e6395428ab."), s.split(("1", "")))
+        self.assertEquals(("35", "6a", "356a192b7913b04c54574d18c28d46e6395428ab."), s.split(("1", None)))
 
+        self.assertRaises(KeyError, lambda: s.join("NA"))
-- 
1.7.1

