Changeset created on Thu Nov 01 13:38:20 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Pause/resume in PeriodicDownload

    Added two methods to pause and resume download in PeriodicDownload. 
    PeriodicDownload will default start automatically, this can be changed
    with the autoStart parameter.

Baseline version: 4.3.5

From cf4bc82c046297efc0a86721d47084708493d871 Mon Sep 17 00:00:00 2001
From: Thijs Janssen <thijs@seecr.nl>
Date: Thu, 1 Nov 2012 10:19:10 +0100
Subject: [PATCH 1/5] TS/TJ: added pause/resume to PeriodicDownload.

---
 meresco/components/periodicdownload.py |   17 +++++++++++++++--
 1 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index 71f76e5..b2d133d 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -45,7 +45,7 @@ from warnings import warn
 
 
 class PeriodicDownload(Observable):
-    def __init__(self, reactor, host, port, period=1, verbose=None, prio=None, name=None, err=None):
+    def __init__(self, reactor, host, port, period=1, verbose=None, prio=None, name=None, err=None, autoStart=True):
         super(PeriodicDownload, self).__init__(name=name)
         self._reactor = reactor
         self._host = host
@@ -53,6 +53,7 @@ class PeriodicDownload(Observable):
         self._period = period
         self._prio = prio
         self._err = err or stderr
+        self._paused = not autoStart
         if verbose in [True, False]:
             warn('Verbose flag is deprecated', DeprecationWarning)
 
@@ -60,7 +61,19 @@ class PeriodicDownload(Observable):
         self.startTimer()
 
     def startTimer(self, additionalTime=0):
-        self._reactor.addTimer(self._period + additionalTime, self.startProcess)
+        if not self._paused:
+            self._reactor.addTimer(self._period + additionalTime, self.startProcess)
+
+    def pause(self):
+        self._paused = True
+        self._logError("PAUSED")
+
+    def resume(self):
+        if not self._paused:
+            return
+        self._paused = False
+        self._logError("RESUMED")
+        self.startTimer()
 
     def startProcess(self):
         self._processOne = compose(self.processOne())
-- 
1.7.1


From ff625e838859ede371bd6020d7d62bccce64632f Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 1 Nov 2012 10:05:17 +0000
Subject: [PATCH 2/5] TS/TJ: added test for autostart.

---
 test/periodicdownloadtest.py |   17 +++++++++++------
 1 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 4270b7a..1824aad 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -393,6 +393,17 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             self.assertEquals('removeProcess', reactor.calledMethods[6].name)
             self.assertReactorState(reactor)
              
+    def testShortenErrorMessage(self):
+        from meresco.components.periodicdownload import shorten
+        longMessage = "a"*100000
+        self.assertTrue(len(shorten(longMessage)) < len(longMessage)/10)
+
+    def testAutoStartOff(self):
+        reactor = CallTrace("reactor")
+        downloader = PeriodicDownload(reactor, 'host', 12345, autoStart=False)
+        downloader.observer_init()
+        self.assertEquals([], reactor.calledMethodNames())
+
     def getDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
         self._reactor = CallTrace("reactor")
@@ -417,12 +428,6 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
                 len([n for n in names if n == 'remove%s' % what]), 
                 'Expected same amount of add and remove for %s' % what)
 
-    def testShortenErrorMessage(self):
-        from meresco.components.periodicdownload import shorten
-        longMessage = "a"*100000
-        self.assertTrue(len(shorten(longMessage)) < len(longMessage)/10)
-
-
 HTTP_SEPARATOR = 2 * CRLF
 STATUSLINE = """HTTP/1.0 200 OK """ + HTTP_SEPARATOR
 STATUSLINE_ALTERNATIVE = """HTTP/1.1 200 ok """ + HTTP_SEPARATOR
-- 
1.7.1


From ef68015aedfc62e8ed0c82fb54a1ebd4fc03407f Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 1 Nov 2012 13:18:58 +0000
Subject: [PATCH 3/5] TS/TJ: test pause/resume on PeriodicDownload.

---
 test/periodicdownloadtest.py |   90 +++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 88 insertions(+), 2 deletions(-)

diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 1824aad..7241b65 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -36,13 +36,15 @@ from socket import socket, error as SocketError
 from meresco.components import lxmltostring
 from StringIO import StringIO
 from os.path import join
+from urllib2 import urlopen
+from time import time
 
 from seecr.test import SeecrTestCase, CallTrace
 from seecr.test.io import stderr_replaced
 from seecr.test.utils import ignoreLineNumbers
 
-from weightless.core import be
-from weightless.io import  Suspend
+from weightless.core import be, compose
+from weightless.io import Reactor, Suspend
 
 from meresco.core import Observable
 
@@ -404,6 +406,90 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
         downloader.observer_init()
         self.assertEquals([], reactor.calledMethodNames())
 
+    def testPauseResume(self):
+        # Copy/Paste of 'def server(...)'
+        # could not match both servers, some test keep 'hanging'
+        @contextmanager
+        def server2(responses, bufsize=4096):
+            port = randint(10000,60000)
+            start = Event()
+            messages = []
+            def serverThread():
+                s = socket()
+                s.bind(('127.0.0.1', port))
+                s.listen(0)
+                start.set()
+                while responses:
+                    try:
+                        connection, address = s.accept()
+                        msg = connection.recv(bufsize)
+                        messages.append(msg)
+                        response = responses.pop()
+                        connection.send(response)
+                        connection.close()
+                    except:
+                        pass
+            thread = Thread(None, serverThread)
+            thread.start()
+            start.wait()
+            yield port, messages
+            thread.join()
+            responsesLeft = len(responses)
+            if False and responsesLeft > 0:
+                del responses[:]
+                sok = socket()
+                sok.connect(('127.0.0.1', port))
+                sok.close()
+            assert responsesLeft == 0, "Expected no more responses, but %s left." % responsesLeft
+
+        reactor = Reactor()
+        stepping = [True]
+        def uit():
+            stepping[0] = False
+        reactor.addTimer(2, uit)
+
+        receivedData = []
+        
+        class TestHandler(Observable):
+            def __init__(self):
+                Observable.__init__(self)
+                self._t0 = time()
+            def buildRequest(self):
+                return 'request'
+            def handle(self, data):
+                receivedData.append(('%.1fs' % (time() - self._t0), data))
+                if len(receivedData) >= 3:
+                    receivedData.append('PAUSE')
+                    self.call.pause()
+                return
+                yield
+
+        with server2(["HTTP/1.0 200 Ok\r\n\r\nmessage"]*5) as (port, msgs):
+            download = PeriodicDownload(reactor, '127.0.0.1', port, period=0.1, err=StringIO())
+            dna = be(
+            (Observable(),
+                (download,
+                    (TestHandler(),
+                        (download,)
+                    )
+                )
+            ))
+            list(compose(dna.once.observer_init()))
+
+            reactor.addTimer(1, lambda: dna.call.resume())
+            while stepping[0]:
+                reactor.step()
+            self.assertEquals('message', urlopen('http://127.0.0.1:%s/request' % port).read())
+        self.assertEquals([
+            ('0.1s', 'message'),
+            ('0.2s', 'message'),
+            ('0.3s', 'message'),
+            'PAUSE',
+            ('1.1s', 'message'),
+            'PAUSE',
+            ], receivedData)
+
+    
     def getDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
         self._reactor = CallTrace("reactor")
-- 
1.7.1


From c46289021d1dd676f411ceb4792913a6c7a4830a Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 1 Nov 2012 13:26:40 +0000
Subject: [PATCH 4/5] TS/TJ: removed nice but not necessary server2 test.

---
 test/periodicdownloadtest.py |   37 +------------------------------------
 1 files changed, 1 insertions(+), 36 deletions(-)

diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 7241b65..1d5d4e7 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -407,41 +407,6 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
         self.assertEquals([], reactor.calledMethodNames())
 
     def testPauseResume(self):
-        # Copy/Paste of 'def server(...)'
-        # could not match both servers, some test keep 'hanging'
-        @contextmanager
-        def server2(responses, bufsize=4096):
-            port = randint(10000,60000)
-            start = Event()
-            messages = []
-            def serverThread():
-                s = socket()
-                s.bind(('127.0.0.1', port))
-                s.listen(0)
-                start.set()
-                while responses:
-                    try:
-                        connection, address = s.accept()
-                        msg = connection.recv(bufsize)
-                        messages.append(msg)
-                        response = responses.pop()
-                        connection.send(response)
-                        connection.close()
-                    except:
-                        pass
-            thread = Thread(None, serverThread)
-            thread.start()
-            start.wait()
-            yield port, messages
-            thread.join()
-            responsesLeft = len(responses)
-            if False and responsesLeft > 0:
-                del responses[:]
-                sok = socket()
-                sok.connect(('127.0.0.1', port))
-                sok.close()
-            assert responsesLeft == 0, "Expected no more responses, but %s left." % responsesLeft
-
         reactor = Reactor()
         stepping = [True]
         def uit():
@@ -464,7 +429,7 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
                 return
                 yield
 
-        with server2(["HTTP/1.0 200 Ok\r\n\r\nmessage"]*5) as (port, msgs):
+        with server(["HTTP/1.0 200 Ok\r\n\r\nmessage"]*5) as (port, msgs):
             download = PeriodicDownload(reactor, '127.0.0.1', port, period=0.1, err=StringIO())
             dna = be(
             (Observable(),
-- 
1.7.1


From f8834530389f29fe55cc78691b534d084c594b07 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Thu, 1 Nov 2012 13:36:24 +0000
Subject: [PATCH 5/5] TS/TJ: added pause resume test when in error.

---
 test/periodicdownloadtest.py |   47 ++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 1d5d4e7..b18c8fb 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -454,6 +454,53 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             'PAUSE',
             ], receivedData)
 
+    def testPauseResumeWithError(self):
+        reactor = Reactor()
+        stepping = [True]
+        def uit():
+            stepping[0] = False
+        reactor.addTimer(2, uit)
+
+        receivedData = []
+        
+        class TestHandler(Observable):
+            def __init__(self):
+                Observable.__init__(self)
+                self._t0 = time()
+            def buildRequest(self):
+                return 'request'
+            def handle(self, data):
+                receivedData.append(('%.1fs' % (time() - self._t0), data))
+                if len(receivedData) >= 2:
+                    receivedData.append('PAUSE')
+                    self.call.pause()
+                    raise ValueError('You shall not pass!')
+                return
+                yield
+
+        with server(["HTTP/1.0 200 Ok\r\n\r\nmessage"]*4) as (port, msgs):
+            download = PeriodicDownload(reactor, '127.0.0.1', port, period=0.1, err=StringIO())
+            dna = be(
+            (Observable(),
+                (download,
+                    (TestHandler(),
+                        (download,)
+                    )
+                )
+            ))
+            list(compose(dna.once.observer_init()))
+
+            reactor.addTimer(1, lambda: dna.call.resume())
+            while stepping[0]:
+                reactor.step()
+            self.assertEquals('message', urlopen('http://127.0.0.1:%s/request' % port).read())
+        self.assertEquals([
+            ('0.1s', 'message'),
+            ('0.2s', 'message'),
+            'PAUSE',
+            ('1.1s', 'message'),
+            'PAUSE',
+            ], receivedData)
     
     def getDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
-- 
1.7.1

