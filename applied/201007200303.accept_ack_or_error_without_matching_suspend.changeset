Changeset created on Tue Jul 20 03:03:39 UTC 2010 by Seek You Too

Description: Allow Msgbox to accept .ack and .error messages for which no suspend object can be found.

    Incoming .ack and .error message would result in an IndexError when no suspend object was created for the identifier. Now fixed with new test.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.1-Emc/version_2

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_2/meresco/components/msgbox/msgbox.py version_2.fix_missing_suspend_object/meresco/components/msgbox/msgbox.py
--- version_2/meresco/components/msgbox/msgbox.py	2010-07-14 12:03:58.000000000 +0000
+++ version_2.fix_missing_suspend_object/meresco/components/msgbox/msgbox.py	2010-07-20 02:55:11.000000000 +0000
@@ -106,22 +107,25 @@
 
     def processFile(self, filename):
         filepath = join(self._inDirectory, filename)
-        if self._isAckOrError(filename):
-            basename, result = filename.rsplit('.',1)
+        suspend = None
+        ackOrError = self._isAckOrError(filename)
+        if ackOrError:
+            basename, extension = filename.rsplit('.', 1)
             identifier = unescapeFilename(basename)
-            suspend = self._suspended[identifier]
-            if result == 'ack':
-                suspend.resume()
-            else:
-                suspend.throw(Exception(open(filepath).read()))
-        else:
-            identifier = unescapeFilename(filename)
-            try:
+            suspend = self._suspended.get(identifier, None)
+        try:
+            if suspend is None:
+                identifier = unescapeFilename(filename)
                 self.do.add(identifier=identifier, filedata=File(filepath)) # asyncdo !!
-                if self._synchronous:
+                if self._synchronous and not ackOrError:
                     self._ack(filename)
-            except Exception:
-                self._logError(format_exc())
+            elif extension == 'error':
+                suspend.throw(Exception(open(filepath).read()))
+            else:
+                suspend.resume()
+        except Exception:
+            self._logError(format_exc())
+            if not ackOrError:
                 self._error(filename, format_exc())
         self._forgivingRemove(filepath)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_2/test/msgbox/msgboxtest.py version_2.fix_missing_suspend_object/test/msgbox/msgboxtest.py
--- version_2/test/msgbox/msgboxtest.py	2010-07-14 12:03:36.000000000 +0000
+++ version_2.fix_missing_suspend_object/test/msgbox/msgboxtest.py	2010-07-20 02:47:24.000000000 +0000
@@ -31,7 +32,7 @@
 from weightless import Reactor
 
 from os.path import join, isfile, basename
-from os import makedirs, rename, listdir, system, chmod
+from os import makedirs, rename, listdir, system, chmod, remove
 from lxml.etree import tostring
 from shutil import rmtree
 from stat import S_IXUSR, S_IRUSR, S_IWUSR
@@ -84,11 +85,10 @@
         self.createMsgbox()
         filename = 'repository:some:identifier:1.record'
         self.moveInRecord(filename=filename)
-
         self.assertEquals(0, len(self.observer.calledMethods))
         self.assertTrue(isfile(join(self.inDirectory, filename)))
         self.assertFalse(isfile(join(self.outDirectory, filename + '.ack')))
-        self.msgbox.processFile(filename)
+        self.reactor.step()
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertFalse(isfile(join(self.inDirectory, filename)))
         self.assertTrue(isfile(join(self.outDirectory, filename + '.ack')))
@@ -145,7 +145,7 @@
         self.assertEquals(0, len(self.observer.calledMethods))
         self.assertTrue(isfile(join(self.inDirectory, filename)))
         self.assertFalse(isfile(join(self.outDirectory, filename)))
-        self.msgbox.processFile(filename)
+        self.reactor.step()
         self.assertEquals(1, len(self.observer.calledMethods))
         self.assertFalse(isfile(join(self.inDirectory, filename)))
         self.assertFalse(isfile(join(self.outDirectory, filename + '.ack')))
@@ -365,6 +365,35 @@
         msgbox.processFile(filename)
         suspend.getResult() # does not raise an Exception
 
+    def testAckAndErrorAcceptedAfterSendDoesNotBlockForAck(self):
+        self.createMsgbox()
+        errorLog = []
+        self.msgbox._logError = lambda error: errorLog.append(error)
+
+        identifier = 'a:b:c'
+        ''.join(self.msgbox.add(identifier, 'filedata'))
+        self.assertTrue(isfile(join(self.outDirectory, identifier)))
+
+        self.moveInRecord(identifier + '.ack', '')
+        remove(join(self.outDirectory, identifier))
+        self.reactor.step()
+        self.assertEquals([], errorLog)
+
+        self.assertEquals(1, len(self.observer.calledMethods))
+        calledMethod = self.observer.calledMethods[0]
+        self.assertEquals('add', calledMethod.name)
+        self.assertEquals(identifier + '.ack', calledMethod.kwargs['identifier'])
+
+        self.moveInRecord(identifier + '.error', 'Something bad happened.')
+        self.reactor.step()
+        self.assertEquals([], errorLog)
+
+        self.assertEquals(2, len(self.observer.calledMethods))
+        calledMethod = self.observer.calledMethods[1]
+        self.assertEquals('add', calledMethod.name)
+        self.assertEquals(identifier + '.error', calledMethod.kwargs['identifier'])
+
+
     # helper methods
 
     def createMsgbox(self, asynchronous=False):
