Changeset created on Thu Oct 21 16:11:52 CEST 2010 by Seek You Too

Description: Kwargs improvement to use the new standard

    Fixed some components to use the new style kwargs as used in meresco for add and delete calls. Upgraded the storagecomponent to use the new names 'identifier' and 'partname' as arguments.

Baseline version: meresco-components/workingsets/3.4.3-Edurep/version_1

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/msgbox/msgbox.py version_2/meresco/components/msgbox/msgbox.py
--- version_1/meresco/components/msgbox/msgbox.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/meresco/components/msgbox/msgbox.py	2010-10-21 16:09:47.000000000 +0200
@@ -46,7 +46,7 @@
     supports a standardized mechanism for sending files.
 
     Msgbox monitors its inDirectory for files being moved into it. Each moved in file is
-    read and passed on to the observers of Msgbox using self.do.add(filepath=filepath).
+    read and passed on to the observers of Msgbox using self.do.add(filedata=<File>).
     By default a Msgbox writes an acknowledgment (.ack) file to its outDirectory as
     soon as the 'add' call returns. When an exception was raised an error (.error)
     file is written instead, which contains the full traceback for the error.
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/msgbox/updateadapter.py version_2/meresco/components/msgbox/updateadapter.py
--- version_1/meresco/components/msgbox/updateadapter.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/meresco/components/msgbox/updateadapter.py	2010-10-21 16:09:47.000000000 +0200
@@ -30,16 +30,16 @@
     def add(self, identifier, filedata):
         identifier, extension = identifier.rsplit('.', 1)
         if extension == "delete":
-            self.do.delete(identifier)
+            self.do.delete(identifier=identifier)
         elif extension == "add":
-            self.do.add(identifier=identifier, filedata=filedata)
+            self.do.add(identifier=identifier, partname=None, filedata=filedata)
         else:
             raise ValueError('Expected add or delete as file extension')
 
 class UpdateAdapterToMsgbox(Observable):
 
-    def add(self, identifier, **kwargs):
-        return self.all.add(identifier='%s.add' % identifier, **kwargs)
+    def add(self, identifier, data, **kwargs):
+        return self.all.add(identifier='%s.add' % identifier, filedata=data, **kwargs)
 
     def delete(self, identifier):
         return self.all.add(identifier='%s.delete' % identifier, filedata='')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/storagecomponent.py version_2/meresco/components/storagecomponent.py
--- version_1/meresco/components/storagecomponent.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/meresco/components/storagecomponent.py	2010-10-21 16:09:47.000000000 +0200
@@ -30,16 +30,16 @@
 from storage import HierarchicalStorage, Storage
 from itertools import ifilter
 
-def defaultSplit((id, partName)):
-    result = id.split(':',1)
-    if partName != None:
-        result += [partName]
+def defaultSplit((identifier, partname)):
+    result = identifier.split(':',1)
+    if partname != None:
+        result += [partname]
     return result
 
 def defaultJoin(parts):
-    id = ":".join(parts[:-1])
-    partName = parts[-1]
-    return id, partName
+    identifier = ":".join(parts[:-1])
+    partname = parts[-1]
+    return identifier, partname
 
 class StorageComponent(object):
     def __init__(self, directory, split=defaultSplit, join=defaultJoin, revisionControl=False, partsRemovedOnDelete=[], name=None):
@@ -65,38 +65,38 @@
         finally:
             return sink.close()
 
-    def delete(self, id):
-        for partName in self._partsRemovedOnDelete:
-            self.deletePart(id, partName)
-
-    def deletePart(self, id, partName):
-        if (id, partName) in self._storage:
-            self._storage.delete((id, partName))
+    def delete(self, identifier):
+        for partname in self._partsRemovedOnDelete:
+            self.deletePart(identifier, partname)
+
+    def deletePart(self, identifier, partname):
+        if (identifier, partname) in self._storage:
+            self._storage.delete((identifier, partname))
 
-    def isAvailable(self, id, partName):
+    def isAvailable(self, identifier, partname):
         """returns (hasId, hasPartName)"""
-        if (id, partName) in self._storage:
+        if (identifier, partname) in self._storage:
             return True, True
-        elif (id, None) in self._storage:
+        elif (identifier, None) in self._storage:
             return True, False
         return False, False
 
-    def write(self, sink, id, partName):
-        stream = self._storage.getFile((id, partName))
+    def write(self, sink, identifier, partname):
+        stream = self._storage.getFile((identifier, partname))
         try:
             for line in stream:
                 sink.write(line)
         finally:
             stream.close()
 
-    def yieldRecord(self, id, partName):
-        stream = self._storage.getFile((id, partName))
+    def yieldRecord(self, identifier, partname):
+        stream = self._storage.getFile((identifier, partname))
         for data in stream:
             yield data
         stream.close()
 
-    def getStream(self, id, partName):
-        return self._storage.getFile((id, partName))
+    def getStream(self, identifier, partname):
+        return self._storage.getFile((identifier, partname))
 
     def _listIdentifiers(self, identifierPrefix=''):
         lastIdentifier = None
@@ -105,16 +105,16 @@
                 yield identifier
                 lastIdentifier = identifier
 
-    def _listIdentifiersByPartName(self, partName, identifierPrefix=''):
-        for identifier, partname in self.glob((identifierPrefix, partName)):
+    def _listIdentifiersByPartName(self, partname, identifierPrefix=''):
+        for identifier, ignored in self.glob((identifierPrefix, partname)):
             yield identifier
 
-    def listIdentifiers(self, partName=None, identifierPrefix=''):
+    def listIdentifiers(self, partname=None, identifierPrefix=''):
         """Use an ifilter to hide the generator so it won't be consumed by compose"""
-        return ifilter(None, self._listIdentifiersByPartName(partName, identifierPrefix=identifierPrefix))
+        return ifilter(None, self._listIdentifiersByPartName(partname, identifierPrefix=identifierPrefix))
 
     def glob(self, (prefix, wantedPartname)):
-        def filterPrefixAndPart((identifier, partName)):
-            return identifier.startswith(prefix) and (wantedPartname == None or wantedPartname == partName)
+        def filterPrefixAndPart((identifier, partname)):
+            return identifier.startswith(prefix) and (wantedPartname == None or wantedPartname == partname)
 
         return ifilter(filterPrefixAndPart, self._storage.glob((prefix, wantedPartname)))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/meresco/components/venturi.py version_2/meresco/components/venturi.py
--- version_1/meresco/components/venturi.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/meresco/components/venturi.py	2010-10-21 16:09:47.000000000 +0200
@@ -71,9 +71,9 @@
             return ElementTree(anObject)
         return parse(StringIO(anObject))
 
-    def delete(self, id):
-        self.ctx.tx.locals['id'] = id
-        yield self.asyncdo.delete(id)
+    def delete(self, identifier):
+        self.ctx.tx.locals['id'] = identifier
+        yield self.asyncdo.delete(identifier=identifier)
 
 class VenturiException(Exception):
     pass
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/msgbox/updateadaptertest.py version_2/test/msgbox/updateadaptertest.py
--- version_1/test/msgbox/updateadaptertest.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/test/msgbox/updateadaptertest.py	2010-10-21 16:09:46.000000000 +0200
@@ -43,7 +43,7 @@
         adapter = UpdateAdapterToMsgbox()
         adapter.addObserver(self.msgbox)
         
-        list(adapter.add(identifier='identifier', filedata='data'))
+        list(adapter.add(identifier='identifier', partname='partname', data='data'))
         
         self.assertEquals('data', open(join(self.outdir, 'identifier.add')).read()) 
 
@@ -51,7 +51,7 @@
         adapter = UpdateAdapterToMsgbox()
         adapter.addObserver(self.msgbox)
         
-        list(adapter.delete('identifier'))
+        list(adapter.delete(identifier='identifier'))
         
         self.assertEquals('', open(join(self.outdir, 'identifier.delete')).read()) 
 
@@ -76,15 +76,17 @@
         self.msgbox.processFile('identifier.delete')
 
         self.assertEquals(['delete'], [m.name for m in observer.calledMethods])
-        self.assertEquals(('identifier',), observer.calledMethods[0].args)
+        self.assertEquals({'identifier':'identifier'}, observer.calledMethods[0].kwargs)
+        self.assertEquals((), observer.calledMethods[0].args)
 
     def testMsgboxAndFromAdapterAdd(self):
         adapter = UpdateAdapterFromMsgbox()
         observer = CallTrace('observer')
-        processAddKwargs = []
-        def processAdd(identifier=None, partname=None, filedata=None):
-            processAddKwargs.append((identifier, partname, filedata.read()))
-        observer.methods['add'] = processAdd
+        addKwargs = {}
+        def addMethod(filedata, **kwargs):
+            addKwargs['filedata'] = filedata.read()
+            addKwargs.update(kwargs)
+        observer.methods['add'] = addMethod
         self.msgbox.addObserver(adapter)
         adapter.addObserver(observer)
         f = open(join(self.indir, 'identifier.add'), 'w')
@@ -94,6 +96,9 @@
         self.msgbox.processFile('identifier.add')
 
         self.assertEquals(['add'], [m.name for m in observer.calledMethods])
-        self.assertEquals([('identifier', None, 'data')], processAddKwargs)
+        self.assertEquals('identifier', addKwargs['identifier'])
+        self.assertEquals(None, addKwargs['partname'])
+        self.assertEquals('data', addKwargs['filedata'])
+        self.assertEquals(3, len(addKwargs.items()))
 
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/rssitemtest.py version_2/test/rssitemtest.py
--- version_1/test/rssitemtest.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/test/rssitemtest.py	2010-10-21 16:09:46.000000000 +0200
@@ -113,7 +113,7 @@
 </item>""", result)
 
 class MockStorage(object):
-    def getStream(self, id, partname):
+    def getStream(self, identifier, partname):
         if partname == 'part1':
             return StringIO('<dc><title>Title</title><description>Description</description></dc>')
         elif partname == 'part2':
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_1/test/venturitest.py version_2/test/venturitest.py
--- version_1/test/venturitest.py	2010-10-20 15:30:00.000000000 +0200
+++ version_2/test/venturitest.py	2010-10-21 16:09:46.000000000 +0200
@@ -154,7 +154,7 @@
         __callstack_var_tx__ = CallTrace('Transaction')
         __callstack_var_tx__.locals={}
         v = Venturi(should=[('PARTNAME', '/document')],could=[])
-        list(v.delete('identifier'))
+        list(v.delete(identifier='identifier'))
         self.assertEquals('identifier', __callstack_var_tx__.locals['id'])
 
     def testPartInShouldDoesNotExist(self):
@@ -180,7 +180,7 @@
         v = Venturi()
         v.addObserver(observer)
 
-        result = list(compose(v.delete('identifier')))
+        result = list(compose(v.delete(identifier='identifier')))
 
         self.assertEquals([callable], result)
         self.assertEquals(['delete'], [m.name for m in observer.calledMethods])
