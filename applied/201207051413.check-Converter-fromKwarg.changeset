Changeset created on Thu Jul 05 14:13:29 UTC 2012 by Seecr (Seek You Too B.V.)

Description: checking in Converter.__init__ that fromKwarg has a value

    Added a guard to Convert.__init__ to make sure that fromKwarg has a value.
    Also made fromKwarg required in CQLConversion components (instead of silently not converting
    anything at all in case of forgotten fromKwarg).

Baseline version: 4.0.17

From 89f07e4838b5fc454cc4b07e0ae554b2adaef95c Mon Sep 17 00:00:00 2001
From: Seecr <development@seecr.nl>
Date: Thu, 5 Jul 2012 16:10:16 +0200
Subject: [PATCH] HM/JPM: added guard to Converter.__init__ to make sure that fromKwarg has a value

---
 meresco/components/converter.py           |    2 ++
 meresco/components/cqlconversion.py       |    6 +++---
 meresco/components/renamefieldforexact.py |   10 ++++++++++
 test/convertertest.py                     |   13 +++++++------
 4 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/meresco/components/converter.py b/meresco/components/converter.py
index 0181364..25df68f 100644
--- a/meresco/components/converter.py
+++ b/meresco/components/converter.py
@@ -35,6 +35,8 @@ from meresco.core import Observable
 
 class Converter(Observable):
     def __init__(self, fromKwarg, toKwarg=None, name=None):
+        if not fromKwarg:
+            raise ValueError("'fromKwarg' should contain a keyword argument name.")
         Observable.__init__(self, name=name)
         self._fromKwarg = fromKwarg
         self._toKwarg = toKwarg if toKwarg else self._fromKwarg
diff --git a/meresco/components/cqlconversion.py b/meresco/components/cqlconversion.py
index cf44a53..02da0cf 100644
--- a/meresco/components/cqlconversion.py
+++ b/meresco/components/cqlconversion.py
@@ -29,7 +29,7 @@
 # 
 ## end license ##
 
-from xmlpump import Converter
+from converter import Converter
 from cqlparser.cqlparser import CQLAbstractSyntaxNode
 from cqlparser import CqlVisitor
 
@@ -42,7 +42,7 @@ class CQLConversion(Converter):
         return self._astConversion(cqlAst)
 
 class CqlMultiSearchClauseConversion(CQLConversion):
-    def __init__(self, filtersAndModifiers, name=None, fromKwarg=None, toKwarg=None):
+    def __init__(self, filtersAndModifiers, fromKwarg, toKwarg=None, name=None):
         CQLConversion.__init__(self, self._convertAst, name=name, fromKwarg=fromKwarg, toKwarg=toKwarg)
         self._filtersAndModifiers = filtersAndModifiers
 
@@ -51,7 +51,7 @@ class CqlMultiSearchClauseConversion(CQLConversion):
         return cqlAst
 
 class CqlSearchClauseConversion(CqlMultiSearchClauseConversion):
-    def __init__(self, searchClauseFilter, modifier, name=None, fromKwarg=None, toKwarg=None):
+    def __init__(self, searchClauseFilter, modifier, fromKwarg, toKwarg=None, name=None):
         CqlMultiSearchClauseConversion.__init__(self, filtersAndModifiers=[(searchClauseFilter, modifier)], name=name, fromKwarg=fromKwarg, toKwarg=toKwarg)
     
 class CqlMultiSearchClauseModification(CqlVisitor):
diff --git a/meresco/components/renamefieldforexact.py b/meresco/components/renamefieldforexact.py
index ef45c07..96d8fb7 100644
--- a/meresco/components/renamefieldforexact.py
+++ b/meresco/components/renamefieldforexact.py
@@ -27,6 +27,8 @@
 
 class RenameFieldForExact(object):
     def __init__(self, untokenizedFields, untokenizedPrefix):
+        print 'RenameFieldForExact.__init__', untokenizedFields
+        from sys import stdout; stdout.flush()
         self._untokenizedFields = [f for f in untokenizedFields if not f.endswith('*')]
         self._untokenizedFieldPrefixes = [f[:-1] for f in untokenizedFields if f.endswith('*')]
         self._untokenizedPrefix = untokenizedPrefix
@@ -36,15 +38,23 @@ class RenameFieldForExact(object):
         if len(node.children) == 3 and \
                 node.children[1].children[0].children[0] == 'exact' and \
                 self._hasUntokenizedRenaming(node.children[0].children[0].children[0]):
+            print 'canModify!'
+            from sys import stdout; stdout.flush()
             return True
+        print 'cannot Modify!'
+        from sys import stdout; stdout.flush()
         return False
 
     def modify(self, node):
         term = node.children[0].children[0]
         term.children = (self._untokenizedPrefix + term.children[0],)
+        print 'modify', term.children
+        from sys import stdout; stdout.flush()
         return node
 
     def _hasUntokenizedRenaming(self, fieldname):
+        print '_hasUntokenizedRenaming', fieldname
+        from sys import stdout; stdout.flush()
         untokenizedField = self._untokenizedPrefix + fieldname
         return untokenizedField in self._untokenizedFields or any(untokenizedField.startswith(prefix) for prefix in self._untokenizedFieldPrefixes)
 
diff --git a/test/convertertest.py b/test/convertertest.py
index 39dfc6c..33cae90 100644
--- a/test/convertertest.py
+++ b/test/convertertest.py
@@ -32,20 +32,18 @@ from meresco.core import Observable
 from meresco.components import Converter
 
 
+class FourtytwoConverter(Converter):
+    def _convert(self, value):
+        return 42
+
 class ConverterTest(SeecrTestCase):
     def setUp(self):
-        class FourtytwoConverter(Converter):
-            def _convert(self, value):
-                return 42
-
         SeecrTestCase.setUp(self)
-
         self.observer1 = CallTrace('observer 1', returnValues={
             'f': (i for i in ['done']),
             'g': 'done'}, onlySpecifiedMethods=True)
         self.observer2 = CallTrace('observer 2', returnValues={
             'h': 'done2'}, onlySpecifiedMethods=True)
-
         self.observable = be(
             (Observable(),
                 (FourtytwoConverter(fromKwarg='data', toKwarg='fourtytwo'),
@@ -66,3 +64,6 @@ class ConverterTest(SeecrTestCase):
         self.assertEquals(1, len(self.observer2.calledMethods))
         self.assertEquals({'fourtytwo': 42}, self.observer2.calledMethods[0].kwargs)
 
+    def testFromKwargMustBeSpecified(self):
+        self.assertRaises(ValueError, lambda: FourtytwoConverter(fromKwarg=None))
+
-- 
1.7.2.5

