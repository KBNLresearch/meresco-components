Changeset created on Fri Nov 23 09:06:43 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Only show nextRecordPosition if less than limitBeyond

    With limitBeyond in searchRetrieve the nextRecordPosition can be limited. 
    This can be used for limiting startRecord and also not showing nextRecordPosition 

Baseline version: 4.3.10

From 41a56cdc1371ce9f16985d4e1ac7f3641392c309 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 23 Nov 2012 10:04:50 +0100
Subject: [PATCH] JJ/HM: limitBeyond for nextRecordPosition

---
 meresco/components/sru/sruhandler.py |    4 +++-
 test/sru/sruhandlertest.py           |   18 ++++++++++++++++++
 2 files changed, 21 insertions(+), 1 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index 0051448..4bec59d 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -63,6 +63,8 @@ class SruHandler(Observable):
     def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sruArguments=None, diagnostics=None, **kwargs):
         SRU_IS_ONE_BASED = 1
 
+        limitBeyond = kwargs.get('limitBeyond', None)
+
         t0 = self._timeNow()
         start = startRecord - SRU_IS_ONE_BASED
         cqlAbstractSyntaxTree = parseCQL(query)
@@ -106,7 +108,7 @@ class SruHandler(Observable):
         if recordsWritten:
             yield '</srw:records>'
             nextRecordPosition = start + recordsWritten
-            if nextRecordPosition < total:
+            if nextRecordPosition < total and (limitBeyond == None or (limitBeyond != None and limitBeyond > nextRecordPosition)):
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(sruArguments=sruArguments)
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index c4c496c..840c9fe 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -200,6 +200,24 @@ class SruHandlerTest(SeecrTestCase):
         self.assertEquals(10, executeCqlCallKwargs['start']) # SRU is 1 based
         self.assertEquals(25, executeCqlCallKwargs['stop'])
     
+    def testNextRecordPositionNotShownIfAfterLimitBeyond(self):
+        observer = CallTrace()
+        response = Response(total=100, hits=hitsRange(10, 11))
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
+        observer.returnValues['yieldRecord'] = lambda *a, **kw: (x for x in "record")
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
+
+        component = SruHandler()
+        component.addObserver(observer)
+
+        arguments = dict(startRecord=10, maximumRecords=2, query='query', recordPacking='string', recordSchema='schema', limitBeyond=10)
+        result = "".join(compose(component.searchRetrieve(sruArguments=arguments, **arguments)))
+        self.assertFalse("<srw:nextRecordPosition>" in result, result)
+   
     def testSearchRetrieveVersion11(self):
         queryArguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2}
         sruArguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x-recordSchema':['extra', 'evenmore']}
-- 
1.7.2.5

