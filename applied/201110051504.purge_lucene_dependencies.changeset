Changeset created on Wed Oct 05 15:04:08 CET 2011 by Seecr (Seek You Too B.V.)

Description: Removed Lucene Dependency

    Meresco 4 makes the move to Solr and therefore direct dependencies on Lucene are no longer desirable within Meresco-Components.
    Modules/components that have been removed: LuceneIndex, facetindex, ngram, NumberComparitor

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/4.0beta1-Seecr/version_0

diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/build-deps.txt version_1/build-deps.txt
--- version_0/build-deps.txt	2011-10-04 15:46:51.000000000 +0200
+++ version_1/build-deps.txt	2011-10-05 11:05:59.000000000 +0200
@@ -1,28 +1,2 @@
-#lenny:python-dev (>= 2.5)
-#lenny:python-dev (<< 2.6)
-#lenny:libglib2.0-dev (>= 2.16.6-2)
-#lenny:libglib2.0-dev (<< 2.16.7)
-#lenny:g++-4.3 (>= 4.3.2-1.1)
-#lenny:g++-4.3 (<< 4.4)
-#lenny:gcj-4.3 (>= 4.3.2-2.CQ2)
-#lenny:gcj-4.3 (<< 4.3.3)
-#lenny:libgcj9-dev (>= 4.3.2-2.CQ2)
-#lenny:libgcj9-dev (<< 4.3.3)
-#lenny:liblucene-core2-gcj9 (>= 2.2.0)
-#lenny:liblucene-core2-gcj9 (<< 2.2.1)
-#lenny:liblucene-core2-gcj9-dev (>= 2.2.0)
-#lenny:liblucene-core2-gcj9-dev (<< 2.2.1)
-#squeeze:python-dev (>= 2.6)
-#squeeze:python-dev (<< 2.7)
-#squeeze:libglib2.0-dev (>= 2.24.2-1)
-#squeeze:libglib2.0-dev (<< 2.24.3)
-#squeeze:g++-4.4 (>= 4.4.5-8)
-#squeeze:g++-4.4 (<< 4.5)
-#squeeze:gcj (>= 4:4.4.5-1)
-#squeeze:gcj (<< 4:4.4.6)
-#squeeze:libgcj10-dev (>= 4.4.5-2.CQ2)
-#squeeze:libgcj10-dev (<< 4.4.6)
-#squeeze:liblucene-core2-gcj10 (>= 2.2.0)
-#squeeze:liblucene-core2-gcj10 (<< 2.2.1)
-#squeeze:liblucene-core2-gcj10-dev (>= 2.2.0)
-#squeeze:liblucene-core2-gcj10-dev (<< 2.2.1)
+#squeeze:g++ (>= 4.4.5-8)
+#squeeze:g++ (<< 4.5)
Only in version_0/meresco/components/facetindex: clausecollector.py
Only in version_0/meresco/components/facetindex: cql2lucenequery.py
Only in version_0/meresco/components/facetindex: cqlparsetreetolucenequery.py
Only in version_0/meresco/components/facetindex: _docset.cpp
Only in version_0/meresco/components/facetindex: docset.h
Only in version_0/meresco/components/facetindex: _docsetlist.cpp
Only in version_0/meresco/components/facetindex: docsetlist.h
Only in version_0/meresco/components/facetindex: docsetlist.py
Only in version_0/meresco/components/facetindex: docset.py
Only in version_0/meresco/components/facetindex: document.py
Only in version_0/meresco/components/facetindex: drilldownfieldnames.py
Only in version_0/meresco/components/facetindex: drilldown.py
Only in version_0/meresco/components/facetindex: facetindex.h
Only in version_0/meresco/components/facetindex: fields2lucenedocument.py
Only in version_0/meresco/components/facetindex: functioncommand.py
Only in version_0/meresco/components/facetindex: fwpool2.h
Only in version_0/meresco/components/facetindex: fwpool.c
Only in version_0/meresco/components/facetindex: fwpool.h
Only in version_0/meresco/components/facetindex: gc.h
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/facetindex/__init__.py version_1/meresco/components/facetindex/__init__.py
--- version_0/meresco/components/facetindex/__init__.py	2011-10-04 15:46:50.000000000 +0200
+++ version_1/meresco/components/facetindex/__init__.py	2011-10-05 11:05:59.000000000 +0200
@@ -38,17 +38,6 @@
         sys.exit(status)                                     #DO_NOT_DISTRIBUTE
                                                              #DO_NOT_DISTRIBUTE
 
-from lucene import LuceneIndex
-from drilldown import Drilldown
-from drilldownfieldnames import DrilldownFieldnames
-from document import Document, IDFIELD, DocumentException
-from docset import DocSet
-from docsetlist import DocSetList
 from integerlist import IntegerList
-from trie import Trie
-from cql2lucenequery import CQL2LuceneQuery
-from fields2lucenedocument import Fields2LuceneDocumentTx
-from clausecollector import ClauseCollector
 from response import Response
-import merescolucene
 
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/facetindex/libfacetindex.py version_1/meresco/components/facetindex/libfacetindex.py
--- version_0/meresco/components/facetindex/libfacetindex.py	2011-10-04 15:46:50.000000000 +0200
+++ version_1/meresco/components/facetindex/libfacetindex.py	2011-10-05 11:05:59.000000000 +0200
@@ -34,94 +34,3 @@
 libFacetIndex = cdll.LoadLibrary(join(abspath(dirname(__file__)), '_facetindex.so'))
 print "libFacetIndex loaded"
 
-class MangleException(Exception): pass
-
-def mangle(names, argtypes):
-    """http://www.codesourcery.com/public/cxx-abi/abi.html#mangling"""
-    mangled_name = '_Z'
-    types = {
-        c_uint32:   'j',
-        c_uint:     'j',
-        c_int:      'i',
-        None:       'v',
-    }
-    mangled_name += 'N'
-    for name in names:
-        mangled_name += str(len(name)) + name
-    mangled_name += 'E'
-    for argtype in argtypes:
-        try:
-            builtin_type = types[argtype]
-        except KeyError:
-            raise MangleException('Mangling %s not supported yet.' % argtype)
-        mangled_name += types[argtype]
-    return mangled_name
-
-class c_method(object):
-    """ decorator for methods implemented in C
-    For a method MyClass.myMethod, it looks for MyClass_myMethod in the C-extension.
-    The class MyClass must have an attribute c_type reflecting the class in C.
-    Objects of MyClass must have the attribute _as_parameter_ set to a value of c_type
-    Classmethod decorators must be placed above the c_method decorator.
-    Type information is taken as parameters: c_method(argtypes: tuple, restype: object) and specified using ctypes types such as c_int etc.
-    The Python method is not called.  Use c_wrapper if you want it to be called.
-
-    class MYCLASS(Structure):
-        _fields_ = [("type", c_int, 2),
-                    ("ptr", c_int, 30)]
-
-    class MyClass(object):
-        c_type = MYCLASS
-
-        def __init__(self, c_obj):
-            self._as_parameter_ = c_obj
-
-        @classmethod
-        @c_wrapper(argtypes=(), restype=MYCLASS)
-        def create(clazz, c_funct):
-            c_obj = c_funct()
-            return DocSet(c_obj)
-
-        @c_method(argtypes=(c_uint32,), restype=c_int)
-        def contains(self, size):
-            pass
-    """
-
-    def __init__(self, argtypes, restype):
-        self._lib = libFacetIndex
-        self._argtypes = argtypes
-        self._restype = restype
-
-    def __call__(self, py_funct):
-        def helper(this, *args, **kwargs):
-            if not hasattr(py_funct, 'c_funct'):
-                clazz = this if type(this) == type else type(this)
-                try:
-                    c_name = mangle((clazz.__name__, py_funct.func_name), self._argtypes)
-                    c_funct = getattr(self._lib, c_name)
-                except (MangleException, AttributeError):
-                    c_name = clazz.__name__ + '_' + py_funct.func_name
-                    c_funct = getattr(self._lib, c_name)
-                if type(this) == type:
-                    c_funct.argtypes = self._argtypes
-                else:
-                    c_funct.argtypes = (this.c_type,) + self._argtypes
-                c_funct.restype = self._restype
-                py_funct.c_funct = c_funct
-            if type(this) != type and hasattr(this, 'from_param') and py_funct.func_name != 'from_param':
-                m = type(this).from_param
-                this = m(this._as_parameter_)
-            return self._doCall(this, py_funct, py_funct.c_funct, args, kwargs)
-        helper.func_name = py_funct.func_name + '_helper'
-        return helper
-
-    def _doCall(self, this, py_funct, c_funct, args, kwargs):
-        if type(this) == type:
-            return c_funct(*args, **kwargs)
-        return c_funct(this, *args, **kwargs)
-
-
-class c_wrapper(c_method):
-
-    def _doCall(self, this, py_funct, c_func, args, kwargs):
-        return py_funct(this, c_func, *args, **kwargs)
Only in version_0/meresco/components/facetindex: lucene-core-2.2.0.jar
Only in version_0/meresco/components/facetindex: lucenedocidtracker.py
Only in version_0/meresco/components/facetindex: lucene.py
Only in version_0/meresco/components/facetindex: merescolucene.py
Only in version_0/meresco/components/facetindex: MerescoStandardAnalyzer.java
Only in version_0/meresco/components/facetindex: _stringpool.cpp
Only in version_0/meresco/components/facetindex: stringpool.h
Only in version_0/meresco/components/facetindex: tools
Only in version_0/meresco/components/facetindex: trie_c.cpp
Only in version_0/meresco/components/facetindex: trie_c.h
Only in version_0/meresco/components/facetindex: _triedict.cpp
Only in version_0/meresco/components/facetindex: triedict.h
Only in version_0/meresco/components/facetindex: triedict.py
Only in version_0/meresco/components/facetindex: trie.py
Only in version_0/meresco/components/facetindex: zipper.c
Only in version_0/meresco/components/facetindex: zipper.h
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/ngram/__init__.py version_1/meresco/components/ngram/__init__.py
--- version_0/meresco/components/ngram/__init__.py	2011-10-04 15:46:50.000000000 +0200
+++ version_1/meresco/components/ngram/__init__.py	2011-10-05 11:05:59.000000000 +0200
@@ -27,6 +27,4 @@
 #
 ## end license ##
 
-from ngramquery import NGramQuery
 from suggester import RatioSuggester, LevenshteinSuggester
-from ngramindex import NGramIndex
Only in version_0/meresco/components/ngram: ngramindex.py
Only in version_0/meresco/components/ngram: ngramquery.py
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/meresco/components/numeric/__init__.py version_1/meresco/components/numeric/__init__.py
--- version_0/meresco/components/numeric/__init__.py	2011-10-04 15:46:50.000000000 +0200
+++ version_1/meresco/components/numeric/__init__.py	2011-10-05 11:05:59.000000000 +0200
@@ -26,6 +26,4 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-from numbercomparitorfieldlet import NumberComparitorFieldlet
-from numbercomparitormodifier import NumberComparitorCqlConversion, filterAndModifier
 
Only in version_0/meresco/components/numeric: numbercomparitorfieldlet.py
Only in version_0/meresco/components/numeric: numbercomparitormodifier.py
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/setup.py version_1/setup.py
--- version_0/setup.py	2011-10-04 15:46:51.000000000 +0200
+++ version_1/setup.py	2011-10-05 11:05:59.000000000 +0200
@@ -41,101 +41,13 @@
 from distutils.core import setup
 from distutils import log
 
-
-CLASSPATH = "meresco/components/facetindex/lucene-core-2.2.0.jar"
-class gcj_build_ext(build_ext):
-    """Adds GCJ compilation of Java sources into object files that get linked into the specified extension."""
-
-    def build_extension(self, ext):
-        # largely copied from distutils/command/build_ext.py, which lacks desired hooks
-        sources = ext.sources
-        if sources is None or type(sources) not in (ListType, TupleType):
-            raise DistutilsSetupError, \
-                  ("in 'ext_modules' option (extension '%s'), " +
-                   "'sources' must be present and must be " +
-                   "a list of source filenames") % ext.name
-
-        fullname = self.get_ext_fullname(ext.name)
-        if self.inplace:
-            # ignore build-lib -- put the compiled extension into
-            # the source tree along with pure Python modules
-
-            modpath = string.split(fullname, '.')
-            package = string.join(modpath[0:-1], '.')
-            base = modpath[-1]
-
-            build_py = self.get_finalized_command('build_py')
-            package_dir = build_py.get_package_dir(package)
-            ext_filename = os.path.join(package_dir,
-                                        self.get_ext_filename(base))
-        else:
-            ext_filename = os.path.join(self.build_lib,
-                                        self.get_ext_filename(fullname))
-        depends = sources + ext.depends
-        if not (self.force or newer_group(depends, ext_filename, 'newer')):
-            log.debug("skipping '%s' extension (up-to-date)", ext.name)
-            return
-
-        jsources = [src for src in sources if src.endswith('.java')]
-        jofiles = [self.oFileForJava(src, output_dir=self.build_temp) for src in jsources]
-        depends = jsources + ext.depends
-        compiledJava = False
-        if self.force or newer_group(depends, ext_filename, 'newer'):
-            log.info("building '%s' extension, compiling Java", ext.name)
-            self.compileJava(jsources,
-                             output_dir=self.build_temp)
-            compiledJava = True
-            self.force = True
-
-        ext.extra_objects = (ext.extra_objects if hasattr(ext, 'extra_objects') else []) + jofiles
-        ext.sources = [src for src in ext.sources if not src.endswith('.java')]
-        build_ext.build_extension(self, ext)
-
-        if compiledJava:
-            # XXX -- this is a Vile HACK!
-            #
-            # The setup.py script for Python on Unix needs to be able to
-            # get this list so it can perform all the clean up needed to
-            # avoid keeping object files around when cleaning out a failed
-            # build of an extension module.  Since Distutils does not
-            # track dependencies, we have to get rid of intermediates to
-            # ensure all the intermediates will be properly re-built.
-            #
-            self._built_objects = jofiles + (self._built_objects or [])
-
-    def oFileForJava(self, source, output_dir):
-        return "%s/%s.o" % (output_dir, os.path.splitext(source)[0])
-
-    def gcj_command(self):
-        r = compile("gcj-[0-9].[0-9]")
-        return [x for x in os.listdir("/usr/bin") if r.match(x)][0]
-
-    def compileJava(self, sources, output_dir):
-        for sourceFile in sources:
-            oFile = self.oFileForJava(sourceFile, output_dir)
-            try:
-                os.makedirs(os.path.dirname(oFile))
-            except OSError:
-                pass
-            cl = "CLASSPATH=%s %s -fPIC -c %s -o %s" % (CLASSPATH, self.gcj_command(), sourceFile, oFile)
-            log.info(cl)
-            rv = os.system(cl)
-            if rv != 0:
-                print "Build failed, exiting."
-                sys.exit(rv)
-
-
 setup(
-    cmdclass={
-              'build_ext': gcj_build_ext,
-             },
     name = 'meresco-components',
     packages = [
         'meresco.components',
         'meresco.components.autocomplete',
         'meresco.components.drilldown',
         'meresco.components.facetindex',
-        'meresco.components.facetindex.tools',
         'meresco.components.http',
         'meresco.components.log',
         'meresco.components.ngram',
@@ -160,33 +72,20 @@
     },
     ext_modules = [
         Extension("meresco.components.facetindex._facetindex", [
-                      'meresco/components/facetindex/zipper.c',
-                      'meresco/components/facetindex/_docsetlist.cpp',
-                      'meresco/components/facetindex/_docset.cpp',
                       'meresco/components/facetindex/_integerlist.cpp',
-                      'meresco/components/facetindex/fwpool.c',
-                      'meresco/components/facetindex/trie_c.cpp',
-                      'meresco/components/facetindex/_triedict.cpp',
-                      'meresco/components/facetindex/_stringpool.cpp',
-                      'meresco/components/facetindex/MerescoStandardAnalyzer.java',
                   ],
                   extra_compile_args = [
                       '-g', 
-                      '-I/usr/include/glib-2.0',
-                      '-I/usr/lib/glib-2.0/include',
                       '-O3'
                   ],
-                  extra_link_args = [
-                      '-llucene-core',
-                  ],
         )
     ],
     version = '%VERSION%',
-    url = 'http://www.cq2.nl',
-    author = 'Seek You Too',
-    author_email = 'info@cq2.nl',
-    description = 'Meresco Components are components to build and archives, based on Meresco Core.',
-    long_description = 'Meresco Components are components to build and archives, based on Meresco Core.',
+    url = 'http://seecr.nl',
+    author = 'Seecr (Seek You Too B.V.)',
+    author_email = 'info@seecr.nl',
+    description = 'Meresco Components are components to build search engines and archives, based on Meresco Core.',
+    long_description = 'Meresco Components are components to build search engines and archives, based on Meresco Core.',
     license = 'GPL',
-    platforms='all',
+    platforms = 'all',
 )
diff --unidirectional-new-file --recursive --unified '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' version_0/test/_alltests.py version_1/test/_alltests.py
--- version_0/test/_alltests.py	2011-10-04 15:46:49.000000000 +0200
+++ version_1/test/_alltests.py	2011-10-05 11:05:59.000000000 +0200
@@ -96,9 +96,6 @@
 from log.querylogtest import QueryLogTest
 
 from numeric.converttest import ConvertTest
-from numeric.numbercomparitorfieldlettest import NumberComparitorFieldletTest
-from numeric.numbercomparitormodifiertest import NumberComparitorModifierTest
-from numeric.numbercomparitortest import NumberComparitorTest
 
 from sru.srufielddrilldowntest import SRUFieldDrilldownTest
 from sru.sruhandlertest import SruHandlerTest
@@ -109,31 +106,8 @@
 
 from xml_generic.validatetest import ValidateTest
 
-from facetindex.clausecollectortest import ClauseCollectorTest
-from facetindex.cql2lucenequerytest import Cql2LuceneQueryTest
-from facetindex.cqlparsetreetolucenequerytest import CqlParseTreeToLuceneQueryTest
-from facetindex.docsetlisttest import DocSetListTest
-from facetindex.docsetlistintersecttest import DocSetListIntersectTest
-from facetindex.docsettest import DocSetTest
-from facetindex.documenttest import DocumentTest
-from facetindex.drilldowntest import DrilldownTest
-from facetindex.drilldownfieldnamestest import DrilldownFieldnamesTest
-from facetindex.fields2lucenedocumenttest import Fields2LuceneDocumentTest
-from facetindex.incrementalindexingtest import IncrementalIndexingTest
-from facetindex.integerlisttest import IntegerListTest
-from facetindex.libfacetindextest import LibFacetIndexTest
-from facetindex.lucenedocidtrackertest import LuceneDocIdTrackerTest
-from facetindex.lucenetest import LuceneTest
-from facetindex.pooltest import PoolTest
-from facetindex.tools.lucenetoolstest import LuceneToolsTest
-from facetindex.triedicttest import TrieDictTest
-from facetindex.trietest import TrieTest
-
 from ngram.cqlsuggestertest import CqlSuggesterTest
 from ngram.cqltermvisitortest import CqlTermVisitorTest
-from ngram.ngramindextest import NGramIndexTest
-from ngram.ngramquerytest import NGramQueryTest
-from ngram.ngramtest import NGramTest
 
 from msgbox.msgboxtest import MsgboxTest
 from msgbox.updateadaptertest import UpdateAdapterTest
Only in version_0/test: facetindex
Only in version_0/test/ngram: ngramindextest.py
Only in version_0/test/ngram: ngramquerytest.py
Only in version_0/test/ngram: ngramtest.py
Only in version_0/test/numeric: numbercomparitorfieldlettest.py
Only in version_0/test/numeric: numbercomparitormodifiertest.py
Only in version_0/test/numeric: numbercomparitortest.py
