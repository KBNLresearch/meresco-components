Changeset created on Mon Nov 26 11:18:27 UTC 2012 by Seecr (Seek You Too B.V.)

Description: ParseArguments as optparse wrapper

    ParseArguments is a wrapper for optparse and adds an additional 'mandatory'
    argument to optparse's Option.

    Use something like:

    parser = ParseArguments()
    parser.addOption('', '--name', help='The name', mandatory=True)
    options, arguments = parser.parse()

    The additional 'mandatory' will cause an Exception if that argument is missing.
    Except for 'mandatory' it uses the same args and kwargs as optparse.Option

Baseline version: 4.3.12

From 964de75ead2714acb1ac2d4a985567f0dc479065 Mon Sep 17 00:00:00 2001
From: Thijs Janssen <thijs@seecr.nl>
Date: Mon, 26 Nov 2012 12:11:16 +0100
Subject: [PATCH] JJ/TJ: added ParseArguments as wrapper for optparse, with additional mandatory flag.

---
 meresco/components/__init__.py       |    1 +
 meresco/components/parsearguments.py |   58 ++++++++++++++++++++++++++++++++++
 test/_alltests.py                    |    1 +
 test/parseargumentstest.py           |   53 +++++++++++++++++++++++++++++++
 4 files changed, 113 insertions(+), 0 deletions(-)
 create mode 100644 meresco/components/parsearguments.py
 create mode 100644 test/parseargumentstest.py

diff --git a/meresco/components/__init__.py b/meresco/components/__init__.py
index 784c361..29b1900 100644
--- a/meresco/components/__init__.py
+++ b/meresco/components/__init__.py
@@ -51,6 +51,7 @@ from inbox import Inbox
 from iteratorasstream import IteratorAsStream
 from multileveldrilldown import MultiLevelDrilldown, MultiLevelDrilldownException
 from parsecql import ParseCQL
+from parsearguments import ParseArguments
 from periodicdownload import PeriodicDownload
 from persistentsortedintegerlist import PersistentSortedIntegerList
 from reindex import Reindex
diff --git a/meresco/components/parsearguments.py b/meresco/components/parsearguments.py
new file mode 100644
index 0000000..61ac037
--- /dev/null
+++ b/meresco/components/parsearguments.py
@@ -0,0 +1,58 @@
+## begin license ##
+# 
+# "NBC+" also known as "ZP (ZoekPlatform)" is
+#  initiated by Stichting Bibliotheek.nl to provide a new search service
+#  for all public libraries in the Netherlands. 
+# 
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
+# 
+# This file is part of "NBC+ (Zoekplatform BNL)"
+# 
+# "NBC+ (Zoekplatform BNL)" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "NBC+ (Zoekplatform BNL)" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "NBC+ (Zoekplatform BNL)"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from optparse import OptionParser, Option
+
+from sys import exit
+
+class ParseArguments(object):
+    def __init__(self):
+        self._parser = OptionParser()
+        self._mandatoryKeys = []
+        self.print_help = self._parser.print_help
+
+    def _parse(self, args=None):
+        options, arguments = self._parser.parse_args(args)
+        for key in self._mandatoryKeys:
+            if getattr(options, key, None) == None:
+                raise ValueError("Option '%s' is missing." % key)
+        return options, arguments
+
+    def addOption(self, *args, **kwargs):
+        mandatory = kwargs.pop('mandatory', False)
+        option = Option(*args, **kwargs)
+        if mandatory:
+            self._mandatoryKeys.append(option.dest)
+        self._parser.add_option(option)
+
+    def parse(self, args=None):
+        try:
+            return self._parse(args=args)
+        except ValueError, e:
+            print '\033[1;31m%s\033[0m' % str(e)
+            self.print_help()
+            exit(1)
diff --git a/test/_alltests.py b/test/_alltests.py
index 155226a..7b895ae 100644
--- a/test/_alltests.py
+++ b/test/_alltests.py
@@ -64,6 +64,7 @@ from iteratorasstreamtest import IteratorAsStreamTest
 from multileveldrilldowntest import MultiLevelDrilldownTest
 from packertest import PackerTest
 from parsecqltest import ParseCQLTest
+from parseargumentstest import ParseArgumentsTest
 from periodicdownloadtest import PeriodicDownloadTest
 from persistentsortedintegerlisttest import PersistentSortedIntegerListTest
 from reindextest import ReindexTest
diff --git a/test/parseargumentstest.py b/test/parseargumentstest.py
new file mode 100644
index 0000000..311fbfd
--- /dev/null
+++ b/test/parseargumentstest.py
@@ -0,0 +1,53 @@
+## begin license ##
+# 
+# "NBC+" also known as "ZP (ZoekPlatform)" is
+#  initiated by Stichting Bibliotheek.nl to provide a new search service
+#  for all public libraries in the Netherlands. 
+# 
+# Copyright (C) 2011-2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://www.bibliotheek.nl
+# 
+# This file is part of "NBC+ (Zoekplatform BNL)"
+# 
+# "NBC+ (Zoekplatform BNL)" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "NBC+ (Zoekplatform BNL)" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "NBC+ (Zoekplatform BNL)"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from unittest import TestCase
+from meresco.components import ParseArguments
+
+class ParseArgumentsTest(TestCase):
+    def testMandatoryKey(self):
+        parser = ParseArguments()
+        parser.addOption('', '--name', help='Naam', mandatory=True)
+        parser.addOption('', '--port', help='Port', type='int', mandatory=True)
+        argv = ['script', '--name', 'TestServer', '--port', '1234']
+        options, arguments = parser.parse(argv)
+        self.assertEquals(1234, options.port)
+        self.assertEquals('TestServer', options.name)
+        argv = ['script', '--port', '1234']
+        self.assertRaises(ValueError, parser._parse, argv)
+
+    def testAdditionalOptions_optional(self):
+        argv = ['script', '--name', 'TestServer']
+        parser = ParseArguments()
+        parser.addOption('', '--name', help='Naam', mandatory=True)
+        parser.addOption('', '--port', help='Port', type='int')
+        parser.addOption('', '--withDefault', help='Default', default="default", type='str')
+        options, arguments = parser.parse(argv)
+        self.assertEquals('TestServer', options.name)
+        self.assertEquals(None, options.port)
+        self.assertEquals('default', options.withDefault)
+
-- 
1.7.2.5

