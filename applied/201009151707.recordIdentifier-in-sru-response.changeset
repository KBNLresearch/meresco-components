Changeset created on Wed Sep 15 17:07:49 CEST 2010 by Seek You Too

Description: Added optional recordIdentifier to sru repsonse

    An sru query with version 2.1 will give an response with the recordIdentifier in the record as specified in sru 1.2

Baseline version: meresco-components/workingsets/3.1.3-Edurep/version_4

diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/sru/sruhandler.py version_5/meresco/components/sru/sruhandler.py
--- version_4/meresco/components/sru/sruhandler.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/meresco/components/sru/sruhandler.py	2010-09-15 17:06:56.000000000 +0200
@@ -33,7 +33,7 @@
 from cqlparser import parseString as parseCQL
 from weightless import compose
 
-from sruparser import VERSION, DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
+from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
 
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet', 'x-recordSchema']
 
@@ -54,13 +54,13 @@
         except Exception, e:
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
-        yield self._startResults(total)
+        yield self._startResults(total, version)
 
         recordsWritten = 0
         for recordId in recordIds:
             if not recordsWritten:
                 yield '<srw:records>'
-            yield self._writeResult(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId, **kwargs)
+            yield self._writeResult(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId, version=version, **kwargs)
             recordsWritten += 1
 
         if recordsWritten:
@@ -97,18 +97,20 @@
         except Exception, e:
             yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape(str(e))])
 
-    def _startResults(self, numberOfRecords):
+    def _startResults(self, numberOfRecords, version):
         yield RESPONSE_HEADER
-        yield '<srw:version>%s</srw:version>' % VERSION
+        yield '<srw:version>%s</srw:version>' % version 
         yield '<srw:numberOfRecords>%s</srw:numberOfRecords>' % numberOfRecords
 
     def _endResults(self):
         yield RESPONSE_FOOTER
 
-    def _writeResult(self, recordSchema=None, recordPacking=None, recordId=None, **kwargs):
+    def _writeResult(self, recordSchema=None, recordPacking=None, recordId=None, version=None, **kwargs):
         yield '<srw:record>'
         yield '<srw:recordSchema>%s</srw:recordSchema>' % recordSchema
         yield '<srw:recordPacking>%s</srw:recordPacking>' % recordPacking
+        if version == "1.2": 
+            yield '<srw:recordIdentifier>%s</srw:recordIdentifier>' % recordId
         yield self._writeRecordData(recordSchema=recordSchema, recordPacking=recordPacking, recordId=recordId)
         yield self._writeExtraRecordData(recordPacking=recordPacking, recordId=recordId, **kwargs)
         yield '</srw:record>'
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/sru/sruparser.py version_5/meresco/components/sru/sruparser.py
--- version_4/meresco/components/sru/sruparser.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/meresco/components/sru/sruparser.py	2010-09-15 17:06:56.000000000 +0200
@@ -37,7 +37,8 @@
 from diagnostic import DIAGNOSTIC
 from diagnostic import GENERAL_SYSTEM_ERROR, SYSTEM_TEMPORARILY_UNAVAILABLE, UNSUPPORTED_OPERATION, UNSUPPORTED_VERSION, UNSUPPORTED_PARAMETER_VALUE, MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, QUERY_FEATURE_UNSUPPORTED
 
-VERSION = '1.1'
+DEFAULT_VERSION = '1.1'
+SUPPORTED_VERSIONS = ['1.1', '1.2']
 DEFAULT_MAXIMUMRECORDS = '10'
 
 XML_HEADER = '<?xml version="1.0" encoding="UTF-8"?>'
@@ -59,7 +60,7 @@
 
 RESPONSE_FOOTER = """</srw:searchRetrieveResponse>"""
 
-DIAGNOSTICS = """%s%s%s<srw:diagnostics>%s</srw:diagnostics>%s""" % (RESPONSE_HEADER, '<srw:version>%s</srw:version>' % VERSION, '<srw:numberOfRecords>0</srw:numberOfRecords>', DIAGNOSTIC, RESPONSE_FOOTER)
+DIAGNOSTICS = """%s%s%s<srw:diagnostics>%s</srw:diagnostics>%s""" % (RESPONSE_HEADER, '<srw:version>%s</srw:version>' % DEFAULT_VERSION, '<srw:numberOfRecords>0</srw:numberOfRecords>', DIAGNOSTIC, RESPONSE_FOOTER)
 
 
 class SruException(Exception):
@@ -160,7 +161,7 @@
 
     def _parseArguments(self, arguments):
         if arguments == {}:
-            arguments = {'version':[VERSION], 'operation':['explain']}
+            arguments = {'version':[DEFAULT_VERSION], 'operation':['explain']}
         operation = arguments.get('operation', [None])[0]
         self._validateArguments(operation, arguments)
         return operation, arguments
@@ -182,7 +183,7 @@
             if not argument in arguments:
                 raise SruException(MANDATORY_PARAMETER_NOT_SUPPLIED, argument)
 
-        if not arguments['version'][0] == VERSION:
+        if not arguments['version'][0] in SUPPORTED_VERSIONS:
             raise SruException(UNSUPPORTED_VERSION, arguments['version'][0])
 
     def _validateCorrectEncoding(self, arguments):
@@ -194,8 +195,8 @@
         except UnicodeDecodeError:
             raise SruException(UNSUPPORTED_PARAMETER_VALUE, "Parameters are not properly 'utf-8' encoded.")
 
-    def _explain(self, *args, **kwargs):
-        version = VERSION
+    def _explain(self, arguments):
+        version = arguments['version'][0]
         host = self._host
         port = self._port
         description = self._description
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/venturi.py version_5/meresco/components/venturi.py
--- version_4/meresco/components/venturi.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/meresco/components/venturi.py	2010-09-15 17:06:56.000000000 +0200
@@ -28,7 +28,7 @@
 ## end license ##
 
 from meresco.core import Observable
-from lxml.etree import _Element, ElementTree, parse
+from lxml.etree import _Element, ElementTree, parse, XMLParser
 from StringIO import StringIO
 
 class Venturi(Observable):
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/xml_generic/schemas/srw-types1.1.xsd version_5/meresco/components/xml_generic/schemas/srw-types1.1.xsd
--- version_4/meresco/components/xml_generic/schemas/srw-types1.1.xsd	1970-01-01 01:00:00.000000000 +0100
+++ version_5/meresco/components/xml_generic/schemas/srw-types1.1.xsd	2010-09-15 17:06:56.000000000 +0200
@@ -0,0 +1,124 @@
+<xsd:schema
+           targetNamespace="http://www.loc.gov/zing/srw/"
+           xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/"
+           xmlns="http://www.loc.gov/zing/srw/"
+           xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+           elementFormDefault="qualified"
+           attributeFormDefault="unqualified">
+    <xsd:import namespace="http://www.loc.gov/zing/srw/diagnostic/" schemaLocation="http://www.loc.gov/standards/sru/xml-files/diagnostics.xsd"/>
+    <xsd:complexType name="requestType">
+        <xsd:sequence>
+            <xsd:element ref="version"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="responseType">
+        <xsd:sequence>
+            <xsd:element ref="version"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="searchRetrieveRequest" type="searchRetrieveRequestType" nillable="false"/>
+    <xsd:complexType name="searchRetrieveRequestType">
+        <xsd:complexContent>
+            <xsd:extension base="requestType">
+                <xsd:sequence>
+                    <xsd:element ref="query"/>
+                    <xsd:element ref="startRecord" minOccurs="0"/>
+                    <xsd:element ref="maximumRecords" minOccurs="0"/>
+                    <xsd:element ref="recordPacking" minOccurs="0"/>
+                    <xsd:element ref="recordSchema" minOccurs="0"/>
+                    <xsd:element ref="sortKeys" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="searchRetrieveResponse" type="searchRetrieveResponseType" nillable="false"/>
+    <xsd:complexType name="searchRetrieveResponseType">
+        <xsd:complexContent>
+            <xsd:extension base="responseType">
+                <xsd:sequence>
+                    <xsd:element ref="numberOfRecords"/>
+                    <xsd:element ref="records" minOccurs="0"/>
+                    <xsd:element ref="nextRecordPosition" minOccurs="0"/>
+                    <xsd:element ref="echoedSearchRetrieveRequest" minOccurs="0"/>
+                    <xsd:element ref="diagnostics" minOccurs="0"/>
+                    <xsd:element ref="extraResponseData" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="version" type="xsd:string" nillable="false"/>
+    <xsd:element name="query" type="xsd:string" nillable="false"/>
+    <xsd:element name="startRecord" type="xsd:positiveInteger" default="1" nillable="false"/>
+    <xsd:element name="maximumRecords" type="xsd:nonNegativeInteger" nillable="false"/>
+    <xsd:element name="recordPacking" type="xsd:string" nillable="false"/>
+    <xsd:element name="recordSchema" type="xsd:string" nillable="false"/>
+    <xsd:element name="sortKeys" type="xsd:string" nillable="false"/>
+    <xsd:element name="extraRequestData" type="extraDataType" nillable="false"/>
+    <xsd:element name="numberOfRecords" type="xsd:nonNegativeInteger" nillable="false"/>
+    <xsd:element name="records" type="recordsType" nillable="false"/>
+    <xsd:complexType name="recordsType">
+        <xsd:sequence>
+            <xsd:element ref="record" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="record" type="recordType" nillable="false"/>
+    <xsd:complexType name="recordType">
+        <xsd:sequence>
+            <xsd:element ref="recordSchema"/>
+            <xsd:element ref="recordPacking"/>
+            <xsd:element ref="recordData"/>
+            <xsd:element ref="recordPosition" minOccurs="0"/>
+            <xsd:element ref="extraRecordData" minOccurs="0"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="recordData" type="stringOrXmlFragment" nillable="false"/>
+    <xsd:element name="recordPosition" type="xsd:positiveInteger" nillable="false"/>
+    <xsd:element name="extraRecordData" type="extraDataType" nillable="false"/>
+    <xsd:element name="nextRecordPosition" type="xsd:positiveInteger" nillable="false"/>
+    <xsd:element name="diagnostics" type="diagnosticsType" nillable="false"/>
+    <xsd:complexType name="diagnosticsType">
+        <xsd:sequence>
+            <xsd:element ref="diag:diagnostic" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="extraResponseData" type="extraDataType" nillable="false"/>
+    <xsd:element name="echoedSearchRetrieveRequest" type="echoedSearchRetrieveRequestType" nillable="false"/>
+    <xsd:complexType name="echoedSearchRetrieveRequestType">
+        <xsd:complexContent>
+            <xsd:extension base="requestType">
+                <xsd:sequence>
+                    <xsd:element ref="query"/>
+                    <xsd:element ref="startRecord" minOccurs="0"/>
+                    <xsd:element ref="maximumRecords" minOccurs="0"/>
+                    <xsd:element ref="recordPacking" minOccurs="0"/>
+                    <xsd:element ref="recordSchema" minOccurs="0"/>
+                    <xsd:element ref="sortKeys" minOccurs="0"/>
+                    <xsd:element ref="extraRequestData" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="path" type="xsd:string" nillable="false"/>
+    <xsd:element name="schema" type="xsd:string" nillable="false"/>
+    <xsd:element name="ascending" type="xsd:boolean" nillable="false"/>
+    <xsd:element name="caseSensitive" type="xsd:boolean" nillable="false"/>
+    <xsd:element name="missingValue" type="xsd:string" nillable="false"/>
+    <xsd:complexType name="extraDataType">
+        <xsd:sequence>
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="xmlFragment" mixed="false">
+        <xsd:sequence>
+            <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="stringOrXmlFragment" mixed="true">
+        <xsd:sequence>
+            <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="x-term-drilldown" type="xsd:string" nillable="false"/>
+    <xsd:element name="x-field-drilldown" type="xsd:string" nillable="false"/>
+    <xsd:element name="x-field-drilldown-fields" type="xsd:string" nillable="false"/>
+</xsd:schema>
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/xml_generic/schemas/srw-types1.2.xsd version_5/meresco/components/xml_generic/schemas/srw-types1.2.xsd
--- version_4/meresco/components/xml_generic/schemas/srw-types1.2.xsd	1970-01-01 01:00:00.000000000 +0100
+++ version_5/meresco/components/xml_generic/schemas/srw-types1.2.xsd	2010-09-15 17:06:56.000000000 +0200
@@ -0,0 +1,126 @@
+<xsd:schema
+           targetNamespace="http://www.loc.gov/zing/srw/"
+           xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/"
+           xmlns="http://www.loc.gov/zing/srw/"
+           xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+           elementFormDefault="qualified"
+           attributeFormDefault="unqualified">
+    <xsd:import namespace="http://www.loc.gov/zing/srw/diagnostic/" schemaLocation="http://www.loc.gov/standards/sru/xml-files/diagnostics.xsd"/>
+    <xsd:complexType name="requestType">
+        <xsd:sequence>
+            <xsd:element ref="version"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="responseType">
+        <xsd:sequence>
+            <xsd:element ref="version"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="searchRetrieveRequest" type="searchRetrieveRequestType" nillable="false"/>
+    <xsd:complexType name="searchRetrieveRequestType">
+        <xsd:complexContent>
+            <xsd:extension base="requestType">
+                <xsd:sequence>
+                    <xsd:element ref="query"/>
+                    <xsd:element ref="startRecord" minOccurs="0"/>
+                    <xsd:element ref="maximumRecords" minOccurs="0"/>
+                    <xsd:element ref="recordPacking" minOccurs="0"/>
+                    <xsd:element ref="recordSchema" minOccurs="0"/>
+                    <xsd:element ref="sortKeys" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="searchRetrieveResponse" type="searchRetrieveResponseType" nillable="false"/>
+    <xsd:complexType name="searchRetrieveResponseType">
+        <xsd:complexContent>
+            <xsd:extension base="responseType">
+                <xsd:sequence>
+                    <xsd:element ref="numberOfRecords"/>
+                    <xsd:element ref="records" minOccurs="0"/>
+                    <xsd:element ref="nextRecordPosition" minOccurs="0"/>
+                    <xsd:element ref="echoedSearchRetrieveRequest" minOccurs="0"/>
+                    <xsd:element ref="diagnostics" minOccurs="0"/>
+                    <xsd:element ref="extraResponseData" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="version" type="xsd:string" nillable="false"/>
+    <xsd:element name="query" type="xsd:string" nillable="false"/>
+    <xsd:element name="startRecord" type="xsd:positiveInteger" default="1" nillable="false"/>
+    <xsd:element name="maximumRecords" type="xsd:nonNegativeInteger" nillable="false"/>
+    <xsd:element name="recordPacking" type="xsd:string" nillable="false"/>
+    <xsd:element name="recordSchema" type="xsd:string" nillable="false"/>
+    <xsd:element name="sortKeys" type="xsd:string" nillable="false"/>
+    <xsd:element name="extraRequestData" type="extraDataType" nillable="false"/>
+    <xsd:element name="numberOfRecords" type="xsd:nonNegativeInteger" nillable="false"/>
+    <xsd:element name="records" type="recordsType" nillable="false"/>
+    <xsd:complexType name="recordsType">
+        <xsd:sequence>
+            <xsd:element ref="record" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="record" type="recordType" nillable="false"/>
+    <xsd:complexType name="recordType">
+        <xsd:sequence>
+            <xsd:element ref="recordSchema"/>
+            <xsd:element ref="recordPacking"/>
+            <xsd:element ref="recordIdentifier" minOccurs="0" maxOccurs="1"/>
+            <xsd:element ref="recordData"/>
+            <xsd:element ref="recordPosition" minOccurs="0"/>
+            <xsd:element ref="extraRecordData" minOccurs="0"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="recordData" type="stringOrXmlFragment" nillable="false"/>
+    <xsd:element name="recordIdentifier" type="xsd:string" nillable="false"/>
+    <xsd:element name="recordPosition" type="xsd:positiveInteger" nillable="false"/>
+    <xsd:element name="extraRecordData" type="extraDataType" nillable="false"/>
+    <xsd:element name="nextRecordPosition" type="xsd:positiveInteger" nillable="false"/>
+    <xsd:element name="diagnostics" type="diagnosticsType" nillable="false"/>
+    <xsd:complexType name="diagnosticsType">
+        <xsd:sequence>
+            <xsd:element ref="diag:diagnostic" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="extraResponseData" type="extraDataType" nillable="false"/>
+    <xsd:element name="echoedSearchRetrieveRequest" type="echoedSearchRetrieveRequestType" nillable="false"/>
+    <xsd:complexType name="echoedSearchRetrieveRequestType">
+        <xsd:complexContent>
+            <xsd:extension base="requestType">
+                <xsd:sequence>
+                    <xsd:element ref="query"/>
+                    <xsd:element ref="startRecord" minOccurs="0"/>
+                    <xsd:element ref="maximumRecords" minOccurs="0"/>
+                    <xsd:element ref="recordPacking" minOccurs="0"/>
+                    <xsd:element ref="recordSchema" minOccurs="0"/>
+                    <xsd:element ref="sortKeys" minOccurs="0"/>
+                    <xsd:element ref="extraRequestData" minOccurs="0"/>
+                </xsd:sequence>
+            </xsd:extension>
+        </xsd:complexContent>
+    </xsd:complexType>
+    <xsd:element name="path" type="xsd:string" nillable="false"/>
+    <xsd:element name="schema" type="xsd:string" nillable="false"/>
+    <xsd:element name="ascending" type="xsd:boolean" nillable="false"/>
+    <xsd:element name="caseSensitive" type="xsd:boolean" nillable="false"/>
+    <xsd:element name="missingValue" type="xsd:string" nillable="false"/>
+    <xsd:complexType name="extraDataType">
+        <xsd:sequence>
+            <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="xmlFragment" mixed="false">
+        <xsd:sequence>
+            <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:complexType name="stringOrXmlFragment" mixed="true">
+        <xsd:sequence>
+            <xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
+        </xsd:sequence>
+    </xsd:complexType>
+    <xsd:element name="x-term-drilldown" type="xsd:string" nillable="false"/>
+    <xsd:element name="x-field-drilldown" type="xsd:string" nillable="false"/>
+    <xsd:element name="x-field-drilldown-fields" type="xsd:string" nillable="false"/>
+</xsd:schema>
Only in version_4/meresco/components/xml_generic/schemas: srw-types.xsd
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/meresco/components/xmlxpath.py version_5/meresco/components/xmlxpath.py
--- version_4/meresco/components/xmlxpath.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/meresco/components/xmlxpath.py	2010-09-15 17:06:56.000000000 +0200
@@ -79,4 +79,3 @@
                     yield element
                 else:
                     yield ElementTree(element)
-
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/test/sru/sruhandlertest.py version_5/test/sru/sruhandlertest.py
--- version_4/test/sru/sruhandlertest.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/test/sru/sruhandlertest.py	2010-09-15 17:06:56.000000000 +0200
@@ -144,8 +144,8 @@
         executeCqlCallKwargs = observer.calledMethods[0].kwargs
         self.assertEquals(10, executeCqlCallKwargs['start']) # SRU is 1 based
         self.assertEquals(25, executeCqlCallKwargs['stop'])
-
-    def testSearchRetrieve(self):
+    
+    def testSearchRetrieveVersion11(self):
         arguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
@@ -164,6 +164,78 @@
         component.addObserver(observer)
 
         result = "".join(compose(component.searchRetrieve(**arguments)))
+
+        self.assertEqualsWS("""
+<srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
+    <srw:version>1.1</srw:version>
+    <srw:numberOfRecords>100</srw:numberOfRecords>
+    <srw:records>
+        <srw:record>
+            <srw:recordSchema>schema</srw:recordSchema>
+            <srw:recordPacking>xml</srw:recordPacking>
+            <srw:recordData>
+                <MOCKED_WRITTEN_DATA>11-schema</MOCKED_WRITTEN_DATA>
+            </srw:recordData>
+            <srw:extraRecordData>
+                <recordData recordSchema="extra">
+                    <MOCKED_WRITTEN_DATA>11-extra</MOCKED_WRITTEN_DATA>
+                </recordData>
+                <recordData recordSchema="evenmore">
+                    <MOCKED_WRITTEN_DATA>11-evenmore</MOCKED_WRITTEN_DATA>
+                </recordData>
+            </srw:extraRecordData>
+        </srw:record>
+        <srw:record>
+            <srw:recordSchema>schema</srw:recordSchema>
+            <srw:recordPacking>xml</srw:recordPacking>
+            <srw:recordData>
+                <MOCKED_WRITTEN_DATA>12-schema</MOCKED_WRITTEN_DATA>
+            </srw:recordData>
+            <srw:extraRecordData>
+                <recordData recordSchema="extra">
+                    <MOCKED_WRITTEN_DATA>12-extra</MOCKED_WRITTEN_DATA>
+                </recordData>
+                <recordData recordSchema="evenmore">
+                    <MOCKED_WRITTEN_DATA>12-evenmore</MOCKED_WRITTEN_DATA>
+                </recordData>
+            </srw:extraRecordData>
+        </srw:record>
+    </srw:records>
+    <srw:nextRecordPosition>3</srw:nextRecordPosition>
+    <srw:echoedSearchRetrieveRequest>
+        <srw:version>1.1</srw:version>
+        <srw:query>field=value</srw:query>
+        <srw:startRecord>1</srw:startRecord>
+        <srw:maximumRecords>2</srw:maximumRecords>
+        <srw:recordPacking>xml</srw:recordPacking>
+        <srw:recordSchema>schema</srw:recordSchema>
+        <srw:x-recordSchema>extra</srw:x-recordSchema>
+        <srw:x-recordSchema>evenmore</srw:x-recordSchema>
+        <srw:extraRequestData>echoedExtraRequestData</srw:extraRequestData>
+    </srw:echoedSearchRetrieveRequest>
+    <srw:extraResponseData>extraResponseData</srw:extraResponseData>
+</srw:searchRetrieveResponse>
+""", result)
+
+    def testSearchRetrieveVersion12(self):
+        arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
+
+        observer = CallTrace()
+        observer.returnValues['executeCQL'] = (100, range(11, 13))
+
+        yieldRecordCalls = []
+        def yieldRecord(recordId, recordSchema):
+            yieldRecordCalls.append(1)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (recordId, recordSchema)
+        observer.yieldRecord = yieldRecord
+
+        observer.returnValues['extraResponseData'] = 'extraResponseData'
+        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+
+        component = SruHandler()
+        component.addObserver(observer)
+
+        result = "".join(compose(component.searchRetrieve(**arguments)))
         self.assertEquals(['executeCQL', 'echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
         executeCQLMethod, echoedExtraRequestDataMethod, extraResponseDataMethod = observer.calledMethods
         self.assertEquals('executeCQL', executeCQLMethod.name)
@@ -176,12 +248,13 @@
 
         self.assertEqualsWS("""
 <srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
-    <srw:version>1.1</srw:version>
+    <srw:version>1.2</srw:version>
     <srw:numberOfRecords>100</srw:numberOfRecords>
     <srw:records>
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
+            <srw:recordIdentifier>11</srw:recordIdentifier>
             <srw:recordData>
                 <MOCKED_WRITTEN_DATA>11-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
@@ -197,6 +270,7 @@
         <srw:record>
             <srw:recordSchema>schema</srw:recordSchema>
             <srw:recordPacking>xml</srw:recordPacking>
+            <srw:recordIdentifier>12</srw:recordIdentifier>
             <srw:recordData>
                 <MOCKED_WRITTEN_DATA>12-schema</MOCKED_WRITTEN_DATA>
             </srw:recordData>
@@ -212,7 +286,7 @@
     </srw:records>
     <srw:nextRecordPosition>3</srw:nextRecordPosition>
     <srw:echoedSearchRetrieveRequest>
-        <srw:version>1.1</srw:version>
+        <srw:version>1.2</srw:version>
         <srw:query>field=value</srw:query>
         <srw:startRecord>1</srw:startRecord>
         <srw:maximumRecords>2</srw:maximumRecords>
@@ -281,11 +355,11 @@
 
         result = ''.join(compose(component.handleRequest(arguments={'version':['1.1'], 'query': ['aQuery'], 'operation':['searchRetrieve']})))
         header, body = result.split('\r\n'*2)
-        assertValid(body, join(schemasPath, 'srw-types.xsd'))
+        assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('<bike/>' in body)
         
         result = ''.join(compose(component.handleRequest(arguments={'version':['1.1'], 'operation':['searchRetrieve']})))
         header, body = result.split('\r\n'*2)
-        assertValid(body, join(schemasPath, 'srw-types.xsd'))
+        assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('diagnostic' in body)
 
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_4/test/sru/sruparsertest.py version_5/test/sru/sruparsertest.py
--- version_4/test/sru/sruparsertest.py	2010-09-13 11:49:13.000000000 +0200
+++ version_5/test/sru/sruparsertest.py	2010-09-15 17:06:56.000000000 +0200
@@ -89,6 +89,7 @@
         self.assertValid(error, {'version':['1.0'], 'query':['twente'], 'operation':['searchRetrieve']})
         self.assertValid(error, {'version':['2.0'], 'query':['twente'], 'operation':['searchRetrieve']})
         self.assertValid(SUCCESS, {'version':['1.1'], 'query':['twente'], 'operation':['searchRetrieve']})
+        self.assertValid(SUCCESS, {'version':['1.2'], 'query':['twente'], 'operation':['searchRetrieve']})
 
     def testValidOperation(self):
         error = UNSUPPORTED_OPERATION
