Changeset created on Fri Jul 06 09:51:05 UTC 2012 by Seecr (Seek You Too B.V.)

Description: FileServer supports multiple documentRoots

    FileServer can now serve files from multiple directories. 
    Note: when a file appears in more than one of the specified directories, the one in the 
    directory that comes first in the list will be served.

Baseline version: 4.0.18

From b458013c92e0415db6641798fd08c1ef65b7cb4b Mon Sep 17 00:00:00 2001
From: Jurjan-Paul Medema <jurjanpaul@cq2.nl>
Date: Fri, 6 Jul 2012 11:49:49 +0200
Subject: [PATCH] JPM: FileServer now allows for mulitple documentRoots

---
 doc/license.conf                      |    3 +-
 meresco/components/http/fileserver.py |   57 ++++++++++++++-------------------
 test/http/fileservertest.py           |   57 ++++++++++++++++++++++++---------
 3 files changed, 67 insertions(+), 50 deletions(-)

diff --git a/doc/license.conf b/doc/license.conf
index a05c750..37f2004 100644
--- a/doc/license.conf
+++ b/doc/license.conf
@@ -4,8 +4,7 @@
     "license": "GPLv2",
     "copyrights": [
         {"name": "Seecr (Seek You Too B.V.)", "url": "http://seecr.nl", "years": [2012]},
-        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://stichting.bibliotheek.nl", "years": [2012]},
-        {"name": "Stichting Kennisnet", "url": "http://www.kennisnet.nl", "years": [2012]}
+        {"name": "Stichting Bibliotheek.nl (BNL)", "url": "http://stichting.bibliotheek.nl", "years": [2012]}
     ],
     "copyrights_unused": [
         {"name": "Deltares", "url": "http://www.deltares.nl", "years": [2011]},
diff --git a/meresco/components/http/fileserver.py b/meresco/components/http/fileserver.py
index fff0da8..dd0b569 100644
--- a/meresco/components/http/fileserver.py
+++ b/meresco/components/http/fileserver.py
@@ -8,6 +8,7 @@
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -43,6 +44,7 @@ magicCookie.load()
 import mimetypes
 mimetypes.init()
 
+
 class File(object):
     def __init__(self, filename):
         self._filename = filename
@@ -75,49 +77,37 @@ class File(object):
     def _date(self, offset=0):
         return formatdate(time() + offset)
 
+
 class FileServer(object):
-    def __init__(self, documentRoot):
-        self._documentRoot = documentRoot
+    def __init__(self, documentRoot=None, documentRoots=None):
+        if not any([documentRoot, documentRoots]) or all([documentRoot, documentRoots]):
+            raise ValueError("Specify either 'documentRoot' or 'documentRoots'.")
+        self._documentRoots = documentRoots or [documentRoot]
 
     def handleRequest(self, path, port=None, Client=None, Method=None, Headers=None, **kwargs):
-
-        if not self.fileExists(path):
+        file = self._findFile(path)
+        if file is None:
             yield httputils.notFoundHtml
-            for line in ['<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">',
-"<html><head>",
-"<title>404 Not Found</title>",
-"</head><body>",
-"<h1>Not Found</h1>",
-"<p>The requested URL %s was not found on this server.</p>" % path,
-"<hr>",
-"<address>Weightless Server at localhost Port 8080</address>",
-"</body></html>"]:
-                yield line
-            raise StopIteration
-
-        file = File(self._filenameFor(path))
-
-
+            yield '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">\n'
+            yield "<html><head>\n"
+            yield "<title>404 Not Found</title>\n"
+            yield "</head><body>\n"
+            yield "<h1>Not Found</h1>\n"
+            yield "<p>The requested URL %s was not found on this server.</p>\n" % path
+            yield "</body></html>\n"
+            return
         yield 'HTTP/1.0 200 OK' + CRLF
         for item in file.getHeaders().items():
             yield "%s: %s" % item + CRLF
         yield CRLF
+        yield file.stream()
 
-        for part in file.stream():
-            yield part
-
-    def _filenameFor(self, filename):
+    def _findFile(self, filename):
         filename = '/'.join(part for part in filename.split('/') if part)
-        path = normpath(join(self._documentRoot, filename))
-        if commonprefix([self._documentRoot, path]) != self._documentRoot:
-            raise ValueError('Filename "%s" not inside documentRoot.' % filename)
-        return path
-
-    def fileExists(self, filename):
-        try:
-            return isfile(self._filenameFor(filename))
-        except ValueError:
-            return False
+        for documentRoot in self._documentRoots:
+            path = normpath(join(documentRoot, filename))
+            if isfile(path) and commonprefix([documentRoot, path]) == documentRoot:
+                return File(path)
 
 
 class StringServer(object):
@@ -131,3 +121,4 @@ class StringServer(object):
         yield "\r\n"
 
         yield self._aString
+
diff --git a/test/http/fileservertest.py b/test/http/fileservertest.py
index e23ae54..6d4ccd6 100644
--- a/test/http/fileservertest.py
+++ b/test/http/fileservertest.py
@@ -8,6 +8,7 @@
 # Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
 # Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
 # Copyright (C) 2012 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2012 Stichting Bibliotheek.nl (BNL) http://stichting.bibliotheek.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -37,37 +38,48 @@ from time import time
 from rfc822 import parsedate
 from calendar import timegm
 
+from weightless.core import compose
 from meresco.components.http.fileserver import FileServer
 
-class FileServerTest(TestCase):
 
+class FileServerTest(TestCase):
     def setUp(self):
         self.directory = mkdtemp()
+        self.directory2 = mkdtemp()
 
     def tearDown(self):
         rmtree(self.directory)
+        rmtree(self.directory2)
+
+    def testEitherDocumentRootOrDocumentRoots(self):
+        self.assertRaises(ValueError, lambda: FileServer())
+        self.assertRaises(ValueError, lambda: FileServer(self.directory, self.directory2))
+        FileServer(self.directory)
+        FileServer(documentRoot=self.directory)
+        FileServer(documentRoots=[self.directory, self.directory2])
 
-    def testServeNoneExistingFile(self):
+    def testServeNotExistingFile(self):
         fileServer = FileServer(self.directory)
         response = ''.join(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/doesNotExist", Method="GET", Headers={}))
-
         self.assertTrue("HTTP/1.0 404 Not Found" in response, response)
         self.assertTrue("<title>404 Not Found</title>" in response)
 
-    def testFileExists(self):
-        server = FileServer(self.directory)
-        self.assertFalse(server.fileExists("/filename"))
-        self.assertFalse(server.fileExists("/"))
+    def testFindFile(self):
+        server = FileServer(documentRoots=[self.directory, self.directory2])
+        self.assertFalse(server._findFile("/filename"))
+        self.assertFalse(server._findFile("/"))
 
         open(join(self.directory, 'filename'), "w").close()
-        self.assertTrue(server.fileExists("/filename"))
+        open(join(self.directory2, 'filename2'), "w").close()
+        self.assertTrue(server._findFile("/filename"))
+        self.assertTrue(server._findFile("/filename2"))
 
-        self.assertFalse(server.fileExists("//etc/shadow"))
+        self.assertFalse(server._findFile("//etc/shadow"))
         open('/tmp/testFileExists', 'w').close()
         try:
-            self.assertFalse(server.fileExists("/tmp/testFileExists"))
-            self.assertFalse(server.fileExists("//tmp/testFileExists"))
-            self.assertFalse(server.fileExists("../testFileExists"))
+            self.assertFalse(server._findFile("/tmp/testFileExists"))
+            self.assertFalse(server._findFile("//tmp/testFileExists"))
+            self.assertFalse(server._findFile("../testFileExists"))
         finally:
             remove('/tmp/testFileExists')
 
@@ -77,18 +89,32 @@ class FileServerTest(TestCase):
         f.close()
 
         fileServer = FileServer(self.directory)
-        response = ''.join(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={}))
+        response = ''.join(compose(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={})))
 
         self.assertTrue("HTTP/1.0 200 OK" in response)
         self.assertTrue("Some Contents" in response)
 
+    def testFirstOneWins(self):
+        f = open(join(self.directory, 'someFile'), 'w').write("Some Contents")
+        f = open(join(self.directory2, 'someFile'), 'w').write("Different Contents")
+
+        fileServer = FileServer(documentRoots=[self.directory, self.directory2])
+        response = ''.join(compose(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={})))
+        self.assertTrue("Some Contents" in response)
+        self.assertFalse("Different Contents" in response)
+
+        fileServer = FileServer(documentRoots=[self.directory2, self.directory])
+        response = ''.join(compose(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={})))
+        self.assertTrue("Different Contents" in response)
+        self.assertFalse("Some Contents" in response)
+
     def testCacheControlStuff(self):
         f = open(join(self.directory, 'someFile'), 'w')
         f.write("Some Contents")
         f.close()
 
         fileServer = FileServer(self.directory)
-        response = ''.join(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={}))
+        response = ''.join(compose(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/someFile", Method="GET", Headers={})))
         headers, body = response.split("\r\n\r\n")
 
         self.assertTrue("Date: " in headers)
@@ -110,7 +136,8 @@ class FileServerTest(TestCase):
         f.close()
         fileServer = FileServer(documentRoot)
 
-        response = ''.join(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/../"+notAllowedFile, Method="GET", Headers={}))
+        response = ''.join(compose(fileServer.handleRequest(port=80, Client=('localhost', 9000), path="/../"+notAllowedFile, Method="GET", Headers={})))
 
         self.assertTrue("HTTP/1.0 404 Not Found" in response, response)
         self.assertTrue("<title>404 Not Found</title>" in response)
+
-- 
1.7.2.3

