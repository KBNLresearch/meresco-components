Changeset created on Thu Jul 21 13:54:54 CEST 2011 by Seecr

Description: Meresco components now also works with Solr

    Query and drilldown handling is now asynchronous for both Lucene and Solr.
    In case of Solr the drilldown and quering are combined in one request.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.15-Seecr/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/cqlsuggester.py version_1/meresco/components/cqlsuggester.py
--- version_0/meresco/components/cqlsuggester.py	2011-07-11 16:29:28.000000000 +0200
+++ version_1/meresco/components/cqlsuggester.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable
@@ -34,6 +35,5 @@
     def suggestForCql(self, cqlAST) :
         termlist = getAllTerms(cqlAST)
         for term in termlist:
-            suggestions = self.any.suggestionsFor(term)
-            return suggestions
-           
\ No newline at end of file
+            return self.asyncany.suggestionsFor(term)
+           
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/drilldown/srufielddrilldown.py version_1/meresco/components/drilldown/srufielddrilldown.py
--- version_0/meresco/components/drilldown/srufielddrilldown.py	2011-07-11 16:29:27.000000000 +0200
+++ version_1/meresco/components/drilldown/srufielddrilldown.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from xml.sax.saxutils import quoteattr, escape
@@ -39,7 +40,6 @@
 from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 
 class SRUFieldDrilldown(Observable):
-    @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
     def extraResponseData(self, query=None, x_field_drilldown=None, x_field_drilldown_fields=None, **kwargs):
         if not x_field_drilldown or len(x_field_drilldown) != 1:
             return
@@ -49,17 +49,16 @@
         term = x_field_drilldown[0]
         fields = x_field_drilldown_fields[0].split(',')
 
-        drilldownResults = self.drilldown(query, term, fields)
-        yield "<dd:field-drilldown>"
-        for field, count in drilldownResults:
-            yield '<dd:field name=%s>%s</dd:field>' % (quoteattr(escape(str(field))), escape(str(count)))
-        yield "</dd:field-drilldown>"
-
+        drilldownResults = yield self.drilldown(query, term, fields)
+        yield _fieldDrilldown(drilldownResults)
+        
     def drilldown(self, query, term, fields):
+        drilldownResult = []
         for field in fields:
             cqlString = '(%s) AND %s=%s' % (query, field, term)
-            total, recordIds = self.any.executeCQL(cqlAbstractSyntaxTree=parseCQL(cqlString))
-            yield field, total
+            response = yield self.asyncany.executeQuery(cqlAbstractSyntaxTree=parseCQL(cqlString))
+            drilldownResult.append((field, response.total))
+        raise StopIteration(drilldownResult)
 
     @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
     def echoedExtraRequestData(self, x_field_drilldown=None, x_field_drilldown_fields=None, **kwargs):
@@ -71,3 +70,9 @@
             yield "<dd:field-drilldown-fields>"
             yield escape(x_field_drilldown_fields[0])
             yield "</dd:field-drilldown-fields>"
+
+@decorateWith(DRILLDOWN_HEADER + "<dd:field-drilldown>", "</dd:field-drilldown>" + DRILLDOWN_FOOTER)
+def _fieldDrilldown(drilldownResults):
+    for field, count in drilldownResults:
+        yield '<dd:field name=%s>%s</dd:field>' % (quoteattr(escape(str(field))), escape(str(count)))
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/drilldown/srutermdrilldown.py version_1/meresco/components/drilldown/srutermdrilldown.py
--- version_0/meresco/components/drilldown/srutermdrilldown.py	2011-07-11 16:29:27.000000000 +0200
+++ version_1/meresco/components/drilldown/srutermdrilldown.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,73 +1,54 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable, decorateWith
 from drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
 from xml.sax.saxutils import escape as xmlEscape, quoteattr
+from traceback import print_exc
 
 from meresco.components.sru.diagnostic import generalSystemError
 
 class SRUTermDrilldown(Observable):
-    def __init__(self, sortedByTermCount=False):
-        Observable.__init__(self)
-        self._sortedByTermCount = sortedByTermCount
                 
-    @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
-    def extraResponseData(self, docset, x_term_drilldown=None, **kwargs):
-        if x_term_drilldown == None or len(x_term_drilldown) != 1:
+    def extraResponseData(self, drilldownData, **kwargs):
+        if drilldownData is None:
             return
-        def splitTermAndMaximum(s):
-            l = s.split(":")
-            if len(l) == 1:
-                return l[0], DEFAULT_MAXIMUM_TERMS, self._sortedByTermCount
-            return l[0], int(l[1]), self._sortedByTermCount
-
-        fieldsAndMaximums = x_term_drilldown[0].split(",")
-        fieldMaxTuples = (splitTermAndMaximum(s) for s in fieldsAndMaximums)
-
-        if fieldsAndMaximums == [""]:
-            raise StopIteration
-
-        drilldownResults = self.any.drilldown(
-            docset,
-            fieldMaxTuples)
-
-        yield self._termDrilldown(drilldownResults)
-
-    @decorateWith("<dd:term-drilldown>", "</dd:term-drilldown>")
-    def _termDrilldown(self, drilldownResults):
         try:
-            for fieldname, termCounts in drilldownResults:
-                yield self._dd_navigator(fieldname, termCounts)
+            yield self._termDrilldown(drilldownData)
         except Exception, e:
+            print_exc()
+            yield DRILLDOWN_HEADER + "<dd:term-drilldown>"
             yield generalSystemError(xmlEscape(e.message))
+            yield "</dd:term-drilldown>" + DRILLDOWN_FOOTER
             return
 
+    @decorateWith(DRILLDOWN_HEADER + "<dd:term-drilldown>", "</dd:term-drilldown>" + DRILLDOWN_FOOTER)
+    def _termDrilldown(self, drilldownData):
+        for fieldname, termCounts in drilldownData:
+            yield self._dd_navigator(fieldname, termCounts)
+
     def _dd_navigator(self, fieldname, termCounts):
         try:
             firstTerm, firstCount = termCounts.next()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/cql2lucenequery.py version_1/meresco/components/facetindex/cql2lucenequery.py
--- version_0/meresco/components/facetindex/cql2lucenequery.py	2011-07-11 16:29:26.000000000 +0200
+++ version_1/meresco/components/facetindex/cql2lucenequery.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,54 +1,52 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable
 
 from meresco.components.statistics import Logger
-from cqlparsetreetolucenequery import LuceneQueryComposer
-from clausecollector import ClauseCollector
+from meresco.components.facetindex.cqlparsetreetolucenequery import LuceneQueryComposer
+from meresco.components.facetindex.clausecollector import ClauseCollector
 
 class CQL2LuceneQuery(Observable, Logger):
 
-    def __init__(self, unqualifiedFields):
-        Observable.__init__(self)
+    def __init__(self, unqualifiedFields, name=None):
+        Observable.__init__(self, name=name)
         self._cqlComposer = LuceneQueryComposer(unqualifiedFields)
 
-    def executeCQL(self, cqlAbstractSyntaxTree, *args, **kwargs):
-        ClauseCollector(cqlAbstractSyntaxTree, self.log).visit()
-        return self.any.executeQuery(
-                pyLuceneQuery=self._cqlComposer.compose(cqlAbstractSyntaxTree),
-                *args, **kwargs
-            )
+    def executeQuery(self, cqlAbstractSyntaxTree, *args, **kwargs):
+        return self.asyncany.executeQuery(pyLuceneQuery=self._convert(cqlAbstractSyntaxTree), *args, **kwargs)
 
     def docsetFromQuery(self, cqlAbstractSyntaxTree, *args, **kwargs):
-        ClauseCollector(cqlAbstractSyntaxTree, self.log).visit()
-        return self.any.docsetFromQuery(
-                pyLuceneQuery=self._cqlComposer.compose(cqlAbstractSyntaxTree),
-                *args, **kwargs
-            )
+        return self.any.docsetFromQuery(pyLuceneQuery=self._convert(cqlAbstractSyntaxTree), *args, **kwargs)
+
+    def _convert(self, ast):
+        ClauseCollector(ast, self.log).visit()
+        return self._cqlComposer.compose(ast)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/drilldownfieldnames.py version_1/meresco/components/facetindex/drilldownfieldnames.py
--- version_0/meresco/components/facetindex/drilldownfieldnames.py	2011-07-11 16:29:26.000000000 +0200
+++ version_1/meresco/components/facetindex/drilldownfieldnames.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,33 +1,35 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2011 Maastricht University http://www.um.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Maastricht University http://www.um.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from meresco.core.observable import Observable
 from drilldown import NoFacetIndexException
 
@@ -36,17 +38,17 @@
         Observable.__init__(self)
         self.lookup = lookup
 
-    def drilldown(self, docNumbers, fieldsAndMaximums):
+    def drilldown(self, docset, fieldnamesAndMaximums):
         reverseLookup = {}
         translatedFields = []
-        for field, maximum, sort in fieldsAndMaximums:
+        for field, maximum, sort in fieldnamesAndMaximums:
             translated = self.lookup(field)
             translatedFields.append((translated, maximum, sort))
             reverseLookup[translated] = field
         try:
-            drilldownResults = self.any.drilldown(docNumbers, translatedFields)
-            return [(reverseLookup[field], termCounts)
-                for field, termCounts in drilldownResults]
+            drilldownResults = yield self.asyncany.drilldown(docset=docset, fieldnamesAndMaximums=translatedFields)
+            raise StopIteration([(reverseLookup[field], termCounts)
+                for field, termCounts in drilldownResults])
         except NoFacetIndexException, e:
             raise NoFacetIndexException(reverseLookup[e.field], e.fields)
            
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/drilldown.py version_1/meresco/components/facetindex/drilldown.py
--- version_0/meresco/components/facetindex/drilldown.py	2011-07-11 16:29:26.000000000 +0200
+++ version_1/meresco/components/facetindex/drilldown.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,33 +1,34 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2011 Maastricht University http://www.um.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Maastricht University http://www.um.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from docset import DocSet
@@ -146,17 +147,20 @@
     def listFields(self):
         return self._docsetlists.keys()
 
-    def drilldown(self, docset, drilldownFieldnamesAndMaximumResults=None, defaultMaximumResults=0, defaultSorting=False):
-        if not drilldownFieldnamesAndMaximumResults:
-            drilldownFieldnamesAndMaximumResults = [
+    def drilldown(self, docset, fieldnamesAndMaximums=None, defaultMaximumResults=0, defaultSorting=False):
+        if not fieldnamesAndMaximums:
+            fieldnamesAndMaximums = [
                 (fieldname, defaultMaximumResults, defaultSorting)
                 for fieldname in self._docsetlists]
-        for fieldname, maximumResults, howToSort in drilldownFieldnamesAndMaximumResults:
-            if not self._isDrilldownField(fieldname):
-                raise NoFacetIndexException(fieldname, self.listFields())
-
-            docsetlist = self._docsetlists[fieldname]
-            yield fieldname, docsetlist.termCardinalities(docset, maximumResults or maxint, howToSort)
+        def results():
+            for fieldname, maximumResults, howToSort in fieldnamesAndMaximums:
+                if not self._isDrilldownField(fieldname):
+                    raise NoFacetIndexException(fieldname, self.listFields())
+
+                docsetlist = self._docsetlists[fieldname]
+                yield fieldname, docsetlist.termCardinalities(docset, maximumResults or maxint, howToSort)
+        raise StopIteration(list(results()))
+        yield
 
     def hierarchicalDrilldown(self, docset, drilldownFieldnamesAndMaximumResults=None, defaultMaximumResults=0, defaultSorting=False):
         if not drilldownFieldnamesAndMaximumResults:
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/__init__.py version_1/meresco/components/facetindex/__init__.py
--- version_0/meresco/components/facetindex/__init__.py	2011-07-11 16:29:26.000000000 +0200
+++ version_1/meresco/components/facetindex/__init__.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,32 +1,34 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from os.path import dirname, abspath, isdir, join            #DO_NOT_DISTRIBUTE
 if isdir(join(abspath(dirname(__file__)), '.svn')):          #DO_NOT_DISTRIBUTE
     from os import system                                    #DO_NOT_DISTRIBUTE
@@ -47,5 +49,6 @@
 from cql2lucenequery import CQL2LuceneQuery
 from fields2lucenedocument import Fields2LuceneDocumentTx
 from clausecollector import ClauseCollector
+from response import Response
 import merescolucene
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/lucene.py version_1/meresco/components/facetindex/lucene.py
--- version_0/meresco/components/facetindex/lucene.py	2011-07-11 16:29:26.000000000 +0200
+++ version_1/meresco/components/facetindex/lucene.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,32 +1,33 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from os.path import isdir, isfile, join
@@ -44,6 +45,7 @@
 from docset import DocSet
 from functioncommand import FunctionCommand
 from lucenedocidtracker import LuceneDocIdTracker
+from response import Response
 
 IndexReader_FieldOption_ALL = IndexReader.FieldOption.ALL
 
@@ -140,7 +142,9 @@
             hits = (hit for hit in hits if self._lucene2docId[hit.getId()] in docfilter)
             nrOfResults = len(docfilter)
         results = islice(hits, start, stop)
-        return nrOfResults, [hit.getDocument().get(IDFIELD) for hit in results]
+        response = Response(total=nrOfResults, hits=[hit.getDocument().get(IDFIELD) for hit in results])
+        raise StopIteration(response)
+        yield
 
     def getIndexReader(self):
         return self._reader
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/facetindex/response.py version_1/meresco/components/facetindex/response.py
--- version_0/meresco/components/facetindex/response.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/components/facetindex/response.py	2011-07-21 13:54:09.000000000 +0200
@@ -0,0 +1,30 @@
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+class Response(object):
+    def __init__(self, total, hits):
+        self.total = total
+        self.hits = hits
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/fields2xmlfields.py version_1/meresco/components/fields2xmlfields.py
--- version_0/meresco/components/fields2xmlfields.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/meresco/components/fields2xmlfields.py	2011-07-21 13:54:09.000000000 +0200
@@ -0,0 +1,69 @@
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from meresco.core import Observable
+from xml.sax.saxutils import escape as escapeXml
+
+class Fields2XmlFields(Observable):
+
+    def __init__(self, transactionName, partname, namespace=None):
+        Observable.__init__(self)
+        self._transactionName = transactionName
+        self._partname = partname
+        self._namespace = namespace
+        self.txs = {}
+
+    def begin(self):
+        tx = self.ctx.tx
+        if tx.name != self._transactionName:
+            return
+        tx.join(self)
+        self.txs[tx.getId()] = []
+
+    def addField(self, name, value):
+        tx = self.ctx.tx
+        self.txs[tx.getId()].append((name, value))
+
+    def commit(self):
+        tx = self.ctx.tx
+        fields = self.txs.pop(tx.getId())
+        if not fields:
+            return
+        
+        ns = self._namespace != None and ' xmlns="%s"' % self._namespace or ''
+        xml = '<fields%s>%s</fields>' % (ns, generateXml(fields))
+        self.do.add(identifier=tx.locals["id"], partname=self._partname, data=xml)
+
+def _generateXml(fields):
+    for (key, value) in fields:
+        yield """<field name="%s">%s</field>""" % (_escapeXml(key), _escapeXml(value))
+
+def _escapeXml(value):
+    return escapeXml(value).replace('"', "&quot;")
+
+def generateXml(fields):
+    return ''.join(_generateXml(fields))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/__init__.py version_1/meresco/components/__init__.py
--- version_0/meresco/components/__init__.py	2011-07-11 16:29:28.000000000 +0200
+++ version_1/meresco/components/__init__.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from timeddictionary import TimedDictionary
@@ -34,6 +35,7 @@
 
 from fieldlets import RenameField, TransformFieldValue, FilterField, AddField
 from fields2xml import Fields2XmlTx
+from fields2xmlfields import Fields2XmlFields
 from crosswalk import Crosswalk
 from xsltcrosswalk import XsltCrosswalk
 from xmlxpath import XmlXPath
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/ngram/ngramquery.py version_1/meresco/components/ngram/ngramquery.py
--- version_0/meresco/components/ngram/ngramquery.py	2011-07-11 16:29:25.000000000 +0200
+++ version_1/meresco/components/ngram/ngramquery.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,31 +1,32 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable
@@ -45,11 +46,12 @@
         self._fieldForSorting = fieldForSorting
 
     def executeNGramQuery(self, query, maxResults, fieldname=None):
-        total, recordIds =  self.any.executeQuery(self.ngramQuery(query, fieldname=fieldname), start=0, stop=self._samples)
+        response = yield self.asyncany.executeQuery(self.ngramQuery(query, fieldname=fieldname), start=0, stop=self._samples)
+        total, recordIds = response.total, response.hits
         sortedRecordIds = recordIds
         if self._fieldForSorting and maxResults < total and maxResults < self._samples:
             sortedRecordIds = sorted(recordIds, key=self._wordCardinality, reverse=True)
-        return islice((word.rsplit('$', 1)[0] for word in sortedRecordIds), maxResults)
+        raise StopIteration(islice((word.rsplit('$', 1)[0] for word in sortedRecordIds), maxResults))
 
     def _wordCardinality(self, word):
         return self.any.docsetlist(self._fieldForSorting).cardinality(word.rsplit('$', 1)[0])
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/ngram/suggester.py version_1/meresco/components/ngram/suggester.py
--- version_0/meresco/components/ngram/suggester.py	2011-07-11 16:29:25.000000000 +0200
+++ version_1/meresco/components/ngram/suggester.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,31 +1,32 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from itertools import islice
@@ -51,12 +52,12 @@
         """
         word = unicode(word)
         fieldname = unicode(fieldname) if fieldname else None
-        candidates = self.any.executeNGramQuery(word, self._samples, fieldname=fieldname)
+        candidates = yield self.asyncany.executeNGramQuery(word, self._samples, fieldname=fieldname)
         results = sorted(candidates, key=lambda term: self.sortKey(term, word, fieldname))
 
         inclusive = 1 if results and results[0] == word else 0
         result = islice(results, inclusive, self._maxResults + inclusive)
-        return bool(inclusive), [str(term) for term in result if self.threshold(term, word, fieldname)]
+        raise StopIteration([bool(inclusive), [str(term) for term in result if self.threshold(term, word, fieldname)]])
 
 class LevenshteinSuggester(_Suggestion):
     """ (see http://en.wikipedia.org/wiki/Levenshtein_distance for details). """
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/parsecql.py version_1/meresco/components/parsecql.py
--- version_0/meresco/components/parsecql.py	2011-07-11 16:29:28.000000000 +0200
+++ version_1/meresco/components/parsecql.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,29 +1,30 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.core import Observable
@@ -31,4 +32,4 @@
 
 class ParseCQL(Observable):
     def executeCQLString(self, cqlString, *args, **kwargs):
-        return self.any.executeCQL(cqlAbstractSyntaxTree=parseString(cqlString), *args, **kwargs)
+        return self.any.executeQuery(cqlAbstractSyntaxTree=parseString(cqlString), *args, **kwargs)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/rss.py version_1/meresco/components/rss.py
--- version_0/meresco/components/rss.py	2011-07-11 16:29:28.000000000 +0200
+++ version_1/meresco/components/rss.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from xml.sax.saxutils import escape as xmlEscape
@@ -109,7 +110,7 @@
         yield """</rss>"""
 
     def _yieldResults(self, cqlAbstractSyntaxTree=None, start=0, stop=9, sortBy=None, sortDescending=False, **kwargs):
-        total, hits = self.any.executeCQL(
+        response = yield self.asyncany.executeQuery(
             cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
             start=start,
             stop=stop,
@@ -117,6 +118,6 @@
             sortDescending=sortDescending,
             **kwargs
         )
-
+        total, hits = response.total, response.hits
         for recordId in hits:
             yield self.any.getRecord(recordId)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/sru/sruhandler.py version_1/meresco/components/sru/sruhandler.py
--- version_0/meresco/components/sru/sruhandler.py	2011-07-11 16:29:25.000000000 +0200
+++ version_1/meresco/components/sru/sruhandler.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,35 +1,37 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from xml.sax.saxutils import quoteattr, escape as xmlEscape
 
 from meresco.core import Observable, decorate, decorateWith
-from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER
+from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
 
 from cqlparser import parseString as parseCQL
 from weightless.core import compose
@@ -40,26 +42,40 @@
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet', 'x-recordSchema']
 
 class SruHandler(Observable):
-    def __init__(self, extraRecordDataNewStyle=False):
+    def __init__(self, extraRecordDataNewStyle=False, drilldownSortedByTermCount=False):
         Observable.__init__(self)
+        self._drilldownSortedByTermCount = drilldownSortedByTermCount
         self._extraRecordDataNewStyle = extraRecordDataNewStyle
         if not extraRecordDataNewStyle:
             warn("""Old style extraRecordData is used, this is deprecated and will be removed in the future.""", DeprecationWarning)
 
-    def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sortBy=None, sortDescending=False, **kwargs):
+    def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sortBy=None, sortDescending=False, x_term_drilldown=None, **kwargs):
         SRU_IS_ONE_BASED = 1
 
         start = startRecord - SRU_IS_ONE_BASED
         cqlAbstractSyntaxTree = parseCQL(query)
+
+        drilldownFieldnamesAndMaximums = self._parseDrilldownArgs(x_term_drilldown)
+
         try:
-            total, recordIds = self.any.executeCQL(
+            response = yield self.asyncany.executeQuery(
                 cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
                 start=start,
                 stop=start + maximumRecords,
                 sortBy=sortBy,
                 sortDescending=sortDescending,
+                fieldnamesAndMaximums=drilldownFieldnamesAndMaximums,
                 **kwargs)
-            docset = self.any.docsetFromQuery(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree)
+            total, recordIds = response.total, response.hits
+            drilldownData = getattr(response, "drilldownData", None)
+            # If drilldownData is not found on response object but drilldownFieldnamesAndMaximums 
+            # is set assume Meresco-Lucene is used, so do an extra Meresco-Lucene style drilldown call
+            if not drilldownData and drilldownFieldnamesAndMaximums is not None:
+                docset = self.any.docsetFromQuery(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree)
+                if drilldownFieldnamesAndMaximums is not None:
+                    drilldownData = yield self.asyncany.drilldown(
+                        docset=docset,
+                        fieldnamesAndMaximums=drilldownFieldnamesAndMaximums)
         except Exception, e:
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
@@ -78,8 +94,8 @@
             if nextRecordPosition < total:
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
-        yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, **kwargs)
-        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, docset=docset, **kwargs)
+        yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, x_term_drilldown=x_term_drilldown, **kwargs)
+        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, **kwargs)
         yield self._endResults()
 
     def _writeEchoedSearchRetrieveRequest(self, **kwargs):
@@ -93,16 +109,23 @@
             yield chunk
         yield '</srw:echoedSearchRetrieveRequest>'
 
-    def _writeExtraResponseData(self, cqlAbstractSyntaxTree=None, **kwargs):
-        return decorate('<srw:extraResponseData>',
-            self._extraResponseDataTryExcept(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, **kwargs),
-            '</srw:extraResponseData>')
+    def _writeExtraResponseData(self, **kwargs):
+        response = compose(self._extraResponseDataTryExcept(**kwargs))
+        headerWritten = False
+        for line in response:
+            if callable(line):
+                yield line
+                continue
+            if line and not headerWritten:
+                yield '<srw:extraResponseData>'
+                headerWritten = True
+            yield line
+        if headerWritten:
+            yield '</srw:extraResponseData>'
 
-    def _extraResponseDataTryExcept(self, cqlAbstractSyntaxTree=None, **kwargs):
+    def _extraResponseDataTryExcept(self, **kwargs):
         try:
-            stuffs = compose(self.all.extraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, **kwargs))
-            for stuff in stuffs:
-                yield stuff
+            yield self.all.extraResponseData(**kwargs)
         except Exception, e:
             yield DIAGNOSTIC % tuple(GENERAL_SYSTEM_ERROR + [xmlEscape(str(e))])
 
@@ -171,3 +194,15 @@
                 yield xmlEscape(data)
         else:
             raise Exception("Unknown Record Packing: %s" % recordPacking)
+
+    def _parseDrilldownArgs(self, x_term_drilldown):
+        if x_term_drilldown == None or len(x_term_drilldown) != 1:
+            return
+        def splitTermAndMaximum(s):
+            l = s.split(":")
+            if len(l) == 1:
+                return l[0], DEFAULT_MAXIMUM_TERMS, self._drilldownSortedByTermCount
+            return l[0], int(l[1]), self._drilldownSortedByTermCount
+
+        fieldsAndMaximums = x_term_drilldown[0].split(",")
+        return (splitTermAndMaximum(s) for s in fieldsAndMaximums)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/_alltests.py version_1/test/_alltests.py
--- version_0/test/_alltests.py	2011-07-11 16:29:24.000000000 +0200
+++ version_1/test/_alltests.py	2011-07-21 13:54:09.000000000 +0200
@@ -10,6 +10,7 @@
 # Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
 # Copyright (C) 2009 Tilburg University http://www.uvt.nl
 # Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
 # 
 # This file is part of "Meresco Components"
 # 
@@ -49,6 +50,7 @@
 from crosswalktest import CrosswalkTest
 from fieldletstest import FieldletsTest
 from fields2xmltest import Fields2XmlTest
+from fields2xmlfieldstest import Fields2XmlFieldsTest
 from filelisttest import FileListTest
 from inboxtest import InboxTest
 from multileveldrilldowntest import MultiLevelDrilldownTest
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/facetindex/cql2lucenequerytest.py version_1/test/facetindex/cql2lucenequerytest.py
--- version_0/test/facetindex/cql2lucenequerytest.py	2011-07-11 16:29:23.000000000 +0200
+++ version_1/test/facetindex/cql2lucenequerytest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,40 +1,48 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
 from cq2utils import CallTrace
 from cqlparser import parseString
 from meresco.components.facetindex import CQL2LuceneQuery
+from meresco.core import be, Observable
 
 class Cql2LuceneQueryTest(TestCase):
     def setUp(self):
-        self.convertor = CQL2LuceneQuery({})
-        self.convertor.addObserver(CallTrace('Query responder'))
+        self.convertor = CQL2LuceneQuery([('field', 1.0)])
+        self.observer = CallTrace('Query responder')
+        self.dna = be((Observable(),
+            (self.convertor, 
+                (self.observer,),
+            )
+        ))
         self.loggedClauses = []
         def logShunt(clause, **kwargs):
             self.loggedClauses.append(clause)
@@ -42,11 +50,15 @@
 
     def assertLog(self, expectedClauses, query):
         self.loggedClauses = []
-        self.convertor.executeCQL(parseString(query))
+        list(self.dna.any.executeQuery(cqlAbstractSyntaxTree=parseString(query)))
         self.assertEquals(expectedClauses, self.loggedClauses)
 
     def testOneTerm(self):
         self.assertLog(['term'], 'term')
+        self.assertEquals(1, len(self.observer.calledMethods))
+        self.assertEquals("executeQuery", self.observer.calledMethods[0].name)
+        self.assertEquals("org.apache.lucene.search.TermQuery", self.observer.calledMethods[0].kwargs['pyLuceneQuery'].__class__.__name__)
+        self.assertEquals("field:term", str(self.observer.calledMethods[0].kwargs['pyLuceneQuery']))
 
     def testIndexRelationTerm(self):
         self.assertLog(['field = term'], 'field=term')
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/facetindex/drilldownfieldnamestest.py version_1/test/facetindex/drilldownfieldnamestest.py
--- version_0/test/facetindex/drilldownfieldnamestest.py	2011-07-11 16:29:23.000000000 +0200
+++ version_1/test/facetindex/drilldownfieldnamestest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,50 +1,58 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2011 Maastricht University http://www.um.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Maastricht University http://www.um.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from cq2utils import CQ2TestCase, CallTrace
 from meresco.components.facetindex import DrilldownFieldnames
 from meresco.components.facetindex.drilldown import NoFacetIndexException
 from testutils import generators2lists
+from weightless.core import compose
 
 class DrilldownFieldnamesTest(CQ2TestCase):
 
     def testDrilldownFieldnames(self):
         d = DrilldownFieldnames(lookup=lambda name: 'drilldown.'+name)
         observer = CallTrace('drilldown')
-        observer.returnValues['drilldown'] = [('drilldown.field1', [('term1',1)]),('drilldown.field2', [('term2', 2)])]
+        observer.exceptions['drilldown'] = StopIteration([('drilldown.field1', [('term1',1)]),('drilldown.field2', [('term2', 2)])])
         d.addObserver(observer)
 
-        result = list(d.drilldown('docset', [('field1', 0, True),('field2', 3, False)]))
+        try:
+            composedGenerator = compose(d.drilldown('docset', [('field1', 0, True),('field2', 3, False)]))
+            while True:
+                composedGenerator.next()
+        except StopIteration, e:
+            result = e.args[0]
 
         self.assertEquals(1, len(observer.calledMethods))
-        self.assertEquals([('drilldown.field1', 0, True),('drilldown.field2', 3, False)], list(observer.calledMethods[0].args[1]))
+        self.assertEquals([('drilldown.field1', 0, True),('drilldown.field2', 3, False)], list(observer.calledMethods[0].kwargs['fieldnamesAndMaximums']))
 
         self.assertEquals([('field1', [('term1',1)]),('field2', [('term2', 2)])], result)
 
@@ -83,7 +91,7 @@
         d.addObserver(observer)
 
         try:
-            d.drilldown('docset', [('wrongfield',0,True)])
+            list(compose(d.drilldown('docset', [('wrongfield',0,True)])))
             self.fail()
         except NoFacetIndexException, e:
             self.assertEquals("No facetindex for field 'wrongfield'. Available fields: 'field0', 'field1'", str(e))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/facetindex/drilldowntest.py version_1/test/facetindex/drilldowntest.py
--- version_0/test/facetindex/drilldowntest.py	2011-07-11 16:29:23.000000000 +0200
+++ version_1/test/facetindex/drilldowntest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,38 +1,41 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2011 Maastricht University http://www.um.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Maastricht University http://www.um.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
-from struct import calcsize
-from testutils import generators2lists
 from cq2utils import CQ2TestCase, CallTrace
+from utils import asyncreturn
+from testutils import generators2lists
+
+from struct import calcsize
 
 from meresco.components.facetindex.merescolucene import Term, TermQuery, IndexReader, MatchAllDocsQuery
 from meresco.components.facetindex.document import Document
@@ -83,9 +86,10 @@
         self.createDrilldown(['field_0'])
         self.addUntokenized([('id', {'field_0': 'this is term_0'})])
 
-        field, results = self.drilldown.drilldown(DocSet(data=[0]), [('field_0', 10, False)]).next()
+        results = self.doDrilldown(DocSet(data=[0]), [('field_0', 10, False)])
+        field, termCounts = results[0]
         self.assertEquals('field_0', field)
-        self.assertEquals([('this is term_0', 1)], list(results))
+        self.assertEquals([('this is term_0', 1)], list(termCounts))
 
     def testDrilldown(self):
         self.createDrilldown(['field_0', 'field_1'])
@@ -95,11 +99,12 @@
             ('2', {'field_0': 'this is term_1', 'field_1': 'inquery'}),
             ('3', {'field_0': 'this is term_2', 'field_1': 'cannotbefound'})])
         query = TermQuery(Term("field_1", "inquery"))
-        total, queryResults = self.index.executeQuery(query)
+        response = self.executeQuery(query)
+        total, queryResults = response.total, response.hits
         self.assertEquals(3, total)
         self.assertEquals(['0', '1', '2'], queryResults)
         queryDocset = self.index.docsetFromQuery(query)
-        drilldownResult = list(self.drilldown.drilldown(queryDocset, [('field_0', 0, False), ('field_1', 0, False)]))
+        drilldownResult = self.doDrilldown(queryDocset, [('field_0', 0, False), ('field_1', 0, False)])
         self.assertEquals(2, len(drilldownResult))
         result = dict(drilldownResult)
         self.assertEquals(['field_0', 'field_1'], result.keys())
@@ -146,9 +151,9 @@
             ('2', {'field0': 'term2'}),
             ('3', {'field0': 'term0'})])
         hits = self.index.docsetFromQuery(MatchAllDocsQuery())
-        ddData = list(self.drilldown.drilldown(hits, [('field0', 0, False)]))
+        ddData = self.doDrilldown(hits, [('field0', 0, False)])
         self.assertEquals([('term0',1), ('term1',2), ('term2',1)], list(ddData[0][1]))
-        result = list(self.drilldown.drilldown(hits, [('field0', 0, True)]))
+        result = self.doDrilldown(hits, [('field0', 0, True)])
         self.assertEquals([('term1',2), ('term0',1), ('term2',1)], list(result[0][1]))
 
     def testDefaultSorting(self):
@@ -159,9 +164,9 @@
             ('2', {'field0': 'term2'}),
             ('3', {'field0': 'term0'})])
         hits = self.index.docsetFromQuery(MatchAllDocsQuery())
-        ddData = list(self.drilldown.drilldown(hits, defaultSorting=False))
+        ddData = self.doDrilldown(hits, defaultSorting=False)
         self.assertEquals([('term0',1), ('term1',2), ('term2',1)], list(ddData[0][1]))
-        result = list(self.drilldown.drilldown(hits, defaultSorting=True))
+        result = self.doDrilldown(hits, defaultSorting=True)
         self.assertEquals([('term1',2), ('term0',1), ('term2',1)], list(result[0][1]))
 
     def testDefaultMaximumResults(self):
@@ -172,7 +177,7 @@
             ('2', {'field0': 'term2'}),
             ('3', {'field0': 'term0'})])
         hits = self.index.docsetFromQuery(MatchAllDocsQuery())
-        ddData = list(self.drilldown.drilldown(hits, defaultMaximumResults=2))
+        ddData = self.doDrilldown(hits, defaultMaximumResults=2)
         self.assertEquals([('term0',1), ('term1',2)], list(ddData[0][1]))
 
     def testDynamicDrilldownFields(self):
@@ -183,9 +188,9 @@
             ('2', {'field_0': 'this is term_1', 'field_1': 'inquery'}),
             ('3', {'__private_field': 'this is term_2', 'field_1': 'cannotbefound'})])
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        results = list(self.drilldown.drilldown(docset, [('field_0', 0, False)]))
+        results = self.doDrilldown(docset, [('field_0', 0, False)])
         self.assertEquals('field_0', results[0][0])
-        results = list(self.drilldown.drilldown(docset))
+        results = self.doDrilldown(docset)
         self.assertEquals('field_0', results[0][0])
         self.assertEquals('field_1', results[1][0])
         self.assertEquals(2, len(results))
@@ -196,14 +201,14 @@
             ('0', {'field_0': 'this is term_0'})
         ])
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        results = list(self.drilldown.drilldown(docset))
+        results = self.doDrilldown(docset)
         self.assertEquals('field_0', results[0][0])
         self.assertEquals(1, len(results))
         self.addUntokenized([
             ('1', {'field_0': 'this is term_0', 'field_1': 'inquery'})
         ])
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        results = list(self.drilldown.drilldown(docset))
+        results = self.doDrilldown(docset)
         self.assertEquals(2, len(results))
         self.assertEquals('field_0', results[0][0])
         self.assertEquals('field_1', results[1][0])
@@ -219,7 +224,8 @@
         #self.drilldown.indexStarted(self.index)
 
         query = TermQuery(Term("title", "dogs"))
-        total, queryResults = self.index.executeQuery(query)
+        response = self.executeQuery(query)
+        total, queryResults = response.total, response.hits
         queryDocset = self.index.docsetFromQuery(query)
         jaccardIndices = list(self.drilldown.jaccard(queryDocset, [("title", 0, 100)], algorithm=JACCARD_ONLY))
         self.assertEquals([('title', [('dogs',100),('mice', 66),('cats',50)])], list((fieldname, list(items)) for fieldname, items in jaccardIndices))
@@ -348,57 +354,57 @@
         self.assertEquals([0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], drilldownDocIds)
 
     def testIntersect(self):
-        drilldown = Drilldown(['field_0', 'field_1'])
-        drilldown.addDocument(0, {'field_0': ['this is term_0'], 'field_1': ['inquery']})
-        drilldown.addDocument(1, {'field_0': ['this is term_1'], 'field_1': ['inquery']})
-        drilldown.addDocument(2, {'field_0': ['this is term_1'], 'field_1': ['inquery']})
-        drilldown.addDocument(3, {'field_0': ['this is term_2'], 'field_1': ['cannotbefound']})
-        drilldown.commit()
-        dsl0 = drilldown.intersect('field_0', DocSet([0,1,2,3]))
+        self.createDrilldown(['field_0', 'field_1'])
+        self.drilldown.addDocument(0, {'field_0': ['this is term_0'], 'field_1': ['inquery']})
+        self.drilldown.addDocument(1, {'field_0': ['this is term_1'], 'field_1': ['inquery']})
+        self.drilldown.addDocument(2, {'field_0': ['this is term_1'], 'field_1': ['inquery']})
+        self.drilldown.addDocument(3, {'field_0': ['this is term_2'], 'field_1': ['cannotbefound']})
+        self.drilldown.commit()
+        dsl0 = self.drilldown.intersect('field_0', DocSet([0,1,2,3]))
         self.assertEquals([[0], [1,2], [3]], list(dsl0))
-        dsl1 = drilldown.intersect('field_1', DocSet([0,1,2,3]))
+        dsl1 = self.drilldown.intersect('field_1', DocSet([0,1,2,3]))
         self.assertEquals([[0,1,2],[3]], list(dsl1))
 
     def testMultiFieldDrilldown(self):
-        drilldown = Drilldown(['field_0', ('keyword', 'title'), 'field_1'])
-        drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
-        drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
-        drilldown.commit()
-        results = list(drilldown.drilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)]))
+        self.createDrilldown(['field_0', ('keyword', 'title'), 'field_1'])
+        self.drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
+        self.drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
+        self.drilldown.commit()
+        results = self.doDrilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)])
         self.assertEquals(('keyword', 'title'), results[0][0])
         resultTerms = list(results[0][1])
         self.assertEquals(set([('math', 1), ('mathematics for dummies', 1), ('economics', 1)]), set(resultTerms))
 
         # test order (cardinality)
-        drilldown.addDocument(2, {'keyword': ['economics'], 'description': ['making a fortune of bad loans']})
-        drilldown.addDocument(3, {'keyword': ['economics'], 'title': ['mathematics for dummies']})
-        drilldown.commit()
-        results = list(drilldown.drilldown(DocSet([0,1,2,3]), [(('keyword', 'title'), 0, True)]))
+        self.drilldown.addDocument(2, {'keyword': ['economics'], 'description': ['making a fortune of bad loans']})
+        self.drilldown.addDocument(3, {'keyword': ['economics'], 'title': ['mathematics for dummies']})
+        self.drilldown.commit()
+        results = self.doDrilldown(DocSet([0,1,2,3]), [(('keyword', 'title'), 0, True)])
         resultTerms = list(results[0][1])
         self.assertEquals([('economics', 3), ('mathematics for dummies', 2), ('math', 1)], resultTerms)
 
     def testMultiFieldDrilldownWithRepeatedTerms(self):
-        drilldown = Drilldown(['field_0', ('keyword', 'title'), 'field_1'])
-        drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
-        drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
-        drilldown.addDocument(2, {'keyword': ['economics','economics'], 'title': ['ecocs']})
-        drilldown.commit()
-        results = list(drilldown.drilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)]))
+        self.createDrilldown(['field_0', ('keyword', 'title'), 'field_1'])
+        self.drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
+        self.drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
+        self.drilldown.addDocument(2, {'keyword': ['economics','economics'], 'title': ['ecocs']})
+        self.drilldown.commit()
+        results = self.doDrilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)])
         resultTerms = list(results[0][1])
         self.assertEquals(set([('math', 1), ('mathematics for dummies', 1), ('economics', 1)]), set(resultTerms))
 
     def testMultiFieldDrilldownAfterDelete(self):
-        drilldown = Drilldown(['field_0', ('keyword', 'title'), 'field_1'])
-        drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
-        drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
-        drilldown.commit()
-        results = list(drilldown.drilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)]))
+        self.createDrilldown(['field_0', ('keyword', 'title'), 'field_1'])
+        self.drilldown.addDocument(0, {'keyword': ['math'], 'title': ['mathematics for dummies']})
+        self.drilldown.addDocument(1, {'keyword': ['economics'], 'description': ['cheating with numbers']})
+        self.drilldown.commit()
+        results = self.doDrilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)])
         resultTerms = list(results[0][1])
         self.assertEquals(set([('math', 1), ('mathematics for dummies', 1), ('economics', 1)]), set(resultTerms))
 
-        drilldown.deleteDocument(1)
-        drilldown.commit()
-        results = list(drilldown.drilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)]))
+        self.drilldown.deleteDocument(1)
+        self.drilldown.commit()
+        results = self.doDrilldown(DocSet([0,1]), [(('keyword', 'title'), 0, False)])
         resultTerms = list(results[0][1])
         self.assertEquals(set([('math', 1), ('mathematics for dummies', 1)]), set(resultTerms))
 
@@ -407,9 +413,10 @@
         self.addUntokenized([('id0', {'field_0': 'this is term_0'})])
         self.addUntokenized([('id1', {'field_1': 'this is term_1'})])
 
-        field, results = self.drilldown.drilldown(DocSet(data=[0,1]), [(('field_0', 'field_1'), 10, False)]).next()
+        results = self.doDrilldown(DocSet(data=[0,1]), [(('field_0', 'field_1'), 10, False)])
+        field, termCounts = results[0]
         self.assertEquals(('field_0', 'field_1'), field)
-        self.assertEquals([('this is term_0', 1), ('this is term_1', 1)], list(results))
+        self.assertEquals([('this is term_0', 1), ('this is term_1', 1)], list(termCounts))
 
     def testCompoundFieldReusesPreviousDrilldown(self):
         self.createDrilldown(['field_0', ('field_0', 'field_1')])
@@ -456,9 +463,17 @@
             'prefix.field_0': 'this is term_0',
             'prefix.field_1': 'this is term_1',
             'field_2': 'this is term_2'})])
-        field, results = self.drilldown.drilldown(DocSet(data=[0]), [('prefix.field_0', 10, False)]).next()
-        self.assertEquals([('this is term_0', 1)], list(results))
+        results = self.doDrilldown(DocSet(data=[0]), [('prefix.field_0', 10, False)])
+        field, termCounts = results[0]
+        self.assertEquals([('this is term_0', 1)], list(termCounts))
 
     def testCompoundFieldWithSameTermInDifferentFields(self):
         drilldown = Drilldown([('field_0', 'field_1')])
         drilldown._add(0, {'field_0': ['value'], 'field_1': ['value']}) # had a bug causing: "non-increasing docid" error
+
+    def executeQuery(self, *args, **kwargs):
+        return asyncreturn(self.index.executeQuery, *args, **kwargs)
+
+    def doDrilldown(self, *args, **kwargs):
+        return asyncreturn(self.drilldown.drilldown, *args, **kwargs)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/facetindex/incrementalindexingtest.py version_1/test/facetindex/incrementalindexingtest.py
--- version_0/test/facetindex/incrementalindexingtest.py	2011-07-11 16:29:23.000000000 +0200
+++ version_1/test/facetindex/incrementalindexingtest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,35 +1,38 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase
+from utils import asyncreturn
+
 from meresco.components.facetindex import LuceneIndex, Drilldown, Document, DocSet
 from meresco.components.facetindex.merescolucene import MatchAllDocsQuery
 
@@ -53,13 +56,13 @@
         self.index.commit()
         self.drilldown.commit()
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        result = list(self.drilldown.drilldown(docset, [('field0', 0, False)]))
+        result = self.doDrilldown(docset, [('field0', 0, False)])
         self.assertEquals([('term0',1)], list(result[0][1]))
         self.index.delete('1')
         self.index.commit()
         self.drilldown.commit()
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        result = list(self.drilldown.drilldown(docset, [('field0', 0, False)]))
+        result = self.doDrilldown(docset, [('field0', 0, False)])
         self.assertEquals([], list(result[0][1]))
 
         for identifier in xrange(30):
@@ -72,7 +75,7 @@
         self.drilldown.commit()
 
         docset = self.index.docsetFromQuery(MatchAllDocsQuery())
-        result = list(self.drilldown.drilldown(docset, [('field0', 0, False)]))
+        result = self.doDrilldown(docset, [('field0', 0, False)])
         sets = list(result[0][1])
         self.assertEquals([('term0', 29)], list(sorted(sets)))
 
@@ -154,6 +157,11 @@
         self.addDocument('1', field0='othervalue') # dodId 1 (Should delete docId 0)
         self.index.commit()
         self.drilldown.commit()
-        fieldname, results = self.drilldown.drilldown(DocSet([0L, 1L]), [('field0', 0, False)]).next()
+        results = self.doDrilldown(DocSet([0L, 1L]), [('field0', 0, False)])
+        fieldname, termCounts = results[0]
         self.assertEquals('field0', fieldname)
-        self.assertEquals([('othervalue', 1)], list(results))
+        self.assertEquals([('othervalue', 1)], list(termCounts))
+
+    def doDrilldown(self, *args, **kwargs):
+        return asyncreturn(self.drilldown.drilldown, *args, **kwargs)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/facetindex/lucenetest.py version_1/test/facetindex/lucenetest.py
--- version_0/test/facetindex/lucenetest.py	2011-07-11 16:29:23.000000000 +0200
+++ version_1/test/facetindex/lucenetest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,34 +1,38 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009-2010 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
+from cq2utils import CQ2TestCase, CallTrace
+from utils import asyncreturn
+
 from tempfile import mkdtemp, gettempdir
 from time import sleep
 import os
@@ -36,15 +40,16 @@
 from os import listdir
 from shutil import rmtree
 
-from cq2utils import CQ2TestCase, CallTrace
 from meresco.components.facetindex import Document, IDFIELD, LuceneIndex
 from meresco.components.facetindex import CQL2LuceneQuery
 from meresco.components.facetindex.merescolucene import Field, IndexReader, IndexWriter, Term, TermQuery, MatchAllDocsQuery
+from meresco.core import be, Observable
 
 from cqlparser import parseString
 
 from weightless.io import Reactor
 
+
 class LuceneTest(CQ2TestCase):
 
     def setUp(self):
@@ -55,6 +60,9 @@
         self._luceneIndex.close()
         CQ2TestCase.tearDown(self)
 
+    def executeQuery(self, *args, **kwargs):
+        return asyncreturn(self._luceneIndex.executeQuery, *args, **kwargs)
+
     def testCreation(self):
         self.assertEquals(os.path.isdir(self.tempdir), True)
         self.assertTrue(IndexReader.indexExists(self.tempdir))
@@ -67,9 +75,9 @@
         self.assertEquals(1, self._luceneIndex._writer.numDocs())
         self.assertEquals(1, self._luceneIndex.docCount())
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(1, len(hits))
-        self.assertEquals(['0123456789'], list(hits))
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(1, len(response.hits))
+        self.assertEquals(['0123456789'], list(response.hits))
 
     def testAddToIndexWithDuplicateField(self):
         myDocument = Document('id')
@@ -78,11 +86,11 @@
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(len(hits), 1)
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(len(response.hits), 1)
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'sub')))
-        self.assertEquals(len(hits), 1)
+        response = self.executeQuery(TermQuery(Term('title', 'sub')))
+        self.assertEquals(len(response.hits), 1)
 
     def testAddTwoDocuments(self):
         myDocument = Document('1')
@@ -94,8 +102,8 @@
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(2, len(hits))
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(2, len(response.hits))
 
     def testAddDocumentWithTwoValuesForOneField(self):
         myDocument = Document('1')
@@ -106,8 +114,8 @@
         self._luceneIndex.commit()
 
         def check(value):
-            total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field1', value)))
-            self.assertEquals(1, len(hits))
+            response = self.executeQuery(TermQuery(Term('field1', value)))
+            self.assertEquals(1, len(response.hits))
         check('value_1')
         check('value_2')
 
@@ -154,17 +162,17 @@
         self.addDocument('2', title='een titel')
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(2, len(hits))
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(2, len(response.hits))
 
         self._luceneIndex.delete('1')
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(2, len(hits))
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(2, len(response.hits))
 
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        self.assertEquals(1, len(hits))
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        self.assertEquals(1, len(response.hits))
 
     def testAddDeleteWithoutCommitInBetween(self):
         drilldown = CallTrace('drilldown')
@@ -172,8 +180,8 @@
         self.addDocument('1', exists='true')
         self._luceneIndex.delete('1')
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('exists', 'true')))
-        self.assertEquals(0, len(hits))
+        response = self.executeQuery(TermQuery(Term('exists', 'true')))
+        self.assertEquals(0, len(response.hits))
         #self.assertEquals(0, self._luceneIndex._tracker.nrOfDocs())
         for i in range(100):
             self.addDocument('%s' % (i+1), exists='true')
@@ -192,12 +200,12 @@
         myDocument.addIndexedField('title', 'een titel')
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel')))
-        # keep ref to hits, while refreshing/reopening the index after timeout
+        response = self.executeQuery(TermQuery(Term('title', 'titel')))
+        # keep ref to response.hits, while refreshing/reopening the index after timeout
         self._luceneIndex.commit()
         # now try to get the results,
         try:
-            list(hits)
+            list(response.hits)
         except JavaError, e:
             print str(e)
             self.assertEquals('org.apache.lucene.store.AlreadyClosedException: this IndexReader is closed', str(e))
@@ -214,17 +222,30 @@
         self.assertFalse(isfile(self.tempdir + '/x/write.lock'))
 
     def testCQLConversionIntegration(self):
-        queryConvertor = CQL2LuceneQuery([])
-        queryConvertor.addObserver(self._luceneIndex)
+        class MockSruHandler(Observable):
+            def executeQuery(self, query):
+                response = yield self.asyncany.executeQuery(cqlAbstractSyntaxTree=query)
+                raise StopIteration(response)
+
+        dna = be(
+            (Observable(), 
+                (MockSruHandler(),
+                    (CQL2LuceneQuery([('a',1)]),
+                        (self._luceneIndex,)
+                    )
+                )
+            )
+        )
+        
         myDocument = Document('0123456789')
         myDocument.addIndexedField('title', 'een titel')
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
-        total1, hits1 = list(self._luceneIndex.executeQuery(TermQuery(Term('title', 'titel'))))
-        total2, hits2 = list(queryConvertor.executeCQL(parseString("title = titel")))
-        self.assertEquals(len(hits1), len(hits2))
-        self.assertEquals(['0123456789'], hits1)
-        self.assertEquals(['0123456789'], hits2)
+        response1 = self.executeQuery(TermQuery(Term('title', 'titel')))
+        response2 = asyncreturn(dna.asyncany.executeQuery, parseString("title = titel"))
+        self.assertEquals(len(response1.hits), len(response2.hits))
+        self.assertEquals(['0123456789'], response1.hits)
+        self.assertEquals(['0123456789'], response2.hits)
 
     def testObserverInit(self):
         intercept = CallTrace('Interceptor')
@@ -258,14 +279,14 @@
         add('1')
         self._luceneIndex.commit()
         self._luceneIndex.addObserver(observer)
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
-        self.assertEquals(1, total)
+        response = self.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
+        self.assertEquals(1, response.total)
 
         add('2')
         add('3')
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
-        self.assertEquals(1, total)
+        response = self.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
+        self.assertEquals(1, response.total)
         self.assertEquals(['deleteDocument', 'addDocument', 'deleteDocument', 'addDocument'], [m.name for m in observer.calledMethods])
         self.assertEquals([0,1,1,2], [m.kwargs['docId'] for m in observer.calledMethods])
 
@@ -284,8 +305,8 @@
         add('2')
         delete()
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
-        self.assertEquals(0, total)
+        response = self.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
+        self.assertEquals(0, response.total)
 
         self.assertEquals(['deleteDocument', 'addDocument', 'deleteDocument'], [m.name for m in observer.calledMethods])
         self.assertEquals([0,1,1], [m.kwargs['docId'] for m in observer.calledMethods])
@@ -305,8 +326,8 @@
         add('3')
         delete()
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
-        self.assertEquals(0, total)
+        response = self.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
+        self.assertEquals(0, response.total)
 
         self.assertEquals(['deleteDocument', 'addDocument', 'deleteDocument', 'addDocument', 'deleteDocument'], [m.name for m in observer.calledMethods])
         self.assertEquals([0,1,1,2,2], [m.kwargs['docId'] for m in observer.calledMethods])
@@ -325,9 +346,9 @@
         deleteSameDoc()
         addSameDoc()
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
-        self.assertEquals(1, total)
-        self.assertEquals(total, self._luceneIndex._currentTracker.nrOfDocs())
+        response = self.executeQuery(TermQuery(Term('__id__', 'theIdIsTheSame')))
+        self.assertEquals(1, response.total)
+        self.assertEquals(response.total, self._luceneIndex._currentTracker.nrOfDocs())
         methodNames = [m.name for m in observer.calledMethods]
         docIds = [m.kwargs['docId'] for m in observer.calledMethods]
         self.assertEquals((['deleteDocument','addDocument','deleteDocument','addDocument',],[0,1,1,2]), (methodNames, docIds))
@@ -353,14 +374,14 @@
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field', 'a')))
-        self.assertEquals(1, total)
-        self.assertEquals(1, len(hits))
-        self.assertEquals(['id0'], list(hits))
-
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field', 'value')))
-        self.assertEquals(len(hits), 1)
-        self.assertEquals(['id0'], list(hits))
+        response = self.executeQuery(TermQuery(Term('field', 'a')))
+        self.assertEquals(1, response.total)
+        self.assertEquals(1, len(response.hits))
+        self.assertEquals(['id0'], list(response.hits))
+
+        response = self.executeQuery(TermQuery(Term('field', 'value')))
+        self.assertEquals(len(response.hits), 1)
+        self.assertEquals(['id0'], list(response.hits))
 
     def testSorting(self):
         myDocument = Document('id0')
@@ -373,13 +394,13 @@
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field1', 'one')), sortBy='field2', sortDescending=False)
-        self.assertEquals(len(hits), 2)
-        self.assertEquals(['id0', 'id1'], list(hits))
-
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field1', 'one')), sortBy='field2', sortDescending=True)
-        self.assertEquals(len(hits), 2)
-        self.assertEquals(['id1', 'id0'], list(hits))
+        response = self.executeQuery(TermQuery(Term('field1', 'one')), sortBy='field2', sortDescending=False)
+        self.assertEquals(len(response.hits), 2)
+        self.assertEquals(['id0', 'id1'], list(response.hits))
+
+        response = self.executeQuery(TermQuery(Term('field1', 'one')), sortBy='field2', sortDescending=True)
+        self.assertEquals(len(response.hits), 2)
+        self.assertEquals(['id1', 'id0'], list(response.hits))
 
     def testSortingNonExistingField(self):
         myDocument = Document('id0')
@@ -390,9 +411,9 @@
         self._luceneIndex.addDocument(myDocument)
         self._luceneIndex.commit()
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('field1', 'one')), sortBy='doesNotExist', sortDescending=False)
-        self.assertEquals(len(hits), 2)
-        self.assertEquals(['id0', 'id1'], list(hits))
+        response = self.executeQuery(TermQuery(Term('field1', 'one')), sortBy='doesNotExist', sortDescending=False)
+        self.assertEquals(len(response.hits), 2)
+        self.assertEquals(['id0', 'id1'], list(response.hits))
 
     def testStartAndStopArguments(self):
         def addDoc(n):
@@ -402,9 +423,9 @@
         for n in range(20):
             addDoc(n)
         self._luceneIndex.commit()
-        total, hits = self._luceneIndex.executeQuery(MatchAllDocsQuery(), 3, 7)
-        self.assertEquals(7-3, len(hits))
-        self.assertEquals(['3', '4', '5', '6'], hits)
+        response = self.executeQuery(MatchAllDocsQuery(), 3, 7)
+        self.assertEquals(7-3, len(response.hits))
+        self.assertEquals(['3', '4', '5', '6'], response.hits)
 
     def testFilter(self):
         for n in range(30):
@@ -417,18 +438,18 @@
         self._luceneIndex.commit()
         filter = [3, 4, 5, 9, 11, 12, 13]
 
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('findable', 'true')), docfilter=[])
-        self.assertEquals([], hits)
-        self.assertEquals(0, total)
-
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('findable', 'true')), docfilter=filter)
-        self.assertEquals([str(i) for i in filter if i < 20], hits)
-        self.assertEquals(7, total)
-
-        total, hits = self._luceneIndex.executeQuery(TermQuery(Term('findable', 'true')), 2, 5, docfilter=filter)
-        self.assertEquals(5-2, len(hits))
-        self.assertEquals([str(i) for i in filter if i < 20][2:5], hits)
-        self.assertEquals(7, total)
+        response = self.executeQuery(TermQuery(Term('findable', 'true')), docfilter=[])
+        self.assertEquals([], response.hits)
+        self.assertEquals(0, response.total)
+
+        response = self.executeQuery(TermQuery(Term('findable', 'true')), docfilter=filter)
+        self.assertEquals([str(i) for i in filter if i < 20], response.hits)
+        self.assertEquals(7, response.total)
+
+        response = self.executeQuery(TermQuery(Term('findable', 'true')), 2, 5, docfilter=filter)
+        self.assertEquals(5-2, len(response.hits))
+        self.assertEquals([str(i) for i in filter if i < 20][2:5], response.hits)
+        self.assertEquals(7, response.total)
 
     def testFailureRollsBack(self):
         self.addDocument('1', field1='ape')
@@ -540,17 +561,17 @@
         self._luceneIndex._writer.optimize()
         self._luceneIndex.close()
 
-        luceneIndex = LuceneIndex(directoryName=self.tempdir)
+        self._luceneIndex = LuceneIndex(directoryName=self.tempdir)
 
-        total, hits = luceneIndex.executeQuery(MatchAllDocsQuery())
-        self.assertEquals(2, total)
+        response = self.executeQuery(MatchAllDocsQuery())
+        self.assertEquals(2, response.total)
 
-        luceneIndex.delete('identifier')
-        luceneIndex.commit()
+        self._luceneIndex.delete('identifier')
+        self._luceneIndex.commit()
 
-        total, hits = luceneIndex.executeQuery(MatchAllDocsQuery())
-        self.assertEquals(0, total)
-        self.assertEquals(0, luceneIndex._currentTracker.nrOfDocs())
+        response = self.executeQuery(MatchAllDocsQuery())
+        self.assertEquals(0, response.total)
+        self.assertEquals(0, self._luceneIndex._currentTracker.nrOfDocs())
 
     def testAssertionErrorInCaseTrackerOutOfSync(self):
         from meresco.components.facetindex.lucenedocidtracker import LuceneDocIdTracker
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/fields2xmlfieldstest.py version_1/test/fields2xmlfieldstest.py
--- version_0/test/fields2xmlfieldstest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/fields2xmlfieldstest.py	2011-07-21 13:54:09.000000000 +0200
@@ -0,0 +1,134 @@
+# -*- coding: utf-8 -*-
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2010-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2010-2011 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from cq2utils import CQ2TestCase, CallTrace
+from meresco.components.fields2xmlfields import Fields2XmlFields, generateXml
+
+NAMESPACE="http://example.org/namespace"
+
+class Fields2XmlFieldsTest(CQ2TestCase):
+    def setUp(self):
+        CQ2TestCase.setUp(self)
+
+        ctx = CallTrace('CTX')
+        tx = CallTrace('TX')
+        tx.locals = {'id': 'identifier'}
+        tx.name = "tsName"
+        self.fxf = Fields2XmlFields("tsName", "fields-partname", namespace=NAMESPACE)
+        self.fxf.ctx = ctx 
+        self.fxf.ctx.tx = tx
+        self.observer = CallTrace()
+        self.fxf.addObserver(self.observer)
+
+    def testAddField(self):
+        self.fxf.begin()
+        self.fxf.addField("key.sub", "value")
+        self.fxf.commit()
+        self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
+        kwargs = self.observer.calledMethods[0].kwargs
+        self.assertEquals("identifier", kwargs['identifier'])
+        self.assertEquals("fields-partname", kwargs['partname'])
+        self.assertEqualsWS("""<fields xmlns="%s">
+                <field name="key.sub">value</field>
+            </fields>""" % NAMESPACE, kwargs['data'])
+
+    def testAddFieldWithXmlInKeyAndValue(self):
+        self.fxf.begin()
+        self.fxf.addField("""<name>"&'""", """<value>"&'""")
+        self.fxf.commit()
+        self.assertEquals(["add"], [m.name for m in self.observer.calledMethods])
+        kwargs = self.observer.calledMethods[0].kwargs
+        self.assertEqualsWS("""<fields xmlns="%s">
+                <field name="&lt;name&gt;&quot;&amp;'">&lt;value&gt;&quot;&amp;'</field>
+            </fields>""" % NAMESPACE, kwargs['data'])
+
+    def testNoCommitWhenAddFieldNotCalled(self):
+        self.fxf.begin()
+        self.fxf.commit()
+        self.assertEquals([], self.observer.calledMethods)
+
+    def testSameAddFieldGeneratedTwoTimes(self):
+        self.fxf.begin()
+        self.fxf.addField("key.sub", "value")
+        self.fxf.addField("key.sub", "othervalue")
+        self.fxf.addField("key.sub", "value")
+        self.fxf.addField("key.sub", "separatedbyvalue")
+        self.fxf.commit()
+
+        self.assertEquals(['add'], [m.name for m in self.observer.calledMethods])
+        self.assertEqualsWS("""<fields xmlns="%s">
+               <field name="key.sub">value</field>
+               <field name="key.sub">othervalue</field>
+               <field name="key.sub">value</field>
+               <field name="key.sub">separatedbyvalue</field>
+            </fields>""" % NAMESPACE, self.observer.calledMethods[0].kwargs['data'])
+
+    def testEmptyNamespace(self):
+        ctx = CallTrace('CTX')
+        tx = CallTrace('TX')
+        tx.locals = {'id': 'identifier'}
+        tx.name = "tsName"
+        fxf = Fields2XmlFields("tsName", "fields-partname")
+        fxf.ctx = ctx 
+        fxf.ctx.tx = tx
+        observer = CallTrace()
+        fxf.addObserver(observer)
+        
+        fxf.begin()
+        fxf.addField("key.sub", "value")
+        fxf.commit()
+
+        self.assertEquals(['add'], [m.name for m in observer.calledMethods])
+        self.assertEqualsWS("""<fields>
+                <field name="key.sub">value</field>
+            </fields>""", observer.calledMethods[0].kwargs['data']) 
+
+    def testGenerateOneKeyXml(self):
+        self.assertEquals('<field name="key">value</field>', generateXml([('key','value')]))
+
+    def testGenerateOneSubKeyXml(self):
+        self.assertEquals('<field name="key.sub">value</field>', generateXml([('key.sub','value')]))
+   
+    def testGenerateOtherParentKeyXml(self):
+        self.assertEquals('<field name="a.b">value</field><field name="c.d">value2</field>', generateXml([('a.b','value'), ('c.d','value2')]))
+
+    def testGenerateXml(self):
+        self.assertEquals('<field name="a.b.c.d">DDD</field><field name="a.b.c.e">EEE</field><field name="a.b.c">CCC</field><field name="a.b.f">FFF</field><field name="a.b.c.d">DDD</field>', generateXml([('a.b.c.d','DDD'), ('a.b.c.e','EEE'), ('a.b.c', 'CCC'),('a.b.f', 'FFF'), ('a.b.c.d', 'DDD')]))
+
+    def testEscapeTagNamesAndValues(self):
+        self.assertEquals("""<field name="k/\\.sub">value</field>""", generateXml([('k/\\.sub','value')]))
+        self.assertEquals('<field name="key">&lt;/tag&gt;</field>', generateXml([('key','</tag>')]))
+
+    def testEscapeCorrectly(self):
+        fields = [
+               ( 'vuur.aap' , 'normal' ),
+               ( 'vuurboom.aap' , 'normal' ),
+            ]
+        x = '<root>%s</root>' % generateXml(fields)
+        self.assertEquals("""<root><field name="vuur.aap">normal</field><field name="vuurboom.aap">normal</field></root>""", x)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/ngram/cqlsuggestertest.py version_1/test/ngram/cqlsuggestertest.py
--- version_0/test/ngram/cqlsuggestertest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/ngram/cqlsuggestertest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,72 +1,104 @@
 #-*- coding: utf-8
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2008 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from unittest import TestCase
 from cq2utils import CallTrace
 from cqlparser import parseString
+from meresco.core import be, Observable
 from meresco.components.cqlsuggester import CqlSuggester
 from meresco.components.ngram import LevenshteinSuggester
-
+from weightless.core import compose
 
 class MockNGramQuery(object):
     def __init__(self, results):
         self._results = results
     def executeNGramQuery(self, query, maxResults, fieldname=None):
-        return self._results[:maxResults]
+        raise StopIteration(self._results[:maxResults])
+        yield
 
-class CqlSuggesterTest(TestCase):
+class Interceptor(Observable):
+    def suggestionsFor(self, *args, **kwargs):
+        result = yield self.asyncany.suggestionsFor(*args, **kwargs)
+        yield result
+
+    def suggestForCql(self, *args, **kwargs):
+        result = yield self.asyncany.suggestForCql(*args, **kwargs)
+        yield result
 
+class CqlSuggesterTest(TestCase):
     def testTwoWords(self):
         suggester = CallTrace('suggester')
+        dna = be((Observable(),
+            (Interceptor(),
+                (CqlSuggester(),
+                    (suggester,)
+                )
+            )
+        ))
         def suggestionsFor(term):
-            return ['wordy']
+            raise StopIteration(['wordy'])
+            yield
         suggester.suggestionsFor = suggestionsFor
         cqlquery = parseString('word0 and word1')
-        cqlsuggester = CqlSuggester()
-        cqlsuggester.addObserver(suggester)
-        result = cqlsuggester.suggestForCql(cqlAST=cqlquery)
-        self.assertEquals(['wordy'], result)
+        result = compose(dna.any.suggestForCql(cqlAST=cqlquery))
+        self.assertEquals(['wordy'], result.next())
 
     def testTwoWordsWithRealSuggester(self):
         ngramQuery = MockNGramQuery([u'wordy', u'wordx'])
-        self.assertEquals(['wordy', 'wordx'], ngramQuery.executeNGramQuery('nonsense', 99))
         suggester = LevenshteinSuggester(samples=50, threshold=10, maxResults=5)
-        suggester.addObserver(ngramQuery)
-        self.assertEquals((False, ['wordy', 'wordx']), suggester.suggestionsFor('wordz'))
-        self.assertEquals((True, ['wordx']), suggester.suggestionsFor('wordy'))
-        cqlsuggester = CqlSuggester()
-        cqlsuggester.addObserver(suggester)
+        dna = be((Observable(),
+            (Interceptor(),
+                (suggester,
+                    (ngramQuery,),
+                )
+            )
+        ))
+        self.assertEquals([False, ['wordy', 'wordx']], compose(dna.any.suggestionsFor('wordz')).next())
+        self.assertEquals([True, ['wordx']], compose(dna.any.suggestionsFor('wordy')).next())
+
+    def testCqlSuggester(self):
+        ngramQuery = MockNGramQuery([u'wordy', u'wordx'])
+        suggester = LevenshteinSuggester(samples=50, threshold=10, maxResults=5)
+        dna = be((Observable(),
+            (Interceptor(),
+                (CqlSuggester(),
+                    (suggester,
+                        (ngramQuery,),
+                    )
+                )
+            )
+        ))
         cqlAST = parseString('wordz and wordy')
         self.assertEquals('wordz', cqlAST.children[0].children[0].children[0].children[0].children[0].children[0])
-        result = cqlsuggester.suggestForCql(cqlAST)
-        self.assertEquals((False, ['wordy', 'wordx']), result)
-
-
+        result = compose(dna.any.suggestForCql(cqlAST))
+        self.assertEquals([False, ['wordy', 'wordx']], result.next())
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/ngram/ngramquerytest.py version_1/test/ngram/ngramquerytest.py
--- version_0/test/ngram/ngramquerytest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/ngram/ngramquerytest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,63 +1,96 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2008 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2008 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2008-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2009-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2008-2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2008-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2008-2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase, CallTrace
 
+from meresco.core import be, Observable
 from meresco.components.ngram import NGramQuery
+from meresco.components.facetindex import Response
+from weightless.core import compose
+
+class Interceptor(Observable):
+    def executeNGramQuery(self, *args, **kwargs):
+        result = yield self.asyncany.executeNGramQuery(*args, **kwargs)
+        yield result
 
 class NGramQueryTest(CQ2TestCase):
     def testOne(self):
         observer = CallTrace('observer')
-        q = NGramQuery(2)
-        q.addObserver(observer)
-        observer.returnValues['executeQuery'] = (120, ['word%s$' % d for d in range(50)] )
+        ngramQuery = NGramQuery(2)
+        dna = be((Observable(),
+            (Interceptor(),
+                (ngramQuery,
+                    (observer,)
+                )
+            )
+        ))
+        response = Response(total=120, hits=['word%s$' % d for d in range(50)])
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
-        suggestions = q.executeNGramQuery('word', 2)
+        composedGenerator = compose(dna.any.executeNGramQuery('word', 2))
+        suggestions = composedGenerator.next()
 
         self.assertEquals(['word0', 'word1'], list(suggestions))
 
     def testNGramQuery(self):
-        ngramindex = CallTrace('ngramindex', returnValues = {'executeQuery': (2, ['term0$', 'term1$'])})
+        ngramindex = CallTrace('ngramindex')
+        response = Response(total=2, hits=['term0$', 'term1$'])
+        ngramindex.exceptions['executeQuery'] = StopIteration(response)
         ngramQuery = NGramQuery(2)
-        ngramQuery.addObserver(ngramindex)
-        suggestions = ngramQuery.executeNGramQuery('term0', 1234)
+        dna = be((Observable(),
+            (Interceptor(),
+                (ngramQuery,
+                    (ngramindex,)
+                )
+            )
+        ))
+        composedGenerator = compose(dna.any.executeNGramQuery('term0', 1234))
+        suggestions = composedGenerator.next()
         self.assertEquals(['term0', 'term1'], list(suggestions))
         self.assertEquals('+field:ngrams$ +(ngrams:te ngrams:er ngrams:rm ngrams:m0)', str(ngramindex.calledMethods[0].args[0]))
-        ngramindex.returnValues['executeQuery'] = (2, ['term2', 'term9'])
-        suggestions = ngramQuery.executeNGramQuery('term0',87655)
+        response = Response(total=2, hits=['term2', 'term9'])
+        ngramindex.exceptions['executeQuery'] = StopIteration(response)
+        suggestions = compose(dna.any.executeNGramQuery('term0',87655)).next()
         self.assertEquals(['term2', 'term9'], list(suggestions))
 
     def testNgramQueryFieldname(self):
-        ngramindex = CallTrace('ngramindex', returnValues = {'executeQuery': (2, ['term0$some_fieldname', 'term1$some_fieldname'])})
+        ngramindex = CallTrace('ngramindex')
+        response = Response(total=2, hits=['term0$some_fieldname', 'term1$some_fieldname'])
+        ngramindex.exceptions['executeQuery'] = StopIteration(response)
         ngramQuery = NGramQuery(2, fieldnames=['some_fieldname'])
-        ngramQuery.addObserver(ngramindex)
-        suggestions = ngramQuery.executeNGramQuery('term0',9876, fieldname='some_fieldname')
+        dna = be((Observable(),
+            (Interceptor(),
+                (ngramQuery,
+                    (ngramindex,)
+                )
+            )
+        ))
+        suggestions = compose(dna.any.executeNGramQuery('term0',9876, fieldname='some_fieldname')).next()
         self.assertEquals(['term0', 'term1'], list(suggestions))
         self.assertEquals('+field:ngrams$some_fieldname +(ngrams:te ngrams:er ngrams:rm ngrams:m0)', str(ngramindex.calledMethods[0].args[0]))
 
@@ -65,16 +98,23 @@
         docsetlist = CallTrace('docsetlist')
         drilldown = CallTrace('drilldownAndIndex')
         ngramQuery = NGramQuery(2, samples=50, fieldForSorting='fieldForSorting')
-        ngramQuery.addObserver(drilldown)
+        dna = be((Observable(),
+            (Interceptor(),
+                (ngramQuery,
+                    (drilldown,)
+                )
+            )
+        ))
         drilldown.returnValues['docsetlist'] = docsetlist
-        drilldown.returnValues['executeQuery'] = (100, ['term%s$' % i for i in range(50)])
+        response = Response(total=100, hits=['term%s$' % i for i in range(50)])
+        drilldown.exceptions['executeQuery'] = StopIteration(response)
         cardinalities = dict(('term%s' % i, 1) for i in range(100))
         cardinalities['term0'] = 10
         cardinalities['term10'] = 2
         cardinalities['term20'] = 20
         docsetlist.methods['cardinality'] = lambda term: cardinalities.get(term, 0)
 
-        suggestions = ngramQuery.executeNGramQuery('term', maxResults=5)
+        suggestions = compose(dna.any.executeNGramQuery('term', maxResults=5)).next()
 
         self.assertEquals(['term20', 'term0', 'term10', 'term1', 'term2'], list(suggestions))
         self.assertEquals(['cardinality']*50, [m.name for m in docsetlist.calledMethods])
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/ngram/ngramtest.py version_1/test/ngram/ngramtest.py
--- version_0/test/ngram/ngramtest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/ngram/ngramtest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,39 +1,44 @@
 #-*- coding: utf-8
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2008-2009 Delft University of Technology http://www.tudelft.nl
-#    Copyright (C) 2008-2009 Tilburg University http://www.uvt.nl
-#    Copyright (C) 2008-2010 Seek You Too (CQ2) http://www.cq2.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2008-2009 Delft University of Technology http://www.tudelft.nl
+# Copyright (C) 2008-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2008-2009 Tilburg University http://www.uvt.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
+
 from cq2utils import CQ2TestCase, CallTrace
 
 from meresco.core import Observable, TransactionScope, ResourceManager, be, Transaction
 from meresco.components import Xml2Fields
 
-from meresco.components.facetindex import LuceneIndex, Fields2LuceneDocumentTx, Document, Drilldown
+from meresco.components.facetindex import LuceneIndex, Fields2LuceneDocumentTx, Document, Drilldown, Response
 from meresco.components.ngram.ngram import ngrams
 from meresco.components.ngram.suggester import _Suggestion
 from meresco.components.ngram import NGramQuery, LevenshteinSuggester, RatioSuggester, NGramIndex
 
+from weightless.core import compose
+
 from Levenshtein import distance, ratio
 from lxml.etree import parse
 from StringIO import StringIO
@@ -42,6 +47,11 @@
 
 PUCH_WORDS = [u'capuche', u'capuches', u'Capuchin', u'capuchins', u'Mapuche', u'Pampuch', u'puchera', u'pucherite', u'capuched', u'capuchin', u'puchero', u'PUC', u'Kampuchea', u'kampuchea', u'Puchanahua', u'sepuchral', u'puca', u'puce', u'puces', u'Puck', u'puck', u'pucka', u'pucks', u'Pupuluca', u'Puccini', u'puccini', u'puccoon', u'puceron', u'Pucida', u'pucker', u'puckish', u'puckle', u'SPUCDL', u'Chuch', u'Punch', u'punch', u'cappuccino', u'capucine', u'catapuce', u'catepuce', u'depucel', u'leucopus', u'mucopus', u'praepuce', u'prepuce', u'prepuces', u'Puccinia', u'puccinoid', u'puccoons', u'pucelage', u'pucellas', u'pucelle', u'puckball', u'puckered', u'puckerel', u'puckerer', u'puckering', u'puckers', u'puckery', u'Puckett', u'puckfist', u'puckfoist', u'puckishly', u'pucklike', u'puckling', u'puckrel', u'pucksey', u'puckster', u'sapucaia', u'unpucker', u'Vespucci', u'vespucci', u'Chucho', u'aneuch', u'aucht', u'bauch', u'bouch', u'Bruch', u'Buch', u'Buchan', u'buch', u'cauch', u'Chuck', u'chuck', u'couch', u'Cuchan', u'duchan', u'duchy', u'Eucha', u'Fauch', u'fuchi', u'Fuchs', u'heuch', u'hucho', u'Jauch', u'kauch', u'leuch', u'louch', u'Lucho', u'Manouch', u'mouch', u'much', u'nauch', u'nonsuch', u'nouche', u'nucha', u'ouch', u'pouch', u'Rauch', u'ruche', u'sauch', u'snouch', u'such', u'teuch', u'touch', u'touch-', u'touche', u'touchy', u'tuchis', u'tuchit', u'Uchean', u'Uchee', u'Uchish', u'vouch', u'wauch']
 
+class MockDidYouMean(Observable):
+    def suggestionsFor(self, *args, **kwargs):
+        result = yield self.asyncany.suggestionsFor(*args, **kwargs)
+        yield result 
+
 class NGramTest(CQ2TestCase):
     def setUp(self):
         global identifierNr
@@ -80,14 +90,16 @@
         ))
         self.indexingDna.once.observer_init()
         suggesterDna = be((Observable(),
-            (NoOpSuggester(),
-                (NGramQuery(2, samples=50, fieldnames=['field0', 'field1'], fieldForSorting='allfields'),
-                    (ngramIndex,),
-                    (allfieldsDrilldown,)
+            (MockDidYouMean(),
+                (NoOpSuggester(),
+                    (NGramQuery(2, samples=50, fieldnames=['field0', 'field1'], fieldForSorting='allfields'),
+                        (ngramIndex,),
+                        (allfieldsDrilldown,)
+                    )
                 )
             )
         ))
-        self.suggestionsFor = lambda word, fieldname=None: suggesterDna.any.suggestionsFor(word, fieldname=fieldname)
+        self.suggestionsFor = lambda word, fieldname=None: tuple(compose(suggesterDna.any.suggestionsFor(word, fieldname=fieldname)).next())
 
         def addWord(word, fieldname='field'):
             global identifierNr
@@ -187,10 +199,18 @@
     def assertSuggestions(self, expected, term, suggester, ngramQuerySamples):
         ngramindex = CallTrace('ngramindex')
         def executeQuery(query, start, stop, *args):
-            return (len(PUCH_WORDS), PUCH_WORDS[:stop])
+            response = Response(total=len(PUCH_WORDS), hits=PUCH_WORDS[:stop])
+            raise StopIteration(response)
         ngramindex.executeQuery = executeQuery
         ngramQuery = NGramQuery(2, samples=ngramQuerySamples)
-        ngramQuery.addObserver(ngramindex)
-        suggester.addObserver(ngramQuery)
-        inclusive, results = suggester.suggestionsFor(term)
+        suggesterDna = be((Observable(),
+            (MockDidYouMean(),
+                (suggester,
+                    (ngramQuery,
+                        (ngramindex,),
+                    )
+                )
+            )
+        ))
+        inclusive, results = compose(suggesterDna.any.suggestionsFor(term)).next()
         self.assertEquals(expected, list(results))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/numeric/numbercomparitortest.py version_1/test/numeric/numbercomparitortest.py
--- version_0/test/numeric/numbercomparitortest.py	2011-07-11 16:29:21.000000000 +0200
+++ version_1/test/numeric/numbercomparitortest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase, CallTrace
@@ -68,7 +69,7 @@
                 )
             )
         ))
-        total, recordIds = dna.any.executeCQL(cqlAbstractSyntaxTree=parseString(query))
+        total, recordIds = yield dna.asyncany.executeCQL(cqlAbstractSyntaxTree=parseString(query))
         self.assertEquals(expectedResult, sorted(recordIds))
         
     def testGTE_1_Decimal(self):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/rsstest.py version_1/test/rsstest.py
--- version_0/test/rsstest.py	2011-07-11 16:29:24.000000000 +0200
+++ version_1/test/rsstest.py	2011-07-21 13:54:09.000000000 +0200
@@ -1,36 +1,38 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase, CallTrace
 from amara.binderytools import bind_string
 from urllib import urlencode
 
+from meresco.components.facetindex import Response
 from meresco.components.rss import Rss
 
 from cqlparser import parseString as parseCql
@@ -55,8 +57,8 @@
 
     def testNoResults(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
 
         rss = Rss(
             title = 'Test title',
@@ -72,13 +74,11 @@
 
     def testOneResult(self):
         observer = CallTrace(
-            returnValues={
-                'executeCQL': (1, [1]),
-            },
             methods={
                 'getRecord': lambda recordId: (g for g in ['<item><title>Test Title</title><link>Test Identifier</link><description>Test Description</description></item>']),
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=1, hits=[1]))
 
         rss = Rss(
             title = 'Test title',
@@ -98,8 +98,8 @@
 
     def testError(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
         rss = Rss(
             title = 'Test title',
             description = 'Test description',
@@ -137,9 +137,12 @@
             recordIds.append(recordId)
             return '<item/>'
 
+        def executeQuery(start, stop, *args, **kwargs):
+            response = Response(total=50, hits=range(start, stop))
+            raise StopIteration(response)
         observer = CallTrace(
             methods={
-                'executeCQL': lambda start=0, stop=10, *args, **kwargs: (50, range(start, stop)),
+                'executeQuery': executeQuery,
                 'getRecord': getRecord,
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
@@ -148,7 +151,7 @@
         result = "".join(list(rss.handleRequest(RequestURI='/?query=aQuery&' + urlencode(sruArgs))))
 
         method = observer.calledMethods[0]
-        self.assertEquals('executeCQL', method.name)
+        self.assertEquals('executeQuery', method.name)
         self.assertEquals(sortKey, method.kwargs['sortBy'])
         self.assertEquals(sortDirection, method.kwargs['sortDescending'])
         self.assertEquals(maximumRecords, len(recordIds))
@@ -165,7 +168,7 @@
 
     def testContentType(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
+            returnValues={'executeQuery': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
@@ -175,42 +178,42 @@
 
     def testWebQueryUsage(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
         result = "".join(rss.handleRequest(RequestURI='/?query=one+two'))
-        self.assertEquals(["executeCQL(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
 
     def testAntiUnaryClauseIsPassedToWebQuery(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
         rss = Rss(title='Title', description='Description', link='Link', antiUnaryClause='antiunary')
         rss.addObserver(observer)
 
         result = "".join(rss.handleRequest(RequestURI='/?query=not+fiets'))
         
-        self.assertEquals(["executeCQL(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
         self.assertCql(parseCql("antiunary NOT fiets"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
     def testWebQueryUsesFilters(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration(Response(total=0, hits=[]))
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
         result = "".join(rss.handleRequest(RequestURI='/?query=one+two&filter=field1:value1&filter=field2:value2'))
-        self.assertEquals(["executeCQL(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertEquals(["executeQuery(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
 
         self.assertCql(parseCql("(one AND two) AND field1 exact value1 AND field2 exact value2"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
     def testWebQueryIgnoresWrongFilters(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (0, [])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        observer.exceptions['executeQuery'] = StopIteration([0, []])
         rss = Rss(title = 'Title', description = 'Description', link = 'Link')
         rss.addObserver(observer)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/srufielddrilldowntest.py version_1/test/sru/srufielddrilldowntest.py
--- version_0/test/sru/srufielddrilldowntest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/sru/srufielddrilldowntest.py	2011-07-21 13:54:08.000000000 +0200
@@ -1,67 +1,79 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
+from cq2utils import CQ2TestCase, CallTrace
+from utils import asyncreturn
+
 from StringIO import StringIO
 
-from cq2utils import CQ2TestCase, CallTrace
 from meresco.core import be, decorateWith
+from meresco.components.facetindex import Response
 from meresco.components.drilldown import SRUFieldDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER
 
-from cqlparser import parseString
+from weightless.core import compose
+
+from cqlparser import parseString, cql2string
 
 class SRUFieldDrilldownTest(CQ2TestCase):
 
     def testSRUParamsAndXMLOutput(self):
+        firstCall = []
+        def executeQuery(**kwargs):
+            if not firstCall:
+                firstCall.append(True)
+                raise StopIteration(Response(total=5, hits=range(5)))
+            else:
+                raise StopIteration(Response(total=10, hits=range(10)))
         sruFieldDrilldown = SRUFieldDrilldown()
-        sruFieldDrilldown.drilldown = self.drilldown
+        observer = CallTrace("observer")
+        sruFieldDrilldown.addObserver(observer)
+        observer.methods["executeQuery"] = executeQuery
 
-        self.drilldownCall = None
-        result = sruFieldDrilldown.extraResponseData(x_field_drilldown=['term'], x_field_drilldown_fields=['field0,field1'], query='original')
+        result = compose(sruFieldDrilldown.extraResponseData(x_field_drilldown=['term'], x_field_drilldown_fields=['field0,field1'], query='original'))
         self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:field-drilldown>
 <dd:field name="field0">5</dd:field>
 <dd:field name="field1">10</dd:field></dd:field-drilldown></dd:drilldown>""", "".join(result))
 
-        self.assertEquals(('original', 'term', ['field0', 'field1']), self.drilldownCall)
-
-    def drilldown(self, query, term, fields):
-        self.drilldownCall = (query, term, fields)
-        return [('field0', 5),('field1', 10)]
+        self.assertEquals(['executeQuery', 'executeQuery'], [m.name for m in observer.calledMethods])
+        self.assertEquals(['cqlAbstractSyntaxTree', 'cqlAbstractSyntaxTree'], [','.join((m.kwargs.keys())) for m in observer.calledMethods])
+        self.assertEquals('(original) AND field0=term', cql2string(observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree']))
+        self.assertEquals('(original) AND field1=term', cql2string(observer.calledMethods[1].kwargs['cqlAbstractSyntaxTree']))
 
     def testDrilldown(self):
         adapter = SRUFieldDrilldown()
         observer = CallTrace("Observer")
-        observer.returnValues["executeCQL"] = (16, range(16))
+        observer.exceptions["executeQuery"] = StopIteration(Response(total=16, hits=range(16)))
         adapter.addObserver(observer)
-        result = list(adapter.drilldown('original', 'term', ['field0', 'field1']))
-
+        result = asyncreturn(adapter.drilldown, 'original', 'term', ['field0', 'field1'])
         self.assertEquals(2, len(observer.calledMethods))
-        self.assertEquals("executeCQL(cqlAbstractSyntaxTree=<class CQL_QUERY>)", str(observer.calledMethods[0]))
+        self.assertEquals("executeQuery(cqlAbstractSyntaxTree=<class CQL_QUERY>)", str(observer.calledMethods[0]))
         self.assertEquals(parseString("(original) and field0=term"),  observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
         self.assertEquals([("field0", 16), ("field1", 16)], result)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/sruhandlertest.py version_1/test/sru/sruhandlertest.py
--- version_0/test/sru/sruhandlertest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/sru/sruhandlertest.py	2011-07-21 13:54:08.000000000 +0200
@@ -1,39 +1,41 @@
 # -*- coding: utf-8 -*-
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from meresco.components.sru.sruparser import MANDATORY_PARAMETER_NOT_SUPPLIED, UNSUPPORTED_PARAMETER, UNSUPPORTED_VERSION, UNSUPPORTED_OPERATION, UNSUPPORTED_PARAMETER_VALUE, QUERY_FEATURE_UNSUPPORTED, SruException
 
 from meresco.components.sru import SruHandler, SruParser
-from meresco.components.drilldown import SRUTermDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER
+from meresco.components.drilldown import SRUTermDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
 from meresco.components.xml_generic.validate import assertValid
 from meresco.components.xml_generic import schemasPath
+from meresco.components.facetindex import Response
 
 from os.path import join
 
@@ -117,20 +119,81 @@
 
         sruHandler = SruHandler()
         sruTermDrilldown = SRUTermDrilldown()
-        observer = CallTrace("Drilldown")
-        observer.returnValues['drilldown'] = iter([
+        drilldownData = iter([
                 ('field0', iter([('value0_0', 14)])),
                 ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
                 ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))
             ])
-        sruTermDrilldown.addObserver(observer)
         sruHandler.addObserver(sruTermDrilldown)
-        result = "".join(list(sruHandler._writeExtraResponseData(docset='docset', **arguments)))
+        result = "".join(sruHandler._writeExtraResponseData(drilldownData=drilldownData, **arguments))
         self.assertEqualsWS("""<srw:extraResponseData><dd:drilldown\n    xmlns:dd="http://meresco.org/namespace/drilldown"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/drilldown-20070730.xsd"><dd:term-drilldown><dd:navigator name="field0"><dd:item count="14">value0_0</dd:item></dd:navigator><dd:navigator name="field1"><dd:item count="13">value1_0</dd:item><dd:item count="11">value1_1</dd:item></dd:navigator><dd:navigator name="field2"><dd:item count="3">value2_0</dd:item><dd:item count="2">value2_1</dd:item><dd:item count="1">value2_2</dd:item></dd:navigator></dd:term-drilldown></dd:drilldown></srw:extraResponseData>""" , result)
 
+    def testMerescoLuceneDrilldown(self):
+        observer = CallTrace()
+        response = Response(total=100, hits=range(11, 26))
+        drilldownData = iter([
+            ('field0', iter([('value0_0', 14)])),
+            ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
+            ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))]) 
+        observer.exceptions['executeQuery'] = StopIteration(response)
+        observer.exceptions['drilldown'] = StopIteration(drilldownData)
+        observer.returnValues['docsetFromQuery'] = "cqltree"
+        observer.returnValues['yieldRecord'] = "record"
+        observer.returnValues['extraResponseData'] = 'extraResponseData'
+        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+
+        component = SruHandler(extraRecordDataNewStyle=True)
+        component.addObserver(observer)
+
+        result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
+        self.assertEquals(['executeQuery', 'docsetFromQuery', 'drilldown'], [m.name for m in observer.calledMethods][:3])
+        self.assertEquals('cqltree', observer.calledMethods[2].kwargs['docset'])
+        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[2].kwargs['fieldnamesAndMaximums']))
+
+    def testDrilldownResultInExecuteQuery(self):
+        observer = CallTrace()
+        response = Response(total=100, hits=range(11, 26))
+        drilldownData = iter([
+            ('field0', iter([('value0_0', 14)])),
+            ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
+            ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))]) 
+        response.drilldownData = drilldownData
+        observer.exceptions['executeQuery'] = StopIteration(response)
+        observer.returnValues['yieldRecord'] = "record"
+        observer.returnValues['extraResponseData'] = 'extraResponseData'
+        observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
+
+        component = SruHandler(extraRecordDataNewStyle=True)
+        component.addObserver(observer)
+
+        result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
+        self.assertEquals(['executeQuery', 'yieldRecord'], [m.name for m in observer.calledMethods][:2])
+        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[0].kwargs['fieldnamesAndMaximums']))
+
+    def testDrilldownCallRaisesAnError(self):
+        observer = CallTrace()
+        def mockDrilldown(*args, **kwargs):
+            raise Exception("Some Exception")
+            yield "Some thing"
+        observer.methods["drilldown"] = mockDrilldown
+        response = Response(total=100, hits=range(11, 26))
+        observer.exceptions['executeQuery'] = StopIteration(response)
+        sruHandler = SruHandler(extraRecordDataNewStyle=True)
+        sruHandler.addObserver(observer)
+        result = "".join(compose(sruHandler.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema', x_term_drilldown=["field0:1,field1:2,field2"])))
+
+        expected = """<srw:searchRetrieveResponse xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
+<srw:version>1.1</srw:version><srw:numberOfRecords>0</srw:numberOfRecords><srw:diagnostics><diagnostic xmlns="http://www.loc.gov/zing/srw/diagnostic/">
+<uri>info://srw/diagnostics/1/48</uri>
+<details>Query Feature Unsupported</details>
+<message>Some Exception</message>
+</diagnostic></srw:diagnostics></srw:searchRetrieveResponse>"""
+        self.assertEqualsWS(expected, result)
+
     def testNextRecordPosition(self):
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 26))
+        response = Response(total=100, hits=range(11, 26))
+        observer.exceptions['executeQuery'] = StopIteration(response)
         observer.returnValues['yieldRecord'] = "record"
         observer.returnValues['extraResponseData'] = 'extraResponseData'
         observer.returnValues['echoedExtraRequestData'] = 'echoedExtraRequestData'
@@ -149,7 +212,8 @@
         arguments = {'version':'1.1', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 13))
+        response = Response(total=100, hits=range(11, 13))
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
         def yieldRecord(recordId, recordSchema):
@@ -237,7 +301,8 @@
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, range(11, 13))
+        response = Response(total=100, hits=range(11, 13))
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
         def yieldRecord(recordId, recordSchema):
@@ -252,10 +317,10 @@
         component.addObserver(observer)
 
         result = "".join(compose(component.searchRetrieve(**arguments)))
-        self.assertEquals(['executeCQL', 'docsetFromQuery', 'echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
-        executeCQLMethod, docsetFromQueryMethod, echoedExtraRequestDataMethod, extraResponseDataMethod = observer.calledMethods
-        self.assertEquals('executeCQL', executeCQLMethod.name)
-        methodKwargs = executeCQLMethod.kwargs
+        self.assertEquals(['executeQuery', 'echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
+        executeQueryMethod, echoedExtraRequestDataMethod, extraResponseDataMethod = observer.calledMethods
+        self.assertEquals('executeQuery', executeQueryMethod.name)
+        methodKwargs = executeQueryMethod.kwargs
         self.assertEquals(parseString('field=value'), methodKwargs['cqlAbstractSyntaxTree'])
         self.assertEquals(0, methodKwargs['start'])
         self.assertEquals(2, methodKwargs['stop'])
@@ -333,15 +398,16 @@
 """, result)
         
         self.assertEquals((), echoedExtraRequestDataMethod.args)
-        self.assertEquals(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking'], echoedExtraRequestDataMethod.kwargs.keys())
+        self.assertEquals(['version', 'x_term_drilldown', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking'], echoedExtraRequestDataMethod.kwargs.keys())
         self.assertEquals((), extraResponseDataMethod.args)
-        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'docset']), set(extraResponseDataMethod.kwargs.keys()))
+        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'drilldownData']), set(extraResponseDataMethod.kwargs.keys()))
 
     def testExtraRecordDataOldStyle(self):
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
 
         observer = CallTrace()
-        observer.returnValues['executeCQL'] = (100, [11])
+        response = Response(total=100, hits=[11])
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
         yieldRecordCalls = []
         def yieldRecord(recordId, recordSchema):
@@ -403,7 +469,7 @@
 
     def testDiagnosticOnExecuteCql(self):
         class RaisesException(object):
-            def executeCQL(self, *args, **kwargs):
+            def executeQuery(self, *args, **kwargs):
                 raise Exception("Test Exception")
         component = SruHandler(extraRecordDataNewStyle=True)
         component.addObserver(RaisesException())
@@ -417,7 +483,8 @@
         component.addObserver(sruHandler)
         observer = CallTrace('observer')
         sruHandler.addObserver(observer)
-        observer.returnValues['executeCQL'] = (2, ['id0', 'id1'])
+        response = Response(total=2, hits=['id0', 'id1'])
+        observer.exceptions['executeQuery'] = StopIteration(response)
         observer.returnValues['echoedExtraRequestData'] = (f for f in [])
         observer.returnValues['extraResponseData'] = (f for f in [])
         observer.methods['yieldRecord'] = lambda *args, **kwargs: '<bike/>'
@@ -425,10 +492,10 @@
         result = ''.join(compose(component.handleRequest(arguments={'version':['1.1'], 'query': ['aQuery'], 'operation':['searchRetrieve']})))
         header, body = result.split('\r\n'*2)
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
-        self.assertTrue('<bike/>' in body)
+        self.assertTrue('<bike/>' in body, body)
         
         result = ''.join(compose(component.handleRequest(arguments={'version':['1.1'], 'operation':['searchRetrieve']})))
         header, body = result.split('\r\n'*2)
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
-        self.assertTrue('diagnostic' in body)
+        self.assertTrue('diagnostic' in body, body)
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/srutermdrilldowntest.py version_1/test/sru/srutermdrilldowntest.py
--- version_0/test/sru/srutermdrilldowntest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/sru/srutermdrilldowntest.py	2011-07-21 13:54:08.000000000 +0200
@@ -1,30 +1,31 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#    Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2011 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# Copyright (C) 2011 Stichting Kennisnet http://www.kennisnet.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase, CallTrace
@@ -32,23 +33,20 @@
 
 from meresco.components.sru.diagnostic import generalSystemError
 
-from meresco.components.drilldown import SRUTermDrilldown, DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
-
+from meresco.components.drilldown import DRILLDOWN_HEADER, DRILLDOWN_FOOTER, DEFAULT_MAXIMUM_TERMS
+from meresco.components.drilldown import SRUTermDrilldown
 
 class SRUTermDrilldownTest(CQ2TestCase):
     def testSRUTermDrilldown(self):
         sruTermDrilldown = SRUTermDrilldown()
 
-        observer = CallTrace("Drilldown")
-        observer.returnValues['drilldown'] = iter([
+        drilldownData = iter([
                 ('field0', iter([('value0_0', 14)])),
                 ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
                 ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))])
 
-        sruTermDrilldown.addObserver(observer)
-        docset = 'docset'
-
-        result = compose(sruTermDrilldown.extraResponseData(docset, x_term_drilldown=["field0:1,field1:2,field2"]))
+        response = ''.join(compose(sruTermDrilldown.extraResponseData(drilldownData)))
+        
         self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
     <dd:item count="14">value0_0</dd:item>
 </dd:navigator>
@@ -60,48 +58,16 @@
     <dd:item count="3">value2_0</dd:item>
     <dd:item count="2">value2_1</dd:item>
     <dd:item count="1">value2_2</dd:item>
-</dd:navigator></dd:term-drilldown></dd:drilldown>""", "".join(result))
-        self.assertEquals(['drilldown'], [m.name for m in observer.calledMethods])
-        self.assertEquals('docset', observer.calledMethods[0].args[0])
-        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[0].args[1]))
-
-    def testDrilldownCallRaisesAnError(self):
-        sruTermDrilldown = SRUTermDrilldown()
-        observer = CallTrace("Drilldown")
-        def mockDrilldown(*args):
-            raise Exception("Some Exception")
-            yield "Some thing"
-        observer.methods["drilldown"] = mockDrilldown
-        sruTermDrilldown.addObserver(observer)
-
-        cqlAbstractSyntaxTree = 'ignored'
-        composedGenerator = compose(sruTermDrilldown.extraResponseData(cqlAbstractSyntaxTree    , x_term_drilldown=["fieldignored:1"]))
-        result = "".join(composedGenerator)
-
-        expected = DRILLDOWN_HEADER + """
-            <dd:term-drilldown>
-                <diagnostic xmlns="http://www.loc.gov/zing/srw/diagnostic/">
-                    <uri>info://srw/diagnostics/1/1</uri>
-                    <details>General System Error</details>
-                    <message>Some Exception</message>
-                </diagnostic>
-            </dd:term-drilldown>
-        """ + DRILLDOWN_FOOTER
-        self.assertEqualsWS(expected, result)
+</dd:navigator></dd:term-drilldown></dd:drilldown>""", response)
 
 
     def testDrilldownNoResults(self):
         sruTermDrilldown = SRUTermDrilldown()
-        observer = CallTrace("Drilldown")
-        drilldownResults = iter([
+        drilldownData = iter([
                 ('field0', iter([])),
             ])
-        observer.returnValues["drilldown"] = drilldownResults
-        sruTermDrilldown.addObserver(observer)
 
-        cqlAbstractSyntaxTree = 'ignored'
-
-        composedGenerator = compose(sruTermDrilldown.extraResponseData(cqlAbstractSyntaxTree    , x_term_drilldown=["fieldignored:1"]))
+        composedGenerator = compose(sruTermDrilldown.extraResponseData(drilldownData))
         result = "".join(composedGenerator)
 
         expected = DRILLDOWN_HEADER + """
@@ -113,20 +79,15 @@
 
     def testDrilldownInternalRaisesExceptionNotTheFirst(self):
         sruTermDrilldown = SRUTermDrilldown()
-        observer = CallTrace("Drilldown")
         def raiser(*args):
             raise Exception("Some Exception")
             yield
-        drilldownResults = iter([
+        drilldownData = iter([
                 ('field0', iter([('value0_0', 14)])),
                 ('field1', raiser()),
             ])
-        observer.returnValues["drilldown"] = drilldownResults
-        sruTermDrilldown.addObserver(observer)
-
-        cqlAbstractSyntaxTree = 'ignored'
 
-        composedGenerator = compose(sruTermDrilldown.extraResponseData(cqlAbstractSyntaxTree    , x_term_drilldown=["fieldignored:1"]))
+        composedGenerator = compose(sruTermDrilldown.extraResponseData(drilldownData))
         result = "".join(composedGenerator)
 
         expected = DRILLDOWN_HEADER + """
@@ -145,7 +106,7 @@
 
 
     def testEchoedExtraRequestData(self):
-        component =SRUTermDrilldown()
+        component = SRUTermDrilldown()
 
         result = "".join(list(component.echoedExtraRequestData(x_term_drilldown=['field0,field1'], version='1.1')))
         
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/srwtest.py version_1/test/sru/srwtest.py
--- version_0/test/sru/srwtest.py	2011-07-11 16:29:22.000000000 +0200
+++ version_1/test/sru/srwtest.py	2011-07-21 13:54:08.000000000 +0200
@@ -1,35 +1,37 @@
 ## begin license ##
-#
-#    Meresco Components are components to build searchengines, repositories
-#    and archives, based on Meresco Core.
-#    Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
-#    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
-#    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
-#       http://www.kennisnetictopschool.nl
-#    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
-#
-#    This file is part of Meresco Components.
-#
-#    Meresco Components is free software; you can redistribute it and/or modify
-#    it under the terms of the GNU General Public License as published by
-#    the Free Software Foundation; either version 2 of the License, or
-#    (at your option) any later version.
-#
-#    Meresco Components is distributed in the hope that it will be useful,
-#    but WITHOUT ANY WARRANTY; without even the implied warranty of
-#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#    GNU General Public License for more details.
-#
-#    You should have received a copy of the GNU General Public License
-#    along with Meresco Components; if not, write to the Free Software
-#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-#
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
+# Copyright (C) 2007 SURFnet. http://www.surfnet.nl
+# Copyright (C) 2007-2010 Seek You Too (CQ2) http://www.cq2.nl
+# Copyright (C) 2007-2009 Stichting Kennisnet Ict op school. http://www.kennisnetictopschool.nl
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
 ## end license ##
 
 from cq2utils import CQ2TestCase, CallTrace
 
 from meresco.components.sru import SruHandler, SruParser
 from meresco.components.sru.srw import Srw
+from meresco.components.facetindex import Response
 
 httpResponse = """HTTP/1.0 200 OK
 Content-Type: text/xml; charset=utf-8
@@ -127,8 +129,8 @@
 
     def testContentType(self):
         observer = CallTrace(
-            returnValues={'executeCQL': (1, [0])},
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData', 'yieldRecord'])
+        observer.exceptions['executeQuery'] = StopIteration([1, [0]])
         self.sruHandler.addObserver(observer)
 
         request = soapEnvelope % SRW_REQUEST % argumentsWithMandatory % ''
@@ -138,13 +140,12 @@
     def testNormalOperation(self):
         request = soapEnvelope % SRW_REQUEST % argumentsWithMandatory % ""
         observer = CallTrace(
-            returnValues={
-                'executeCQL': (1, ['recordId']),
-            },
             methods={
                 'yieldRecord': lambda recordId, recordSchema: (g for g in ["<DATA>%s-%s</DATA>" % (recordId, recordSchema)])
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        response = Response(total=1, hits=['recordId'])
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
         self.sruHandler.addObserver(observer)
 
@@ -179,13 +180,12 @@
 </SOAP:Envelope>"""
 
         observer = CallTrace(
-            returnValues={
-                'executeCQL': (1, ['recordId']),
-            },
             methods={
                 'yieldRecord': lambda recordId, recordSchema: (g for g in ["<DATA>%s-%s</DATA>" % (recordId, recordSchema)])
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        response = Response(total=1, hits=['recordId'])
+        observer.exceptions['executeQuery'] = StopIteration(response)
         self.sruHandler.addObserver(observer)
         response = "".join(self.srw.handleRequest(Body=request))
 
@@ -211,10 +211,11 @@
         sruParser.addObserver(self.sruHandler)
         observer = CallTrace(
             returnValues={
-                'executeCQL': (1, [1]),
                 'yieldRecord': lambda recordId, recordSchema: (g for g in ["<DATA>%s-%s</DATA>" % (recordId, recordSchema)])
             },
             ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        response = Response(total=1, hits=[1])
+        observer.exceptions['executeQuery'] = StopIteration(response)
 
         self.sruHandler.addObserver(observer)
         response = "".join(srw.handleRequest(Body=request))
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/utils.py version_1/test/utils.py
--- version_0/test/utils.py	1970-01-01 01:00:00.000000000 +0100
+++ version_1/test/utils.py	2011-07-21 13:54:09.000000000 +0200
@@ -0,0 +1,36 @@
+## begin license ##
+# 
+# "Meresco Components" are components to build searchengines, repositories
+# and archives, based on "Meresco Core". 
+# 
+# Copyright (C) 2011 Seecr (Seek You Too B.V.) http://seecr.nl
+# 
+# This file is part of "Meresco Components"
+# 
+# "Meresco Components" is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+# 
+# "Meresco Components" is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with "Meresco Components"; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+# 
+## end license ##
+
+from weightless.core import compose
+
+def asyncreturn(func, *args, **kwargs):
+    try:
+        g = compose(func(*args, **kwargs))
+        while True:
+            g.next()
+    except StopIteration, e:
+        return e.args[0]
+    raise Exception("no async return function")
+
