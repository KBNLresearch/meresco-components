Changeset created on Mon Sep 24 09:50:00 UTC 2012 by Seecr (Seek You Too B.V.)

Description: added optional fieldnameModifier parameter to SearchTermFilterAndModifier

    With the new optional fieldnameModifier parameter fieldnames can also be altered conditionally inside a cql expression based on the original fieldname, relation and value.

Baseline version: 4.1.5

From e5e2d6c17b3bc8e215c8a25e6f0fc1b327779401 Mon Sep 17 00:00:00 2001
From: Jurjan-Paul Medema <jurjanpaul@cq2.nl>
Date: Mon, 24 Sep 2012 11:40:24 +0200
Subject: [PATCH] TS/JPM: added optional fieldnameModifier to SearchtermFilterAndModifier

---
 .../components/cql/searchtermfilterandmodifier.py  |   11 ++++++--
 test/cql/searchtermfilterandmodifiertest.py        |   25 +++++++++++++++++--
 2 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/meresco/components/cql/searchtermfilterandmodifier.py b/meresco/components/cql/searchtermfilterandmodifier.py
index 1d7ac0c..ff618de 100644
--- a/meresco/components/cql/searchtermfilterandmodifier.py
+++ b/meresco/components/cql/searchtermfilterandmodifier.py
@@ -26,9 +26,10 @@
 ## end license ##
 
 class SearchTermFilterAndModifier(object):
-    def __init__(self, shouldModifyFieldValue, valueModifier):
+    def __init__(self, shouldModifyFieldValue, valueModifier=None, fieldnameModifier=None):
         self._shouldModifyFieldValue = shouldModifyFieldValue
         self._valueModifier = valueModifier
+        self._fieldnameModifier = fieldnameModifier
 
     def canModify(self, node):
         #SEARCH_CLAUSE(INDEX(TERM(...)), RELATION(COMPARITOR(...)), SEARCH_TERM(...))
@@ -41,8 +42,12 @@ class SearchTermFilterAndModifier(object):
         return False
 
     def modify(self, node):
-        searchTerm = node.children[2].children[0]
-        searchTerm.children = (str(self._valueModifier(searchTerm.children[0])),)
+        if self._valueModifier:
+            searchTerm = node.children[2].children[0]
+            searchTerm.children = (str(self._valueModifier(searchTerm.children[0])),)
+        if self._fieldnameModifier:
+            field = node.children[0].children[0]
+            field.children = (str(self._fieldnameModifier(field.children[0])),)
         return node
 
     def filterAndModifier(self):
diff --git a/test/cql/searchtermfilterandmodifiertest.py b/test/cql/searchtermfilterandmodifiertest.py
index 7b4988e..9709cba 100644
--- a/test/cql/searchtermfilterandmodifiertest.py
+++ b/test/cql/searchtermfilterandmodifiertest.py
@@ -61,7 +61,8 @@ class SearchTermFilterAndModifierTest(TestCase):
             self.convert(
                 cql='afield exact value',
                 shouldModifyFieldValue=lambda name, relation, value: name=='afield' and value.startswith('P'), 
-                valueModifier=lambda value: 'newvalue'))
+                valueModifier=lambda value: 'newvalue',
+                fieldnameModifier=lambda field: 'newfield'))
 
         self.assertEquals(
             'afield=Pvalue', 
@@ -70,11 +71,29 @@ class SearchTermFilterAndModifierTest(TestCase):
                 shouldModifyFieldValue=lambda name, relation, value: name=='afield' and relation=='exact' and value.startswith('P'), 
                 valueModifier=lambda value: 'newvalue'))
 
-    def convert(self, cql, shouldModifyFieldValue, valueModifier):
+    def testModifyField(self):
+        self.assertEquals(
+            'newfield exact Pvalue', 
+            self.convert(
+                cql='afield exact Pvalue', 
+                shouldModifyFieldValue=lambda name, relation, value: name=='afield' and relation=='exact' and value.startswith('P'), 
+                fieldnameModifier=lambda value: 'newfield'))
+
+        self.assertEquals(
+            'newfield=newvalue', 
+            self.convert(
+                cql='somefield=Pvalue',
+                shouldModifyFieldValue=lambda name, relation, value: value.startswith('P') and relation=='=', 
+                valueModifier=lambda value: 'newvalue',
+                fieldnameModifier=lambda field: 'newfield'))
+
+
+    def convert(self, cql, shouldModifyFieldValue, valueModifier=None, fieldnameModifier=None):
         converter = CqlMultiSearchClauseConversion([
             SearchTermFilterAndModifier(
                 shouldModifyFieldValue=shouldModifyFieldValue,
-                valueModifier=valueModifier).filterAndModifier(),
+                valueModifier=valueModifier,
+                fieldnameModifier=fieldnameModifier).filterAndModifier(),
             ], fromKwarg="cqlAbstractSyntaxTree")  
         return cql2string(converter._convert(parseString(cql)))
 
-- 
1.7.2.3

