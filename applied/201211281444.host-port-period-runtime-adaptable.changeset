Changeset created on Wed Nov 28 14:44:45 UTC 2012 by Seecr (Seek You Too B.V.)

Description: PeriodicDownload supports runtime adaptation of host, port and period.

    Use setDownloadAddress and setPeriod respectively.
    Also added getState method.

Baseline version: master

From ddcb56d7e075b34f582d20b3f0c679ee4cb847f5 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Tue, 20 Nov 2012 15:27:27 +0000
Subject: [PATCH 1/4] JJ/TS: added PeriodicDownloadStateView, retrievable using getState()

---
 meresco/components/periodicdownload.py |   25 +++++++++++++++++++++++++
 test/periodicdownloadtest.py           |   22 ++++++++++++++++++++++
 2 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index b2d133d..037fdba 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -79,6 +79,9 @@ class PeriodicDownload(Observable):
         self._processOne = compose(self.processOne())
         self._processOne.next()
 
+    def getState(self):
+        return PeriodicDownloadStateView(self)
+
     def processOne(self):
         sok = yield self._tryConnect()
         requestString = self.call.buildRequest()
@@ -181,6 +184,28 @@ class PeriodicDownload(Observable):
                 self._err.write('\n')
         self._err.flush()
 
+
+class PeriodicDownloadStateView(object):
+    def __init__(self, periodicDownload):
+        self._periodicDownload = periodicDownload
+        self._name = self._periodicDownload.observable_name()
+
+    @property
+    def name(self):
+        return self._name
+
+    @property
+    def host(self):
+        return self._periodicDownload._host
+
+    @property
+    def port(self):
+        return self._periodicDownload._port
+
+    @property
+    def paused(self):
+        return self._periodicDownload._paused
+
 MAX_LENGTH=1500
 def shorten(response):
     if len(response) < MAX_LENGTH:
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index b18c8fb..1fb15a6 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -501,6 +501,28 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             ('1.1s', 'message'),
             'PAUSE',
             ], receivedData)
+
+    def testGetState(self):
+        reactor = CallTrace("reactor")
+        downloader = PeriodicDownload(reactor, 'host', 12345, name='theName')
+        s = downloader.getState()
+
+        self.assertEquals('theName', s.name)
+        self.assertEquals('host', s.host)
+        self.assertEquals(12345, s.port)
+        self.assertEquals(False, s.paused)
+
+        reactor = CallTrace("reactor")
+        downloader = PeriodicDownload(reactor, 'unhost', 54321, name='anotherName', autoStart=False)
+        s = downloader.getState()
+
+        self.assertEquals('anotherName', s.name)
+        self.assertEquals('unhost', s.host)
+        self.assertEquals(54321, s.port)
+        self.assertEquals(True, s.paused)
+
+        #self.assertEquals([], reactor.calledMethodNames())
+
     
     def getDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
-- 
1.7.1


From 949084830372f170d48454f3ee3e64db2f28b222 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Fri, 23 Nov 2012 11:40:50 +0000
Subject: [PATCH 2/4] TS/JPM: host and port optional if autoStart False, introduced setDownloadAddress

---
 meresco/components/periodicdownload.py |   44 +++++++---
 test/periodicdownloadtest.py           |  152 ++++++++++++++++++++++----------
 2 files changed, 140 insertions(+), 56 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index 037fdba..d76e660 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -45,7 +45,7 @@ from warnings import warn
 
 
 class PeriodicDownload(Observable):
-    def __init__(self, reactor, host, port, period=1, verbose=None, prio=None, name=None, err=None, autoStart=True):
+    def __init__(self, reactor, host=None, port=None, period=1, verbose=None, prio=None, name=None, err=None, autoStart=True):
         super(PeriodicDownload, self).__init__(name=name)
         self._reactor = reactor
         self._host = host
@@ -54,9 +54,15 @@ class PeriodicDownload(Observable):
         self._prio = prio
         self._err = err or stderr
         self._paused = not autoStart
+        if autoStart and (not self._host or not self._port):
+            raise ValueError("Unless autoStart is set to False host and port need to be specified.")
         if verbose in [True, False]:
             warn('Verbose flag is deprecated', DeprecationWarning)
 
+    def setDownloadAddress(self, host, port):
+        self._host = host
+        self._port = port
+
     def observer_init(self):
         self.startTimer()
 
@@ -65,14 +71,15 @@ class PeriodicDownload(Observable):
             self._reactor.addTimer(self._period + additionalTime, self.startProcess)
 
     def pause(self):
-        self._paused = True
-        self._logError("PAUSED")
+        if not self._paused:
+            self._paused = True
+            self._logInfo("paused")
 
     def resume(self):
         if not self._paused:
             return
         self._paused = False
-        self._logError("RESUMED")
+        self._logInfo("resumed")
         self.startTimer()
 
     def startProcess(self):
@@ -173,16 +180,31 @@ class PeriodicDownload(Observable):
         yield
 
     def _logError(self, message, request=None):
-        self._err.write("%s:%s: " % (self._host, self._port))
-        self._err.write(message)
+        self._log(self._err, message, request)
+
+    def _logInfo(self, message):
+        self._log(self._err, message)
+
+    def _log(self, out, message, request=None):
+        out.write("%s: " % repr(self))
+        out.write(message)
         if not message.endswith('\n'):
-            self._err.write('\n')
+            out.write('\n')
         if request:
-            self._err.write('For request: ')
-            self._err.write(request)
+            out.write('For request: ')
+            out.write(request)
             if not request.endswith('\n'):
-                self._err.write('\n')
-        self._err.flush()
+                out.write('\n')
+        out.flush()
+
+    def __repr__(self):
+        kwargsList = [
+            '%s=%s' % (name, repr(value))
+            for name, value 
+            in [('host', self._host), ('port', self._port), ('name', self._name)]
+            if value
+        ]
+        return '%s(%s)' % (self.__class__.__name__, ', '.join(kwargsList))
 
 
 class PeriodicDownloadStateView(object):
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 1fb15a6..2fa5fa9 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -80,6 +80,7 @@ def server(responses, bufsize=4096):
             except:
                 pass
     thread = Thread(None, serverThread)
+    thread.daemon = True
     thread.start()
     start.wait()
     yield port, messages
@@ -89,7 +90,7 @@ def server(responses, bufsize=4096):
 class PeriodicDownloadTest(SeecrTestCase):
     def testOne(self):
         with server([RESPONSE_ONE_RECORD]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             self.assertEquals('addTimer', reactor.calledMethods[0].name)
             self.assertEquals(1, reactor.calledMethods[0].args[0])
             callback = reactor.calledMethods[0].args[1]
@@ -113,33 +114,33 @@ class PeriodicDownloadTest(SeecrTestCase):
             self.assertEquals(['data'], observer.calledMethods[1].kwargs.keys())
             self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
             callback()
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testNoConnectionPossibleWithNonIntegerPort(self):
-        downloader, observer, reactor = self.getDownloader("some.nl", 'no-port')
+        downloader, observer, reactor = self._prepareDownloader("some.nl", 'no-port')
         callback = reactor.calledMethods[0].args[1]
         callback() # connect
-        self.assertEquals("some.nl:no-port: an integer is required\n", downloader._err.getvalue())
-        self.assertReactorState(reactor)
+        self.assertEquals("%s: an integer is required\n" % repr(downloader), downloader._err.getvalue())
+        self.assertReactorStateClean(reactor)
 
     def testNoConnectionPossible(self):
-        downloader, observer, reactor = self.getDownloader("localhost", 8899)
+        downloader, observer, reactor = self._prepareDownloader("localhost", 8899)
         callback = reactor.calledMethods[0].args[1]
         callback() # connect
         reactor.exceptions['removeWriter'] = IOError("error in sockopt") ## Simulate IOError as raised from sok.getsockopt
         callback = reactor.calledMethods[1].args[1]
         callback() # HTTP GET
-        self.assertEquals("localhost:8899: error in sockopt\n", downloader._err.getvalue())
+        self.assertEquals("%s: error in sockopt\n" % repr(downloader), downloader._err.getvalue())
         del reactor.exceptions['removeWriter']
         self.assertEquals('addTimer', reactor.calledMethods[-1].name)
         self.assertEquals(1 + 5*60, reactor.calledMethods[-1].args[0])
 
-        self.assertReactorState(reactor)
+        self.assertReactorStateClean(reactor)
 
         callback = reactor.calledMethods[-1].args[1]
         callback() # connect
         self.assertEquals("addWriter", reactor.calledMethods[-1].name)
-        self.assertEquals("localhost:8899: error in sockopt\n", downloader._err.getvalue()) # remains 1 error
+        self.assertEquals("%s: error in sockopt\n" % downloader, downloader._err.getvalue()) # remains 1 error
  
     def testVerboseDeprecationWarning(self):
         with stderr_replaced() as s:
@@ -154,7 +155,7 @@ class PeriodicDownloadTest(SeecrTestCase):
 
     def testErrorResponse(self):
         with server(['HTTP/1.0 400 Error\r\nContent-Type: text/plain\r\n\r\nIllegal Request']) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             callback = reactor.calledMethods[0].args[1]
             callback() # connect
             callback = reactor.calledMethods[1].args[1]
@@ -165,12 +166,12 @@ class PeriodicDownloadTest(SeecrTestCase):
 
             callback() # yield After Error 
 
-            self.assertEquals("localhost:%d: Unexpected response: HTTP/1.0 400 Error\r\nContent-Type: text/plain\r\n\r\nIllegal Request\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % port, downloader._err.getvalue())
+            self.assertEquals("%s: Unexpected response: HTTP/1.0 400 Error\r\nContent-Type: text/plain\r\n\r\nIllegal Request\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % repr(downloader), downloader._err.getvalue())
             self.assertEquals(['buildRequest'], [m.name for m in observer.calledMethods])
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testInvalidPortConnectionRefused(self):
-        downloader, observer, reactor = self.getDownloader("localhost", 88)
+        downloader, observer, reactor = self._prepareDownloader("localhost", 88)
         callback = reactor.calledMethods[0].args[1]
         callback() # startProcess
         self.assertEquals("addWriter", reactor.calledMethods[1].name)
@@ -178,35 +179,35 @@ class PeriodicDownloadTest(SeecrTestCase):
         callback() # _processOne.next
         self.assertEquals("removeWriter", reactor.calledMethods[2].name)
         self.assertEquals("addTimer", reactor.calledMethods[3].name)
-        self.assertEquals("localhost:88: Connection refused.\n", downloader._err.getvalue())
-        self.assertReactorState(reactor)
+        self.assertEquals("%s: Connection refused.\n" % downloader, downloader._err.getvalue())
+        self.assertReactorStateClean(reactor)
 
     def testInvalidHost(self):
         strangeHost = "UEYR^$*FD(#>NDJ.khfd9.(*njnd.nl"
-        downloader, observer, reactor = self.getDownloader(strangeHost, 88)
+        downloader, observer, reactor = self._prepareDownloader(strangeHost, 88)
         callback = reactor.calledMethods[0].args[1]
         callback() # connect
         self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-        nameOrServiceNotKnown = strangeHost + ":88: -2: Name or service not known\n" ==  downloader._err.getvalue()
-        noAddressAssociatedWithHost = strangeHost + ":88: -5: No address associated with hostname\n" == downloader._err.getvalue()
+        nameOrServiceNotKnown = ("%s: -2: Name or service not known\n" % downloader ==  downloader._err.getvalue())
+        noAddressAssociatedWithHost = ("%s: -5: No address associated with hostname\n" % downloader == downloader._err.getvalue())
         self.assertTrue(nameOrServiceNotKnown or noAddressAssociatedWithHost, downloader._err.getvalue())
-        self.assertReactorState(reactor)
+        self.assertReactorStateClean(reactor)
 
     def testInvalidHostConnectionRefused(self):
-        downloader, observer, reactor = self.getDownloader("127.0.0.255", 9876)
+        downloader, observer, reactor = self._prepareDownloader("127.0.0.255", 9876)
         callback = reactor.calledMethods[0].args[1]
         callback() # startProcess
         self.assertEquals("addWriter", reactor.calledMethods[1].name)
         callback = reactor.calledMethods[1].args[1]
         callback() # _processOne.next
-        self.assertEquals("127.0.0.255:9876: Connection refused.\n", downloader._err.getvalue())
+        self.assertEquals("%s: Connection refused.\n" % downloader, downloader._err.getvalue())
         self.assertEquals("removeWriter", reactor.calledMethods[2].name)
         self.assertEquals("addTimer", reactor.calledMethods[3].name)
-        self.assertReactorState(reactor)
+        self.assertReactorStateClean(reactor)
 
     def testSuccess(self):
         with server([RESPONSE_TWO_RECORDS]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             self.assertEquals(1, downloader._period)
             callback = self.doConnect() # _processOne.next
             callback() # _processOne.next -> HTTP GET
@@ -222,12 +223,12 @@ class PeriodicDownloadTest(SeecrTestCase):
             callback() # _processOne.next
             self.assertEquals('removeProcess', reactor.calledMethods[-2].name)
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testSuccessWithSuspend(self):
         suspendObject = Suspend()
         with server([RESPONSE_TWO_RECORDS]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port, handleGenerator=(x for x in ['X', suspendObject]))
+            downloader, observer, reactor = self._prepareDownloader("localhost", port, handleGenerator=(x for x in ['X', suspendObject]))
             self.assertEquals(1, downloader._period)
             callback = self.doConnect() # _processOne.next
             callback() # _processOne.next -> HTTP GET
@@ -248,7 +249,7 @@ class PeriodicDownloadTest(SeecrTestCase):
             callback()
             self.assertEquals('removeProcess', reactor.calledMethods[-2].name)
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testRaiseInHandle(self):
         def handleGenerator():
@@ -257,7 +258,7 @@ class PeriodicDownloadTest(SeecrTestCase):
             yield
 
         with server([RESPONSE_ONE_RECORD]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port, handleGenerator=handleGenerator())
+            downloader, observer, reactor = self._prepareDownloader("localhost", port, handleGenerator=handleGenerator())
             callback = self.doConnect() # _processOne.next
             callback() # _processOne.next -> HTTP GET
             self.assertEquals('buildRequest', observer.calledMethods[0].name)
@@ -273,23 +274,23 @@ class PeriodicDownloadTest(SeecrTestCase):
             callback() # 2nd response / raise Exception(...)
             result = downloader._err.getvalue()
             self.assertTrue('Traceback' in result, result)
-            expected =  ignoreLineNumbers("""localhost:%(port)s: Traceback (most recent call last):
+            expected =  ignoreLineNumbers("""%s: Traceback (most recent call last):
   File "%%(periodicdownload.py)s", line 104, in processOne
     for _response  in g:
   File "%%(__file__)s", line 243, in handleGenerator
     raise Exception('xcptn')
 Exception: xcptn
 Error while processing response: HTTP/1.0 200 OK \r\n\r\n<aap:noot xmlns:aap="mies"><record>ignored</record></aap:noot>
-For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fileDict)
+For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % repr(downloader) % fileDict)
             self.assertEquals(expected, ignoreLineNumbers(result))
 
             self.assertEquals('removeProcess', reactor.calledMethods[-2].name)
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testAssertionErrorReraised(self):
         with server([RESPONSE_TWO_RECORDS]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             observer.methods['handle'] = lambda *args, **kwargs: None  # will cause AssertionError in Observable
 
             self.assertEquals(1, downloader._period)
@@ -308,7 +309,7 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
           
     def testSuccessHttp1dot1Server(self):
         with server([STATUSLINE_ALTERNATIVE + ONE_RECORD]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
@@ -320,11 +321,11 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             self.assertEquals('buildRequest', observer.calledMethods[0].name)
             self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
             callback()
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testPeriod(self):
         with server([RESPONSE_TWO_RECORDS, 'HTTP/1.0 400 Error\r\n\r\nIllegal Request']) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port, period=2)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port, period=2)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
@@ -349,17 +350,17 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             # error status
             self.assertEquals('addTimer', reactor.calledMethods[-1].name)
             self.assertEquals(2, reactor.calledMethods[-1].args[0])
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testRecoveringAfterDroppedConnection(self):
         with server([DROP_CONNECTION, RESPONSE_ONE_RECORD]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             callback = self.doConnect()
             callback() # HTTP GET
             sleep(0.01)
             callback = reactor.calledMethods[-1].args[1]
             callback() # _processOne.next -> sok.recv
-            self.assertEquals("localhost:%d: Receive error: 11: Resource temporarily unavailable\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % port, downloader._err.getvalue()) 
+            self.assertEquals("%s: Receive error: 11: Resource temporarily unavailable\nFor request: GET /path?argument=value HTTP/1.0\r\n\r\n" % repr(downloader), downloader._err.getvalue()) 
             callback = reactor.calledMethods[-1].args[1]
             callback() # startProcess
             callback = reactor.calledMethods[-1].args[1]
@@ -371,11 +372,11 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             callback() # _processOne.next -> addProcess
             self.assertEquals(['buildRequest', 'buildRequest', 'handle'], [m.name for m in observer.calledMethods])
             callback()
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
 
     def testDriver(self):
         with server([RESPONSE_ONE_RECORD]) as (port, msgs):
-            downloader, observer, reactor = self.getDownloader("localhost", port)
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
             self.assertEquals(1, reactor.calledMethods[0].args[0])
             callback = reactor.calledMethods[0].args[1]
             callback() # connect
@@ -393,7 +394,7 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
             except StopIteration:
                 pass
             self.assertEquals('removeProcess', reactor.calledMethods[6].name)
-            self.assertReactorState(reactor)
+            self.assertReactorStateClean(reactor)
              
     def testShortenErrorMessage(self):
         from meresco.components.periodicdownload import shorten
@@ -406,6 +407,20 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
         downloader.observer_init()
         self.assertEquals([], reactor.calledMethodNames())
 
+    def testHostAndPortRequiredUnlessAutostartFalse(self):
+        reactor = CallTrace("reactor")
+        self.assertRaises(ValueError, lambda: PeriodicDownload(reactor))
+        self.assertRaises(ValueError, lambda: PeriodicDownload(reactor, host='example.com'))
+        self.assertRaises(ValueError, lambda: PeriodicDownload(reactor, port=123))
+        downloader = PeriodicDownload(reactor, autoStart=False)
+
+    def testRepr(self):
+        reactor = CallTrace("reactor")
+        downloader = PeriodicDownload(reactor, host='example.com', port=80)
+        self.assertEquals("PeriodicDownload(host='example.com', port=80)", repr(downloader))
+        downloader = PeriodicDownload(reactor, name="theName", autoStart=False)
+        self.assertEquals("PeriodicDownload(name='theName')", repr(downloader))
+        
     def testPauseResume(self):
         reactor = Reactor()
         stepping = [True]
@@ -521,10 +536,54 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
         self.assertEquals(54321, s.port)
         self.assertEquals(True, s.paused)
 
-        #self.assertEquals([], reactor.calledMethodNames())
+        self.assertEquals([], reactor.calledMethodNames())
+
+    def testSetDownloadAddress(self):
+        reactor = CallTrace("reactor")
+        downloader = PeriodicDownload(reactor, host=None, port=None, autoStart=False)
+        downloader.setDownloadAddress(host='host', port=12345)
+        s = downloader.getState()
+        self.assertEquals('host', s.host)
+        self.assertEquals(12345, s.port)
+        downloader.setDownloadAddress(host='anotherHost', port=54321)
+        s = downloader.getState()
+        self.assertEquals('anotherHost', s.host)
+        self.assertEquals(54321, s.port)
+
+        with server([RESPONSE_ONE_RECORD]) as (port, msgs):
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
+            self.assertEquals('addTimer', reactor.calledMethods[0].name)
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # connect
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # HTTP GET
+            sleep(0.01)
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # sok.recv
+            callback() # sok.recv
+            callback() # addProcess
+            self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
+            callback()
+            self.assertReactorStateClean(reactor)
+            oldPort = port
+        with server([RESPONSE_ONE_RECORD]) as (port, msgs):
+            self.assertNotEquals(oldPort, port)
+            downloader.setDownloadAddress(host='localhost', port=port)
+            self._observer.methods['handle'] = lambda data: (x for x in 'X')
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # connect
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # HTTP GET
+            sleep(0.01)
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # sok.recv
+            callback() # sok.recv
+            callback() # addProcess
+            self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
+            callback()
+            self.assertReactorStateClean(reactor)
 
-    
-    def getDownloader(self, host, port, period=1, handleGenerator=None):
+    def _prepareDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
         self._reactor = CallTrace("reactor")
         self._downloader = PeriodicDownload(self._reactor, host, port, period=period, prio=0, err=StringIO())
@@ -541,13 +600,15 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % {'port': port} % fil
         callback = self._reactor.calledMethods[1].args[1]
         return callback # _processOne.next
 
-    def assertReactorState(self, reactor):
+    def assertReactorStateClean(self, reactor):
         names = [m.name for m in reactor.calledMethods]
         for what in ['Writer', 'Reader', 'Process']: 
-            self.assertEquals(len([n for n in names if n == 'add%s' % what]),
+            self.assertEquals(
+                len([n for n in names if n == 'add%s' % what]),
                 len([n for n in names if n == 'remove%s' % what]), 
                 'Expected same amount of add and remove for %s' % what)
 
+
 HTTP_SEPARATOR = 2 * CRLF
 STATUSLINE = """HTTP/1.0 200 OK """ + HTTP_SEPARATOR
 STATUSLINE_ALTERNATIVE = """HTTP/1.1 200 ok """ + HTTP_SEPARATOR
@@ -559,3 +620,4 @@ TWO_RECORDS = BODY % (EMBEDDED_RECORD * 2)
 RESPONSE_ONE_RECORD = STATUSLINE + ONE_RECORD 
 RESPONSE_TWO_RECORDS = STATUSLINE + TWO_RECORDS 
 
+
-- 
1.7.1


From 2cc72371c136620ddcf9f64c4f5924c338875514 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 26 Nov 2012 14:49:49 +0000
Subject: [PATCH 3/4] TS/JPM: added setPeriod that allows runtime update of download period

---
 meresco/components/periodicdownload.py |   16 +++++++++++++++-
 test/periodicdownloadtest.py           |   30 ++++++++++++++++++++++++++++++
 2 files changed, 45 insertions(+), 1 deletions(-)

diff --git a/meresco/components/periodicdownload.py b/meresco/components/periodicdownload.py
index d76e660..8e9c026 100644
--- a/meresco/components/periodicdownload.py
+++ b/meresco/components/periodicdownload.py
@@ -54,6 +54,7 @@ class PeriodicDownload(Observable):
         self._prio = prio
         self._err = err or stderr
         self._paused = not autoStart
+        self._currentTimer = None
         if autoStart and (not self._host or not self._port):
             raise ValueError("Unless autoStart is set to False host and port need to be specified.")
         if verbose in [True, False]:
@@ -63,12 +64,19 @@ class PeriodicDownload(Observable):
         self._host = host
         self._port = port
 
+    def setPeriod(self, period):
+        if self._period != period:
+            self._period = period
+            if self._currentTimer:
+                self._reactor.removeTimer(self._currentTimer)
+                self.startTimer()
+            
     def observer_init(self):
         self.startTimer()
 
     def startTimer(self, additionalTime=0):
         if not self._paused:
-            self._reactor.addTimer(self._period + additionalTime, self.startProcess)
+            self._currentTimer = self._reactor.addTimer(self._period + additionalTime, self.startProcess)
 
     def pause(self):
         if not self._paused:
@@ -83,6 +91,7 @@ class PeriodicDownload(Observable):
         self.startTimer()
 
     def startProcess(self):
+        self._currentTimer = None
         self._processOne = compose(self.processOne())
         self._processOne.next()
 
@@ -228,6 +237,11 @@ class PeriodicDownloadStateView(object):
     def paused(self):
         return self._periodicDownload._paused
 
+    @property
+    def period(self):
+        return self._periodicDownload._period
+
+
 MAX_LENGTH=1500
 def shorten(response):
     if len(response) < MAX_LENGTH:
diff --git a/test/periodicdownloadtest.py b/test/periodicdownloadtest.py
index 2fa5fa9..f53a6bb 100644
--- a/test/periodicdownloadtest.py
+++ b/test/periodicdownloadtest.py
@@ -38,6 +38,7 @@ from StringIO import StringIO
 from os.path import join
 from urllib2 import urlopen
 from time import time
+from itertools import count
 
 from seecr.test import SeecrTestCase, CallTrace
 from seecr.test.io import stderr_replaced
@@ -583,9 +584,38 @@ For request: GET /path?argument=value HTTP/1.0\r\n\r\n""" % repr(downloader) % f
             callback()
             self.assertReactorStateClean(reactor)
 
+    def testSetPeriod(self):
+        with server([RESPONSE_ONE_RECORD]) as (port, msgs):
+            downloader, observer, reactor = self._prepareDownloader("localhost", port)
+            self.assertEquals('addTimer', reactor.calledMethods[0].name)
+            self.assertEquals(1, reactor.calledMethods[-1].args[0])
+            downloader.setPeriod(42)
+            self.assertEquals(42, downloader.getState().period)
+            self.assertEquals('removeTimer', reactor.calledMethods[-2].name)
+            self.assertEquals('timerObject0', reactor.calledMethods[-2].args[0])
+            self.assertEquals('addTimer', reactor.calledMethods[-1].name)
+            self.assertEquals(42, reactor.calledMethods[-1].args[0])
+
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # connect
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # HTTP GET
+            sleep(0.01)
+            callback = reactor.calledMethods[-1].args[1]
+            callback() # sok.recv
+            callback() # sok.recv
+            callback() # addProcess
+            self.assertEqualsWS(ONE_RECORD, observer.calledMethods[1].kwargs['data'])
+            callback()
+            self.assertReactorStateClean(reactor)
+            self.assertEquals('addTimer', reactor.calledMethods[-1].name)
+            self.assertEquals(42, reactor.calledMethods[-1].args[0])
+
     def _prepareDownloader(self, host, port, period=1, handleGenerator=None):
         handleGenerator = handleGenerator or (x for x in 'X')
         self._reactor = CallTrace("reactor")
+        timerCounter = count(0)
+        self._reactor.methods['addTimer'] = lambda *args, **kwargs: 'timerObject%s' % timerCounter.next()
         self._downloader = PeriodicDownload(self._reactor, host, port, period=period, prio=0, err=StringIO())
         self._observer = CallTrace("observer", methods={'handle': lambda data: handleGenerator})
         self._observer.returnValues["buildRequest"] = "GET /path?argument=value HTTP/1.0\r\n\r\n"
-- 
1.7.1


From e956cf3da866854801e16851e4b28ed628de4906 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 26 Nov 2012 14:51:25 +0000
Subject: [PATCH 4/4] TS: try harder finding the appropriate SITE_PACKAGE_DIR (lib64 too)

---
 testsetup.sh |    7 ++++++-
 1 files changed, 6 insertions(+), 1 deletions(-)

diff --git a/testsetup.sh b/testsetup.sh
index 63a588a..9307f0f 100755
--- a/testsetup.sh
+++ b/testsetup.sh
@@ -38,8 +38,13 @@ find tmp -name '*.py' -exec sed -r -e \
 
 if [ -f /etc/debian_version ]; then
     SITE_PACKAGE_DIR=`pwd`/tmp/usr/local/lib/${fullPythonVersion}/dist-packages
-else
+elif [ -d "`pwd`/tmp/usr/lib/${fullPythonVersion}" ]; then
     SITE_PACKAGE_DIR=`pwd`/tmp/usr/lib/${fullPythonVersion}/site-packages
+elif [ -d "`pwd`/tmp/usr/lib64/${fullPythonVersion}" ]; then
+    SITE_PACKAGE_DIR=`pwd`/tmp/usr/lib64/${fullPythonVersion}/site-packages
+else
+    echo "Could not find 'SITE_PACKAGE_DIR' to use!"
+    exit 1
 fi
 
 cp meresco/__init__.py ${SITE_PACKAGE_DIR}/meresco
-- 
1.7.1

