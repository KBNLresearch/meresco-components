Changeset created on Mon Sep 27 12:27:58 UTC 2010 by Seek You Too

Description: extraResponseData now takes docset parameter

    extraResponseData now takes docset parameter (instead of cqlAbstractSyntaxTree parameter) to prevent distinct components having to call docsetFromQuery more than once.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.1-NED/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/drilldown/srutermdrilldown.py version_0-docset_kwarg/meresco/components/drilldown/srutermdrilldown.py
--- version_0/meresco/components/drilldown/srutermdrilldown.py	2010-09-27 09:53:11.000000000 +0000
+++ version_0-docset_kwarg/meresco/components/drilldown/srutermdrilldown.py	2010-09-27 10:22:15.000000000 +0000
@@ -38,7 +38,7 @@
         self._sortedByTermCount = sortedByTermCount
                 
     @decorateWith(DRILLDOWN_HEADER, DRILLDOWN_FOOTER)
-    def extraResponseData(self, cqlAbstractSyntaxTree=None, x_term_drilldown=None, **kwargs):
+    def extraResponseData(self, docset, x_term_drilldown=None, **kwargs):
         if x_term_drilldown == None or len(x_term_drilldown) != 1:
             return
         def splitTermAndMaximum(s):
@@ -54,7 +54,7 @@
             raise StopIteration
 
         drilldownResults = self.any.drilldown(
-            self.any.docsetFromQuery(cqlAbstractSyntaxTree),
+            docset,
             fieldMaxTuples)
 
         yield self._termDrilldown(drilldownResults)
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/sru/sruhandler.py version_0-docset_kwarg/meresco/components/sru/sruhandler.py
--- version_0/meresco/components/sru/sruhandler.py	2010-09-27 09:53:10.000000000 +0000
+++ version_0-docset_kwarg/meresco/components/sru/sruhandler.py	2010-09-27 12:06:18.000000000 +0000
@@ -51,6 +51,7 @@
                 sortBy=sortBy,
                 sortDescending=sortDescending,
                 **kwargs)
+            docset = self.any.docsetFromQuery(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree)
         except Exception, e:
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
@@ -70,7 +71,7 @@
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, **kwargs)
-        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, **kwargs)
+        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, docset=docset, **kwargs)
         yield self._endResults()
 
     def _writeEchoedSearchRetrieveRequest(self, **kwargs):
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/sruhandlertest.py version_0-docset_kwarg/test/sru/sruhandlertest.py
--- version_0/test/sru/sruhandlertest.py	2010-09-27 09:53:10.000000000 +0000
+++ version_0-docset_kwarg/test/sru/sruhandlertest.py	2010-09-27 12:07:19.000000000 +0000
@@ -117,7 +117,6 @@
         sruHandler = SruHandler()
         sruTermDrilldown = SRUTermDrilldown()
         observer = CallTrace("Drilldown")
-        observer.returnValues['docsetFromQuery'] = 'docset'
         observer.returnValues['drilldown'] = iter([
                 ('field0', iter([('value0_0', 14)])),
                 ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
@@ -125,7 +124,7 @@
             ])
         sruTermDrilldown.addObserver(observer)
         sruHandler.addObserver(sruTermDrilldown)
-        result = "".join(list(sruHandler._writeExtraResponseData(cqlAbstractSyntaxTree=None, **arguments)))
+        result = "".join(list(sruHandler._writeExtraResponseData(docset='docset', **arguments)))
         self.assertEqualsWS("""<srw:extraResponseData><dd:drilldown\n    xmlns:dd="http://meresco.org/namespace/drilldown"\n    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://meresco.org/namespace/drilldown http://meresco.org/files/xsd/drilldown-20070730.xsd"><dd:term-drilldown><dd:navigator name="field0"><dd:item count="14">value0_0</dd:item></dd:navigator><dd:navigator name="field1"><dd:item count="13">value1_0</dd:item><dd:item count="11">value1_1</dd:item></dd:navigator><dd:navigator name="field2"><dd:item count="3">value2_0</dd:item><dd:item count="2">value2_1</dd:item><dd:item count="1">value2_2</dd:item></dd:navigator></dd:term-drilldown></dd:drilldown></srw:extraResponseData>""" , result)
 
     def testNextRecordPosition(self):
@@ -164,8 +163,8 @@
         component.addObserver(observer)
 
         result = "".join(compose(component.searchRetrieve(**arguments)))
-        self.assertEquals(['executeCQL', 'echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
-        executeCQLMethod, echoedExtraRequestDataMethod, extraResponseDataMethod = observer.calledMethods
+        self.assertEquals(['executeCQL', 'docsetFromQuery', 'echoedExtraRequestData', 'extraResponseData'], [m.name for m in observer.calledMethods])
+        executeCQLMethod, docsetFromCQL, echoedExtraRequestDataMethod, extraResponseDataMethod = observer.calledMethods
         self.assertEquals('executeCQL', executeCQLMethod.name)
         methodKwargs = executeCQLMethod.kwargs
         self.assertEquals(parseString('field=value'), methodKwargs['cqlAbstractSyntaxTree'])
@@ -229,7 +228,7 @@
         self.assertEquals((), echoedExtraRequestDataMethod.args)
         self.assertEquals(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking'], echoedExtraRequestDataMethod.kwargs.keys())
         self.assertEquals((), extraResponseDataMethod.args)
-        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree']), set(extraResponseDataMethod.kwargs.keys()))
+        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'docset']), set(extraResponseDataMethod.kwargs.keys()))
 
     def testIOErrorInWriteRecordData(self):
         observer = CallTrace()
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/sru/srutermdrilldowntest.py version_0-docset_kwarg/test/sru/srutermdrilldowntest.py
--- version_0/test/sru/srutermdrilldowntest.py	2010-09-27 09:53:10.000000000 +0000
+++ version_0-docset_kwarg/test/sru/srutermdrilldowntest.py	2010-09-27 10:24:54.000000000 +0000
@@ -39,16 +39,15 @@
         sruTermDrilldown = SRUTermDrilldown()
 
         observer = CallTrace("Drilldown")
-        observer.returnValues['docsetFromQuery'] = 'docset'
         observer.returnValues['drilldown'] = iter([
                 ('field0', iter([('value0_0', 14)])),
                 ('field1', iter([('value1_0', 13), ('value1_1', 11)])),
                 ('field2', iter([('value2_0', 3), ('value2_1', 2), ('value2_2', 1)]))])
 
         sruTermDrilldown.addObserver(observer)
-        cqlAbstractSyntaxTree = 'cqlAbstractSyntaxTree'
+        docset = 'docset'
 
-        result = compose(sruTermDrilldown.extraResponseData(cqlAbstractSyntaxTree, x_term_drilldown=["field0:1,field1:2,field2"]))
+        result = compose(sruTermDrilldown.extraResponseData(docset, x_term_drilldown=["field0:1,field1:2,field2"]))
         self.assertEqualsWS(DRILLDOWN_HEADER + """<dd:term-drilldown><dd:navigator name="field0">
     <dd:item count="14">value0_0</dd:item>
 </dd:navigator>
@@ -61,9 +60,9 @@
     <dd:item count="2">value2_1</dd:item>
     <dd:item count="1">value2_2</dd:item>
 </dd:navigator></dd:term-drilldown></dd:drilldown>""", "".join(result))
-        self.assertEquals(['docsetFromQuery', 'drilldown'], [m.name for m in observer.calledMethods])
-        self.assertEquals('cqlAbstractSyntaxTree', observer.calledMethods[0].args[0])
-        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[1].args[1]))
+        self.assertEquals(['drilldown'], [m.name for m in observer.calledMethods])
+        self.assertEquals('docset', observer.calledMethods[0].args[0])
+        self.assertEquals([('field0', 1, False), ('field1', 2, False), ('field2', DEFAULT_MAXIMUM_TERMS, False)], list(observer.calledMethods[0].args[1]))
 
     def testDrilldownCallRaisesAnError(self):
         sruTermDrilldown = SRUTermDrilldown()
