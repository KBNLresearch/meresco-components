Changeset created on Wed Nov 14 13:17:01 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Support warnings using diagnostics

    Non-fatal diagnostics can be used to add 'warnings' to a searchRetrieveResponse.

Baseline version: 4.3.8

From 76f37a23fdf41946da0e071495aea7c2eddc2a2b Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Wed, 14 Nov 2012 11:04:18 +0100
Subject: [PATCH 1/2] JJ/TJ: added diagnostics (as warning)

---
 meresco/components/sru/sruhandler.py |   11 ++++++-
 test/sru/sruhandlertest.py           |   55 ++++++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+), 1 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index 7ffec64..340e616 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -60,7 +60,7 @@ class SruHandler(Observable):
         self._querySuggestionsCount = querySuggestionsCount
         self._drilldownMaximumMaximumResults = drilldownMaximumMaximumResults
 
-    def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sruArguments=None, **kwargs):
+    def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sruArguments=None, diagnostics=None, **kwargs):
         SRU_IS_ONE_BASED = 1
 
         t0 = self._timeNow()
@@ -110,6 +110,7 @@ class SruHandler(Observable):
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(sruArguments=sruArguments)
+        yield self._writeDiagnostics(diagnostics=diagnostics)
         yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, drilldownData=drilldownData, response=response, queryTime=queryTime, suggestionsQuery=suggestionsQuery, sruArguments=sruArguments, **kwargs)
         yield self._endResults()
 
@@ -125,6 +126,14 @@ class SruHandler(Observable):
             yield chunk
         yield '</srw:echoedSearchRetrieveRequest>'
 
+    def _writeDiagnostics(self, diagnostics):
+        if not diagnostics:
+            return
+        yield '<srw:diagnostics>'
+        for code, details, message in diagnostics:
+            yield DIAGNOSTIC % (code, xmlEscape(details), xmlEscape(message))
+        yield '</srw:diagnostics>'
+
     def _writeExtraResponseData(self, response=None, queryTime=None, **kwargs):
         result = compose(self._extraResponseDataTryExcept(response=response, queryTime=queryTime, **kwargs))
         headerWritten = False
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index 298b7fa..f971faa 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -511,6 +511,53 @@ class SruHandlerTest(SeecrTestCase):
         finally:
             sys.stderr = sys.__stderr__
 
+    def testDiagnosticWarning(self):
+        sruArguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, }
+        queryArguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2}
+
+        observer = CallTrace()
+        response = Response(total=100, hits=['<aap&noot>', 'vuur'])
+        def executeQuery(**kwargs):
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
+
+        yieldRecordCalls = []
+        def yieldRecord(identifier, partname):
+            yieldRecordCalls.append(1)
+            yield "<MOCKED_WRITTEN_DATA>%s-%s</MOCKED_WRITTEN_DATA>" % (xmlEscape(identifier), partname)
+        observer.yieldRecord = yieldRecord
+
+        observer.methods['extraResponseData'] = lambda *a, **kw: (x for x in 'extraResponseData')
+        observer.methods['echoedExtraRequestData'] = lambda *a, **kw: (x for x in 'echoedExtraRequestData')
+
+        component = SruHandler()
+        component.addObserver(observer)
+
+        result = "".join(compose(component.searchRetrieve(sruArguments=sruArguments, diagnostics=[(998, 'Diagnostic 998', 'The <tag> message'), (999, 'Diagnostic 999', 'Some message')], **queryArguments)))
+
+        response = parse(StringIO(result))
+
+        self.assertEquals([t % namespaces for t in [
+                '{%(srw)s}version',
+                '{%(srw)s}numberOfRecords',
+                '{%(srw)s}records',
+                '{%(srw)s}nextRecordPosition',
+                '{%(srw)s}echoedSearchRetrieveRequest',
+                '{%(srw)s}diagnostics',
+                '{%(srw)s}extraResponseData',
+            ]], [t.tag for t in xpath(response, '//srw:searchRetrieveResponse/*')])
+
+        diagnostics = [(xpath(d, 'diag:uri/text()')[0], 
+            xpath(d, 'diag:details/text()')[0],
+            xpath(d, 'diag:message/text()')[0]) for d in 
+                xpath(response, '/srw:searchRetrieveResponse/srw:diagnostics/diag:diagnostic')]
+        self.assertEquals([
+            ('info://srw/diagnostics/1/998', 'Diagnostic 998', 'The <tag> message'), 
+            ('info://srw/diagnostics/1/999', 'Diagnostic 999', 'Some message'),
+            ], diagnostics)
+
+
     def testSearchRetrieveAssertsDrilldownMaximumMaximumResultsWhenSet(self):
         drilldownMaximumMaximumResults = 3
         self.assertTrue(drilldownMaximumMaximumResults < DEFAULT_MAXIMUM_TERMS)
@@ -678,5 +725,13 @@ class SruHandlerTest(SeecrTestCase):
         self.assertEquals(5, methodKwargs['suggestionsCount'])
         self.assertEquals("value", methodKwargs['suggestionsQuery'])
 
+def xpath(lxmlNode, path):
+    return lxmlNode.xpath(path, namespaces=namespaces)
+
+namespaces = {
+        'ti': "http://meresco.org/namespace/timing",
+        'srw': "http://www.loc.gov/zing/srw/",
+        'diag': "http://www.loc.gov/zing/srw/diagnostic/", 
+    }
 def hitsRange(*args):
     return ['%s' % i for i in range(*args)]
-- 
1.7.2.5


From 97f87709280ecc6da657947a57fa42ddbdc76ca2 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Wed, 14 Nov 2012 11:10:44 +0100
Subject: [PATCH 2/2] JJ/TJ: small refactorings.

---
 meresco/components/sru/sruhandler.py |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index 340e616..f23408b 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -42,8 +42,8 @@ from time import time
 from decimal import Decimal
 from traceback import print_exc
 
-from diagnostic import UNSUPPORTED_PARAMETER_VALUE
-from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
+from diagnostic import DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, UNSUPPORTED_PARAMETER_VALUE
+from sruparser import DIAGNOSTICS, RESPONSE_HEADER, RESPONSE_FOOTER
 
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet']
 
-- 
1.7.2.5

