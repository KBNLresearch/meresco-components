Changeset created on Wed Jun  8 16:33:34 CEST 2011 by Seecr

Description: Rss accept empty query if antiUnaryClause is given

    The RSS component now only raises an SruMandatoryParameterNotSuppliedException 
    if both query and antiUnaryClause are empty. If one of them is given the 
    query is valid.

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.4.14-HBO-Kennisbank/version_0

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/meresco/components/rss.py version_1/meresco/components/rss.py
--- version_0/meresco/components/rss.py	2011-06-08 14:47:57.000000000 +0200
+++ version_1/meresco/components/rss.py	2011-06-08 16:33:09.000000000 +0200
@@ -75,7 +75,7 @@
             filters = arguments.get('filter', [])
             startRecord = 1
 
-            if not query:
+            if not query and not self._antiUnaryClause:
                 raise SruMandatoryParameterNotSuppliedException("query")
             webquery = WebQuery(query, antiUnaryClause=self._antiUnaryClause)
             for filter in filters:
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_0/test/rsstest.py version_1/test/rsstest.py
--- version_0/test/rsstest.py	2011-06-08 14:47:57.000000000 +0200
+++ version_1/test/rsstest.py	2011-06-08 16:33:09.000000000 +0200
@@ -195,6 +195,18 @@
         self.assertEquals(["executeCQL(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
         self.assertCql(parseCql("antiunary NOT fiets"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
 
+    def testEmptyQueryWithAntiUnaryClauseIsPassedToWebQuery(self):
+        observer = CallTrace(
+            returnValues={'executeCQL': (0, [])},
+            ignoredAttributes=['unknown', 'extraResponseData', 'echoedExtraRequestData'])
+        rss = Rss(title='Title', description='Description', link='Link', antiUnaryClause='antiunary')
+        rss.addObserver(observer)
+
+        result = "".join(rss.handleRequest(RequestURI='/?query='))
+        
+        self.assertEquals(["executeCQL(stop=10, cqlAbstractSyntaxTree=<class CQL_QUERY>, sortDescending=None, sortBy=None, start=0)"], [str(m) for m in observer.calledMethods])
+        self.assertCql(parseCql("antiunary"), observer.calledMethods[0].kwargs['cqlAbstractSyntaxTree'])
+
     def testWebQueryUsesFilters(self):
         observer = CallTrace(
             returnValues={'executeCQL': (0, [])},
