Changeset created on Wed Oct 20 14:33:26 CEST 2010 by Seek You Too

Description: IpFilter component is now testable

    This changeset allows testing of configured IpFilter in a Meresco
    based server. With the setting of a special HTTP Header, the 
    IpFilter component will fake the ip-address to be something else.
    The HTTP Header is "X-Meresco-Ipfilter-Fake-Ip". For security
    reasons this Header is only allowed from localhost.

Baseline version: meresco-components/workingsets/3.3-Edurep/version_6

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6/meresco/components/http/ipfilter.py version_7/meresco/components/http/ipfilter.py
--- version_6/meresco/components/http/ipfilter.py	2010-10-08 16:43:11.000000000 +0200
+++ version_7/meresco/components/http/ipfilter.py	2010-10-20 14:33:01.000000000 +0200
@@ -35,8 +35,11 @@
         self._allowedIpRanges = [(self._convertToNumber(start), self._convertToNumber(end))
             for start,end in allowedIpRanges]
 
-    def _filter(self, Client, **kwargs):
+    def _filter(self, Client, Headers, **kwargs):
         ipaddress = Client[0] if Client != None else '0.0.0.0'
+        if 'X-Meresco-Ipfilter-Fake-Ip' in Headers and ipaddress == '127.0.0.1':
+            ipaddress = Headers['X-Meresco-Ipfilter-Fake-Ip']
+
         if ipaddress in self._allowedIps:
             return True
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_6/test/http/ipfiltertest.py version_7/test/http/ipfiltertest.py
--- version_6/test/http/ipfiltertest.py	2010-10-08 16:43:11.000000000 +0200
+++ version_7/test/http/ipfiltertest.py	2010-10-20 14:33:00.000000000 +0200
@@ -33,14 +33,14 @@
 
 class IpFilterTest(TestCase):
 
-    def assertValidIp(self,  address, ipranges=[], ips=[]):
-        self._assertValidIp(address, ipranges, ips, passed=True)
+    def assertValidIp(self,  address, ipranges=[], ips=[], headers={}):
+        self._assertValidIp(address, ipranges, ips, headers, passed=True)
 
-    def assertInvalidIp(self,  address, ipranges=[], ips=[]):
-        self._assertValidIp(address, ipranges, ips, passed=False)
+    def assertInvalidIp(self,  address, ipranges=[], ips=[], headers={}):
+        self._assertValidIp(address, ipranges, ips, headers, passed=False)
 
 
-    def _assertValidIp(self, address, ipranges, ips, passed):
+    def _assertValidIp(self, address, ipranges, ips,headers, passed):
         self.observer = CallTrace('Observer')
 
         dna = be(
@@ -51,7 +51,7 @@
             )
         )
 
-        list(dna.all.handleRequest(Client=(address,)))
+        list(dna.all.handleRequest(Client=(address,), Headers=headers))
         if passed:
             self.assertEquals(1, len(self.observer.calledMethods))
             self.assertEquals('handleRequest', self.observer.calledMethods[0].name)
@@ -59,6 +59,34 @@
         else:
             self.assertEquals(0, len(self.observer.calledMethods))
 
+    def testIpfilterFakeIpHeaderForIntegrationTesting(self):
+        self.assertInvalidIp('127.0.0.1', ips=['192.168.1.1'])
+        self.assertInvalidIp('127.0.0.1', ips=['127.0.0.1'], headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'})
+        self.assertValidIp('127.0.0.1', ips=['192.168.1.1'], headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'})
+        self.assertInvalidIp('111.1.1.1', ips=['192.168.1.1'], headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'})
+
+    def testIpfilterFakeIpHeaderKwargsUnchanged(self):
+        observer = CallTrace()
+        ipf = IpFilter(allowedIps=['192.168.1.1'])
+
+        dna = be(
+            (Observable(),
+                (ipf,
+                    (observer,)
+                )
+            )
+        )
+
+        list(dna.all.handleRequest(Client=('127.0.0.1',), Headers={'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'}))
+
+        self.assertEquals(1, len(observer.calledMethods))
+        self.assertEquals((), observer.calledMethods[0].args)
+        self.assertEquals({
+            'Client': ('127.0.0.1',),
+            'Headers': {'X-Meresco-Ipfilter-Fake-Ip': '192.168.1.1'}
+        }, observer.calledMethods[0].kwargs)
+
+
     def testFilterSingleIp(self):
         self.assertValidIp('192.168.1.0', ips=["192.168.1.0"])
         self.assertInvalidIp('192.168.1.0', ips=["192.168.1.1"])
@@ -83,4 +111,4 @@
         iprange = IpFilter()
 
         self.assertEquals(3232235776, iprange._convertToNumber('192.168.1.0'))
-        self.assertEquals(0, iprange._convertToNumber('0.0.0.0'))
\ No newline at end of file
+        self.assertEquals(0, iprange._convertToNumber('0.0.0.0'))
