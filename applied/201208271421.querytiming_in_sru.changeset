Changeset created on Mon Aug 27 14:21:01 UTC 2012 by Seecr (Seek You Too B.V.)

Description: Querytiming in SRU

    The SRU Handler can provide timing information on queries; duration of backend processing and of SRU handler processing

Baseline version: master

From 6d6105d78e48f9970af9a3b14d3f085450903892 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 27 Aug 2012 14:25:06 +0100
Subject: [PATCH 1/2] EG/JJ: xsd for timing, adding query times to sru

---
 meresco/components/sru/sruhandler.py               |   52 +++++++++++++++-----
 .../xml_generic/schemas/timing-20120827.xsd        |   15 ++++++
 test/sru/sruhandlertest.py                         |   50 +++++++++++++++++--
 test/timing-20120827.xsd                           |   11 ++++
 4 files changed, 110 insertions(+), 18 deletions(-)
 create mode 100644 meresco/components/xml_generic/schemas/timing-20120827.xsd
 create mode 100644 test/timing-20120827.xsd

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index bbd5aed..e60568b 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -37,21 +37,28 @@ from weightless.core import compose, Yield
 from cqlparser import parseString as parseCQL
 from warnings import warn
 
+from time import time
+from decimal import Decimal
+
 from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
 
 ECHOED_PARAMETER_NAMES = ['version', 'query', 'startRecord', 'maximumRecords', 'recordPacking', 'recordSchema', 'recordXPath', 'resultSetTTL', 'sortKeys', 'stylesheet']
 
+millis = Decimal('0.001')
+
 class SruHandler(Observable):
-    def __init__(self, extraRecordDataNewStyle=True, drilldownSortedByTermCount=False, extraXParameters=None):
+    def __init__(self, extraRecordDataNewStyle=True, drilldownSortedByTermCount=False, extraXParameters=None, includeQueryTimes=False):
         Observable.__init__(self)
         self._drilldownSortedByTermCount = drilldownSortedByTermCount
         self._extraRecordDataNewStyle = extraRecordDataNewStyle
         self._extraXParameters = set(extraXParameters or [])
         self._extraXParameters.add("x-recordSchema")
+        self._includeQueryTimes = includeQueryTimes
 
     def searchRetrieve(self, version=None, recordSchema=None, recordPacking=None, startRecord=1, maximumRecords=10, query='', sortBy=None, sortDescending=False, x_term_drilldown=None, **kwargs):
         SRU_IS_ONE_BASED = 1
 
+        t0 = self._timeNow()
         start = startRecord - SRU_IS_ONE_BASED
         cqlAbstractSyntaxTree = parseCQL(query)
 
@@ -59,18 +66,21 @@ class SruHandler(Observable):
 
         try:
             response = yield self.any.executeQuery(
-                cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
-                start=start,
-                stop=start + maximumRecords,
-                sortBy=sortBy,
-                sortDescending=sortDescending,
-                fieldnamesAndMaximums=drilldownFieldnamesAndMaximums,
-                **kwargs)
+                    cqlAbstractSyntaxTree=cqlAbstractSyntaxTree,
+                    start=start,
+                    stop=start + maximumRecords,
+                    sortBy=sortBy,
+                    sortDescending=sortDescending,
+                    fieldnamesAndMaximums=drilldownFieldnamesAndMaximums,
+                    **kwargs)
             total, recordIds = response.total, response.hits
             drilldownData = getattr(response, "drilldownData", None)
         except Exception, e:
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
+
+        queryTime = str(self._timeNow() - t0)
+
         yield self._startResults(total, version)
 
         recordsWritten = 0
@@ -87,7 +97,7 @@ class SruHandler(Observable):
                 yield '<srw:nextRecordPosition>%i</srw:nextRecordPosition>' % (nextRecordPosition + SRU_IS_ONE_BASED)
 
         yield self._writeEchoedSearchRetrieveRequest(version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, x_term_drilldown=x_term_drilldown, **kwargs)
-        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, response=response, **kwargs)
+        yield self._writeExtraResponseData(cqlAbstractSyntaxTree=cqlAbstractSyntaxTree, version=version, recordSchema=recordSchema, recordPacking=recordPacking, startRecord=startRecord, maximumRecords=maximumRecords, query=query, sortBy=sortBy, sortDescending=sortDescending, drilldownData=drilldownData, response=response, queryTime=queryTime, **kwargs)
         yield self._endResults()
 
     def _writeEchoedSearchRetrieveRequest(self, **kwargs):
@@ -102,10 +112,26 @@ class SruHandler(Observable):
             yield chunk
         yield '</srw:echoedSearchRetrieveRequest>'
 
-    def _writeExtraResponseData(self, **kwargs):
-        response = compose(self._extraResponseDataTryExcept(**kwargs))
+    def _writeExtraResponseData(self, response=None, queryTime=None, **kwargs):
+        result = compose(self._extraResponseDataTryExcept(response=response, queryTime=queryTime, **kwargs))
         headerWritten = False
-        for line in response:
+
+        if self._includeQueryTimes:    
+            headerWritten = True
+            t_sru_ms = Decimal(queryTime).quantize(millis)
+            if hasattr(response, "queryTime"):
+                t_index_ms = (Decimal(response.queryTime)/1000).quantize(millis)
+            else:
+                t_index_ms = -1
+
+            yield """<srw:extraResponseData>
+        <querytimes xmlns="http://meresco.org/namespace/timing">
+            <sru>PT%(sru)sS</sru>
+            <index>PT%(index)sS</index>
+        </querytimes>
+    """ % {'sru': t_sru_ms, 'index': t_index_ms}
+
+        for line in result:
             if line is Yield or callable(line):
                 yield line
                 continue
@@ -206,3 +232,5 @@ class SruHandler(Observable):
 
         return (splitTermAndMaximum(field) for field in x_term_drilldown[0].split(","))
 
+    def _timeNow(self):
+        return time()
diff --git a/meresco/components/xml_generic/schemas/timing-20120827.xsd b/meresco/components/xml_generic/schemas/timing-20120827.xsd
new file mode 100644
index 0000000..cdd7219
--- /dev/null
+++ b/meresco/components/xml_generic/schemas/timing-20120827.xsd
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema targetNamespace="http://meresco.org/namespace/timing" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ti="http://meresco.org/namespace/timing">
+
+    <xs:element name="querytimes" type="ti:queryTimes"/>
+    <xs:complexType name="queryTimes">
+        <xs:all minOccurs="1" maxOccurs="1">
+            <xs:element ref="ti:sru" minOccurs="0" maxOccurs="1"></xs:element>
+            <xs:element ref="ti:index" minOccurs="0" maxOccurs="1"></xs:element>
+        </xs:all>
+    </xs:complexType>
+
+    <xs:element name="sru" type="xs:duration"/>
+    <xs:element name="index" type="xs:duration"/>
+</xs:schema>
+
diff --git a/test/sru/sruhandlertest.py b/test/sru/sruhandlertest.py
index 6977aa4..dae2906 100644
--- a/test/sru/sruhandlertest.py
+++ b/test/sru/sruhandlertest.py
@@ -31,8 +31,10 @@
 
 from os.path import join
 from StringIO import StringIO
+from urllib2 import urlopen
+
 import traceback
-from lxml.etree import parse
+from lxml.etree import parse, tostring
 from xml.sax.saxutils import quoteattr, escape as xmlEscape
 
 from weightless.core import compose
@@ -116,11 +118,11 @@ class SruHandlerTest(SeecrTestCase):
 
     def testExtraResponseDataHandlerWithData(self):
         argsUsed = []
-        kwargsUsed = []
+        kwargsUsed = {}
         class TestHandler:
             def extraResponseData(self, *args, **kwargs):
                 argsUsed.append(args)
-                kwargsUsed.append(kwargs)
+                kwargsUsed.update(kwargs)
                 return (f for f in ["<someD", "ata/>"])
 
         component = SruHandler()
@@ -128,7 +130,9 @@ class SruHandlerTest(SeecrTestCase):
         result = "".join(list(component._writeExtraResponseData(cqlAbstractSyntaxTree=None)))
         self.assertEquals('<srw:extraResponseData><someData/></srw:extraResponseData>' , result)
         self.assertEquals([()], argsUsed)
-        self.assertEquals([{'cqlAbstractSyntaxTree': None}], kwargsUsed)
+        self.assertEquals(None, kwargsUsed['cqlAbstractSyntaxTree'])
+        self.assertEquals(None, kwargsUsed['queryTime'])
+        self.assertEquals(None, kwargsUsed['response'])
 
     def testExtraResponseDataWithTermDrilldown(self):
         arguments = {'version':'1.1', 'operation':'searchRetrieve', 'query':'query >= 3', 'recordSchema':'schema', 'recordPacking':'string', 'x_term_drilldown':['field0,field1']}
@@ -393,7 +397,7 @@ class SruHandlerTest(SeecrTestCase):
         self.assertEquals((), echoedExtraRequestDataMethod.args)
         self.assertEquals(set(['version', 'x_term_drilldown', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'x_extra_key']), set(echoedExtraRequestDataMethod.kwargs.keys()))
         self.assertEquals((), extraResponseDataMethod.args)
-        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'response', 'drilldownData', 'x_extra_key']), set(extraResponseDataMethod.kwargs.keys()))
+        self.assertEquals(set(['version', 'recordSchema', 'x_recordSchema', 'sortDescending', 'sortBy', 'maximumRecords', 'startRecord', 'query', 'operation', 'recordPacking', 'cqlAbstractSyntaxTree', 'response', 'drilldownData', 'x_extra_key', 'queryTime']), set(extraResponseDataMethod.kwargs.keys()))
  
     def testExtraRecordDataOldStyle(self):
         arguments = {'version':'1.2', 'operation':'searchRetrieve',  'recordSchema':'schema', 'recordPacking':'xml', 'query':'field=value', 'startRecord':1, 'maximumRecords':2, 'x_recordSchema':['extra', 'evenmore']}
@@ -490,7 +494,6 @@ class SruHandlerTest(SeecrTestCase):
         component.addObserver(RaisesException())
         result = "".join(compose(component.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema')))
         self.assertTrue("diagnostic" in result)
-
     
     def testValidXml(self):
         component = SruParser()
@@ -517,5 +520,40 @@ class SruHandlerTest(SeecrTestCase):
         assertValid(body, join(schemasPath, 'srw-types1.2.xsd'))
         self.assertTrue('diagnostic' in body, body)
 
+
+    def testQueryTimeInExtraResponse(self):
+        handler = SruHandler(includeQueryTimes=True)
+        observer = CallTrace('observer', emptyGeneratorMethods=['echoedExtraRequestData', 'extraResponseData'])
+
+        times = [1, 2.5]
+        def timeNow():
+            return times.pop(0)
+        handler._timeNow = timeNow
+
+        def executeQuery(**kwargs):
+            response = Response(total=0, hits=[])
+            response.queryTime=5
+            raise StopIteration(response)
+            yield
+        observer.methods['executeQuery'] = executeQuery
+        handler.addObserver(observer)
+        result = "".join(compose(handler.searchRetrieve(startRecord=11, maximumRecords=15, query='query', recordPacking='string', recordSchema='schema')))
+        sruResponse = parse(StringIO(result))
+        extraResponseData = sruResponse.xpath('/srw:searchRetrieveResponse/srw:extraResponseData', namespaces={'srw':"http://www.loc.gov/zing/srw/"})[0]
+        self.assertEqualsWS("""<srw:extraResponseData xmlns:srw="http://www.loc.gov/zing/srw/" xmlns:diag="http://www.loc.gov/zing/srw/diagnostic/" xmlns:xcql="http://www.loc.gov/zing/cql/xcql/" xmlns:dc="http://purl.org/dc/elements/1.1/">
+        <querytimes xmlns="http://meresco.org/namespace/timing">        
+            <sru>PT1.500S</sru>        
+            <index>PT0.005S</index>    
+        </querytimes>
+</srw:extraResponseData>""", tostring(extraResponseData))
+        queryTimes = tostring(extraResponseData.xpath('//ti:querytimes', namespaces={'ti':"http://meresco.org/namespace/timing"})[0])
+        assertValid(queryTimes, join(schemasPath, 'timing-20120827.xsd'))
+
+    def testTestXSDequalsPublishedXSD(self):
+        xsd = urlopen("http://meresco.org/files/xsd/timing-20120827.xsd").read()
+        localxsd = open(join(schemasPath, 'timing-20120827.xsd')).read()
+        self.assertEqualsWS(xsd, localxsd)
+
+
 def hitsRange(*args):
     return ['%s' % i for i in range(*args)]
diff --git a/test/timing-20120827.xsd b/test/timing-20120827.xsd
new file mode 100644
index 0000000..2cc9193
--- /dev/null
+++ b/test/timing-20120827.xsd
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<xs:schema targetNamespace="http://meresco.org/namespace/timing" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ti="http://meresco.org/namespace/timing">
+
+	<xs:element name="querytimes" type="ti:queryTimes"/>
+	<xs:complexType name="queryTimes">
+        <xs:all minOccurs="1" maxOccurs="1">
+            <xs:element ref="ti:sru" minOccurs="0" maxOccurs="1" type="xs:duration"></xs:element>
+            <xs:element ref="ti:index" minOccurs="0" maxOccurs="1" type="xs:duration"></xs:element>
+		</xs:all>
+	</xs:complexType>
+</xs:schema>
-- 
1.7.1


From 65bbe9346736200f783a0378667b3ef4af7ec9a2 Mon Sep 17 00:00:00 2001
From: Seecr Development Team <development@seecr.nl>
Date: Mon, 27 Aug 2012 15:19:38 +0100
Subject: [PATCH 2/2] EG/JJ: stacktrace for easier debugging

---
 meresco/components/sru/sruhandler.py |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/meresco/components/sru/sruhandler.py b/meresco/components/sru/sruhandler.py
index e60568b..fe13ec2 100644
--- a/meresco/components/sru/sruhandler.py
+++ b/meresco/components/sru/sruhandler.py
@@ -39,6 +39,7 @@ from warnings import warn
 
 from time import time
 from decimal import Decimal
+from traceback import print_exc
 
 from sruparser import DIAGNOSTICS, DIAGNOSTIC, GENERAL_SYSTEM_ERROR, QUERY_FEATURE_UNSUPPORTED, RESPONSE_HEADER, RESPONSE_FOOTER
 
@@ -76,6 +77,7 @@ class SruHandler(Observable):
             total, recordIds = response.total, response.hits
             drilldownData = getattr(response, "drilldownData", None)
         except Exception, e:
+            print_exc()
             yield DIAGNOSTICS % ( QUERY_FEATURE_UNSUPPORTED[0], QUERY_FEATURE_UNSUPPORTED[1], xmlEscape(str(e)))
             return
 
-- 
1.7.1

