Changeset created on Tue May 18 17:31:10 CEST 2010 by Seek You Too

Description: Removed unnecessary reverse lookup in DrilldownFieldnames

    The reverse lookup in DrilldownFieldnames is now handled by the object
    itself through remembering the translated field.

    The reverse lookup method in ContextSet is removed, because it was only
    used in DrilldownFieldnames.

Baseline version: meresco-core/workingsets/2.22.9-EduRep/version_5

diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/meresco/components/contextset.py version_6/meresco/components/contextset.py
--- version_5/meresco/components/contextset.py	2010-04-26 10:38:43.000000000 +0200
+++ version_6/meresco/components/contextset.py	2010-05-18 17:30:09.000000000 +0200
@@ -30,32 +30,21 @@
     def __init__(self, name, aStream):
         self.name = name
         self._dictionary = {}
-        self._reverseDictionary = {}
         self._readStream(aStream)
 
     def _readStream(self, aStream):
         for k,v in (line.strip().split() for line in aStream if line.strip() and not line.startswith('#')):
             if k not in self._dictionary:
                 self._dictionary[k] = v
-            if v not in self._reverseDictionary:
-                self._reverseDictionary[v] = k
 
     def match(self, field):
         return '.' in field and field.split('.',1)[0] == self.name and field.split('.',1)[1] in self._dictionary
 
-    def reverseMatch(self, field):
-        return field in self._reverseDictionary
-
     def lookup(self, field):
         if not self.match(field):
             return field
         return self._dictionary[field.split('.',1)[1]]
 
-    def reverseLookup(self, field):
-        if not self.reverseMatch(field):
-            return field
-        return self.name + '.' + self._reverseDictionary[field]
-
 class ContextSetException(Exception):
     pass
 
@@ -74,11 +63,5 @@
             return set.lookup(field)
         return field
 
-    def reverseLookup(self, field):
-        for set in self._contextsets.values():
-            if set.reverseMatch(field):
-                return set.reverseLookup(field)
-        return field
-
     def add(self, contextSet):
         self._contextsets[contextSet.name] = contextSet
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/meresco/components/drilldown/drilldownfieldnames.py version_6/meresco/components/drilldown/drilldownfieldnames.py
--- version_5/meresco/components/drilldown/drilldownfieldnames.py	2010-04-26 10:38:43.000000000 +0200
+++ version_6/meresco/components/drilldown/drilldownfieldnames.py	2010-05-18 17:30:09.000000000 +0200
@@ -28,14 +28,17 @@
 from meresco.core.observable import Observable
 
 class DrilldownFieldnames(Observable):
-    def __init__(self, lookup, reverse):
+    def __init__(self, lookup):
         Observable.__init__(self)
         self.lookup = lookup
-        self.reverse = reverse
 
     def drilldown(self, docNumbers, fieldsAndMaximums):
-        translatedFields = ((self.lookup(field), maximum, sort)
-            for (field, maximum, sort) in fieldsAndMaximums)
+        reverseLookup = {}
+        translatedFields = []
+        for field, maximum, sort in fieldsAndMaximums:
+            translated = self.lookup(field)
+            translatedFields.append((translated, maximum, sort))
+            reverseLookup[translated] = field
         drilldownResults = self.any.drilldown(docNumbers, translatedFields)
-        return [(self.reverse(field), termCounts)
+        return [(reverseLookup[field], termCounts)
             for field, termCounts in drilldownResults]
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/test/alltests.py version_6/test/alltests.py
--- version_5/test/alltests.py	2010-04-26 10:38:42.000000000 +0200
+++ version_6/test/alltests.py	2010-05-18 17:30:08.000000000 +0200
@@ -85,6 +85,7 @@
 from numeric.numbercomparitormodifiertest import NumberComparitorModifierTest
 from numeric.numbercomparitortest import NumberComparitorTest
 
+from drilldown.drilldownfieldnamestest import DrilldownFieldnamesTest
 from sru.srufielddrilldowntest import SRUFieldDrilldownTest
 from sru.srutermdrilldowntest import SRUTermDrilldownTest
 from sru.srurecordupdatetest import SRURecordUpdateTest
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/test/contextsettest.py version_6/test/contextsettest.py
--- version_5/test/contextsettest.py	2010-04-26 10:38:42.000000000 +0200
+++ version_6/test/contextsettest.py	2010-05-18 17:30:08.000000000 +0200
@@ -54,12 +54,6 @@
         self.assertEquals('test.nosuchfield', self.set.lookup('test.nosuchfield'))
         self.assertEquals('otherset.field', self.set.lookup('otherset.field'))
 
-    def testReverseLookup(self):
-        self.assertEquals('test.query.field1', self.set.reverseLookup('actualfield1'))
-        self.assertEquals('test.field2', self.set.reverseLookup('actualfield2'))
-        self.assertEquals('test.field2', self.set.reverseLookup('actualotherfield2'))
-        self.assertEquals('nosuchfield', self.set.reverseLookup('nosuchfield'))
-
     def testLookupInList(self):
         setlist = ContextSetList()
         setlist.add(ContextSet('set1', StringIO("field\tactualfield\nfield1\tactualfield1")))
@@ -67,11 +61,6 @@
         self.assertEquals('actualfield', setlist.lookup('set1.field'))
         self.assertEquals('actualfield', setlist.lookup('set2.field'))
         self.assertEquals('actualfield2', setlist.lookup('set2.field2'))
-        self.assertEquals('set2.field2', setlist.reverseLookup('actualfield2'))
-        self.assertEquals('set1.field1', setlist.reverseLookup('actualfield1'))
-        self.assertEquals('set1.field', setlist.reverseLookup('actualfield'))
-        self.assertEquals('set1.thisDoesNotExist', setlist.reverseLookup('set1.thisDoesNotExist'))
-        self.assertEquals('noreversefield', setlist.reverseLookup('noreversefield'))
         self.assertEquals('unsupportedset.field3', setlist.lookup('unsupportedset.field3'))
 
 
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/test/drilldown/drilldownfieldnamestest.py version_6/test/drilldown/drilldownfieldnamestest.py
--- version_5/test/drilldown/drilldownfieldnamestest.py	1970-01-01 01:00:00.000000000 +0100
+++ version_6/test/drilldown/drilldownfieldnamestest.py	2010-05-18 17:30:08.000000000 +0200
@@ -0,0 +1,43 @@
+## begin license ##
+#
+#    Meresco Core is an open-source library containing components to build
+#    searchengines, repositories and archives.
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Core.
+#
+#    Meresco Core is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Core is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Core; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
+from cq2utils import CQ2TestCase, CallTrace
+from meresco.components.drilldown import DrilldownFieldnames
+
+class DrilldownFieldnamesTest(CQ2TestCase):
+
+    def testDrilldownFieldnames(self):
+        d = DrilldownFieldnames(lookup=lambda name: 'drilldown.'+name)
+        observer = CallTrace('drilldown')
+        observer.returnValues['drilldown'] = [('drilldown.field1', [('term1',1)]),('drilldown.field2', [('term2', 2)])]
+        d.addObserver(observer)
+
+        result = list(d.drilldown('docset', [('field1', 0, True),('field2', 3, False)]))
+
+        self.assertEquals(1, len(observer.calledMethods))
+        self.assertEquals([('drilldown.field1', 0, True),('drilldown.field2', 3, False)], list(observer.calledMethods[0].args[1]))
+
+        self.assertEquals([('field1', [('term1',1)]),('field2', [('term2', 2)])], result)
+
diff --unidirectional-new-file --exclude='*.so' --exclude='*.o' --exclude=.svn --exclude='*.pyc' --exclude=deps.d --exclude=applied --recursive --unified version_5/test/drilldown/__init__.py version_6/test/drilldown/__init__.py
--- version_5/test/drilldown/__init__.py	1970-01-01 01:00:00.000000000 +0100
+++ version_6/test/drilldown/__init__.py	2010-05-18 17:30:08.000000000 +0200
@@ -0,0 +1,25 @@
+## begin license ##
+#
+#    Meresco Core is an open-source library containing components to build
+#    searchengines, repositories and archives.
+#    Copyright (C) 2010 Seek You Too (CQ2) http://www.cq2.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
+#
+#    This file is part of Meresco Core.
+#
+#    Meresco Core is free software; you can redistribute it and/or modify
+#    it under the terms of the GNU General Public License as published by
+#    the Free Software Foundation; either version 2 of the License, or
+#    (at your option) any later version.
+#
+#    Meresco Core is distributed in the hope that it will be useful,
+#    but WITHOUT ANY WARRANTY; without even the implied warranty of
+#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#    GNU General Public License for more details.
+#
+#    You should have received a copy of the GNU General Public License
+#    along with Meresco Core; if not, write to the Free Software
+#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+#
+## end license ##
+
