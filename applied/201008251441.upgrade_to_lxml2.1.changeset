Changeset created on Wed Aug 25 14:41:39 CEST 2010 by Seek You Too

Description: Upgrade to lxml2.1

    Upgrade from lxml verion 1.2 to lxml verion 2.1

Baseline version: https://meresco.svn.sourceforge.net/svnroot/meresco/meresco-components/workingsets/3.1.3-Edurep/version_0

diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/deps.txt version_0-lxml-upgrade/deps.txt
--- version_0/deps.txt	2010-08-25 14:28:06.000000000 +0200
+++ version_0-lxml-upgrade/deps.txt	2010-08-25 14:31:41.000000000 +0200
@@ -9,8 +9,8 @@
 python-jtool (>= 0.4)
 python-jtool (<< 0.6)
 python-levenshtein
-python-lxml (>=1.2)
-python-lxml (<<2.0)
+python-lxml (>=2.1)
+python-lxml (<<3.0)
 python-magic
 python-meresco-core3.1
 python-storage (>=5.1.7)
@@ -19,5 +19,5 @@
 python-weightless (<< 0.5)
 liblucene-core2-gcj9 (>= 2.2.0)
 liblucene-core2-gcj9 (< 2.4.0)
-libgcj9-0 (= 4.3.2-2.CQ2)
+libgcj9-0
 lsof
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/crosswalk.py version_0-lxml-upgrade/meresco/components/crosswalk.py
--- version_0/meresco/components/crosswalk.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/crosswalk.py	2010-08-25 14:27:05.000000000 +0200
@@ -79,11 +79,12 @@
         return self.all.unknown(method, *newArgs, **newKwargs)
 
     def convert(self, lxmlNode):
-        nsmap = findNamespaces(lxmlNode)
         if type(lxmlNode) == _ElementTree:
             prefix = lxmlNode.getroot().prefix
+            nsmap = lxmlNode.getroot().nsmap
         else:
             prefix = lxmlNode.prefix
+            nsmap = lxmlNode.nsmap
         if not prefix in nsmap:
             raise Exception("Prefix '%s' not found in rules, available namespaces: %s" % (prefix, nsmap.keys()))
         namespaceURI = nsmap[prefix]
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/msgbox/msgbox.py version_0-lxml-upgrade/meresco/components/msgbox/msgbox.py
--- version_0/meresco/components/msgbox/msgbox.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/msgbox/msgbox.py	2010-08-25 14:27:03.000000000 +0200
@@ -33,7 +33,6 @@
 
 from meresco.core import Observable
 from cq2utils import DirectoryWatcher
-from lxml.etree import parse
 from weightless import Suspend
 from escaping import escapeFilename, unescapeFilename
 
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/msgbox/updateadapter.py version_0-lxml-upgrade/meresco/components/msgbox/updateadapter.py
--- version_0/meresco/components/msgbox/updateadapter.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/msgbox/updateadapter.py	2010-08-25 14:27:03.000000000 +0200
@@ -24,9 +24,6 @@
 ## end license ##
 
 from meresco.core import Observable
-from lxml.etree import parse
-from os.path import basename
-from xml.sax.saxutils import escape as xmlEscape
 
 class UpdateAdapterFromMsgbox(Observable):
 
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/venturi.py version_0-lxml-upgrade/meresco/components/venturi.py
--- version_0/meresco/components/venturi.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/venturi.py	2010-08-25 14:27:05.000000000 +0200
@@ -68,10 +68,7 @@
 
     def _convert(self, anObject):
         if type(anObject) == _Element:
-            buff = StringIO()
-            ElementTree(anObject).write(buff)
-            buff.seek(0)
-            return parse(buff)
+            return ElementTree(anObject)
         return parse(StringIO(anObject))
 
     def delete(self, id):
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/xml_generic/validate.py version_0-lxml-upgrade/meresco/components/xml_generic/validate.py
--- version_0/meresco/components/xml_generic/validate.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/xml_generic/validate.py	2010-08-25 14:27:03.000000000 +0200
@@ -48,8 +48,7 @@
         allArguments = list(args) + kwargs.values()
         for arg in allArguments:
             if type(arg) == _ElementTree:
-                toValidate = parse(StringIO(tostring(arg, pretty_print=True)))
-                self._schema.validate(toValidate)
+                self._schema.validate(arg)
                 if self._schema.error_log:
                     exception = ValidateException(self._schema.error_log.last_error)
                     self.do.logException(exception)
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/xmlpump.py version_0-lxml-upgrade/meresco/components/xmlpump.py
--- version_0/meresco/components/xmlpump.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/xmlpump.py	2010-08-25 14:27:05.000000000 +0200
@@ -35,6 +35,11 @@
 from cStringIO import StringIO
 from re import compile
 
+try:
+    from lxml.etree import _ElementStringResult
+except:
+    _ElementStringResult = str
+
 class Converter(Observable):
     def unknown(self, msg, *args, **kwargs):
         newArgs = [self._detectAndConvert(arg) for arg in args]
@@ -55,7 +60,7 @@
 
 xmlStringRegexp = compile(r'(?s)^\s*<.*>\s*$')
 def isXmlString(anObject):
-    return type(anObject) in [str, unicode] and xmlStringRegexp.match(anObject)
+    return type(anObject) in [str, _ElementStringResult, unicode] and xmlStringRegexp.match(anObject)
 
 class XmlParseAmara(Converter):
     def _canConvert(self, anObject):
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/xmlxpath.py version_0-lxml-upgrade/meresco/components/xmlxpath.py
--- version_0/meresco/components/xmlxpath.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/xmlxpath.py	2010-08-25 14:27:05.000000000 +0200
@@ -31,6 +31,12 @@
 from lxml.etree import ElementTree, _ElementTree as ElementTreeType, parse
 from StringIO import StringIO
 
+#HM: To support both lxml1.2 as 2.1
+try:
+    from lxml.etree import _ElementStringResult
+except ImportError:
+    _ElementStringResult = str 
+
 oftenUsedNamespaces = {
     'oai_dc': "http://www.openarchives.org/OAI/2.0/oai_dc/",
     'dc': "http://purl.org/dc/elements/1.1/",
@@ -40,11 +46,11 @@
 }
 
 class XmlXPath(Observable):
-    def __init__(self, xpathList, namespaceMap = {}):
+    def __init__(self, xpathList, namespaceMap=None):
         Observable.__init__(self)
         self._xpaths = xpathList
         self._namespacesMap = oftenUsedNamespaces.copy()
-        self._namespacesMap.update(namespaceMap)
+        self._namespacesMap.update(namespaceMap or {})
 
     def unknown(self, msg, *args, **kwargs):
         changeTheseArgs = [(position,arg) for position,arg in enumerate(args) if type(arg) == ElementTreeType]
@@ -69,11 +75,8 @@
     def _findNewTree(self, elementTree):
         for xpath in self._xpaths:
             for element in elementTree.xpath(xpath, namespaces=self._namespacesMap):
-                if type(element) in [str, unicode]:
+                if type(element) in [_ElementStringResult, unicode]:
                     yield element
                 else:
-                    #to fix root element:
-                    buffer = StringIO()
-                    ElementTree(element).write(buffer)
-                    buffer.seek(0)
-                    yield parse(buffer)
+                    yield ElementTree(element)
+
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/meresco/components/xsltcrosswalk.py version_0-lxml-upgrade/meresco/components/xsltcrosswalk.py
--- version_0/meresco/components/xsltcrosswalk.py	2010-08-25 14:27:47.000000000 +0200
+++ version_0-lxml-upgrade/meresco/components/xsltcrosswalk.py	2010-08-25 14:27:05.000000000 +0200
@@ -25,38 +25,21 @@
 #    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 #
 ## end license ##
-from meresco.core import Observable
+from xmlpump import Converter
 
-from lxml.etree import parse, XSLT, _ElementTree, tostring
-
-class XsltCrosswalk(Observable):
+from lxml.etree import parse, XSLT, _ElementTree
 
+class XsltCrosswalk(Converter):
     def __init__(self, xslFileList):
-        Observable.__init__(self)
+        Converter.__init__(self)
         self._xsltFilelist = xslFileList
-        self._xslts = None
-
-    def lazyInit(self):
-        #xslts are created via _convert (not __init__) due to a bug in XSLT that causes a glibc crash
-        #if __init__ is called from a different thread, this might happen. This is a scenario that happens in the integrationtest.
-
-        if self._xslts == None:
-            self._xslts = [XSLT(parse(open(s))) for s in self._xsltFilelist]
+        self._xslts = [XSLT(parse(open(s))) for s in self._xsltFilelist]
 
     def _convert(self, xmlSource):
-        self.lazyInit()
         result = xmlSource
         for xslt in self._xslts:
             result = xslt(result)
         return result.getroot().getroottree()
 
-    def _detectAndConvert(self, anObject):
-        result = anObject
-        if type(anObject) == _ElementTree:
-            result = self._convert(anObject)
-        return result
-
-    def unknown(self, method, *args, **kwargs):
-        newArgs = [self._detectAndConvert(arg) for arg in args]
-        newKwargs = dict((key, self._detectAndConvert(value)) for key, value in kwargs.items())
-        return self.all.unknown(method, *newArgs, **newKwargs)
+    def _canConvert(self, anObject):
+        return type(anObject) == _ElementTree
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/reindextest.py version_0-lxml-upgrade/test/reindextest.py
--- version_0/test/reindextest.py	2010-08-25 14:27:32.000000000 +0200
+++ version_0-lxml-upgrade/test/reindextest.py	2010-08-25 14:26:38.000000000 +0200
@@ -7,6 +7,7 @@
 #    Copyright (C) 2007-2009 SURF Foundation. http://www.surf.nl
 #    Copyright (C) 2007-2009 Stichting Kennisnet Ict op school.
 #       http://www.kennisnetictopschool.nl
+#    Copyright (C) 2010 Stichting Kennisnet http://www.kennisnet.nl
 #    Copyright (C) 2007 SURFnet. http://www.surfnet.nl
 #
 #    This file is part of Meresco Components.
@@ -30,6 +31,7 @@
 from cq2utils import CQ2TestCase, CallTrace
 from meresco.components import StorageComponent, Reindex, FilterMessages
 from meresco.core import be, Observable
+from lxml.etree import tostring
 
 from os.path import join, isdir
 from os import listdir
@@ -129,11 +131,10 @@
         result = list(compose(reindex.handleRequest(arguments={'session': ['testcase']})))
         self.assertEquals(['HTTP/1.0 200 OK\r\nContent-Type: plain/text\r\n\r\n', '+id:1\n', '+id:2\n', '+id:3\n', '=batches left: 0'], result)
 
-        methods = [str(m) for m in observer.calledMethods]
-        self.assertEquals(3, len(methods))
-        self.assertEquals("addDocumentPart(identifier='id:1', name='ignoredName', lxmlNode=<etree._ElementTree>)", methods[0])
-        self.assertEquals("addDocumentPart(identifier='id:2', name='ignoredName', lxmlNode=<etree._ElementTree>)", methods[1])
-        self.assertEquals("addDocumentPart(identifier='id:3', name='ignoredName', lxmlNode=<etree._ElementTree>)", methods[2])
+        self.assertEquals(['addDocumentPart']*3, [m.name for m in observer.calledMethods])
+        self.assertEquals(['id:1','id:2','id:3'], [m.kwargs['identifier'] for m in observer.calledMethods])
+        self.assertEquals(['ignoredName']*3, [m.kwargs['name'] for m in observer.calledMethods])
+        self.assertEquals(['<empty/>']*3, [tostring(m.kwargs['lxmlNode']) for m in observer.calledMethods])
 
     def testRemoveFilesAndDirectoryAfterProcess(self):
         storage = self.setupStorage([
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/xml_generic/lxml_based/crosswalktest.py version_0-lxml-upgrade/test/xml_generic/lxml_based/crosswalktest.py
--- version_0/test/xml_generic/lxml_based/crosswalktest.py	2010-08-25 14:27:31.000000000 +0200
+++ version_0-lxml-upgrade/test/xml_generic/lxml_based/crosswalktest.py	2010-08-25 14:26:38.000000000 +0200
@@ -69,7 +69,7 @@
             list(self.validate.unknown('methodname', 'id', 'metadata', parse(readRecord('imsmd_v1p2-1.xml'))))
             self.fail('must raise exception')
         except Exception, e:
-            self.assertEquals("<string>:1:ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://dpc.uba.uva.nl/schema/lom/triplel}lom': No matching global declaration available for the validation root.", str(e))
+            self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://dpc.uba.uva.nl/schema/lom/triplel}lom': No matching global declaration available for the validation root." in str(e), str(e))
 
     def testTripleLExample(self):
         try:
@@ -110,7 +110,7 @@
         c = Crosswalk(rulesDir=self.tempdir, extraGlobals={'myNormalizeMethod': lambda x,y:(x+' '+y,)})
         node = parse(StringIO("""<old xmlns="CrosswalkTest"><one><sub1>first</sub1><sub2>second</sub2></one></old>"""))
         newNode = c.convert(node)
-        self.assertEquals('<new xmlns="CrosswalkTest"><two>first second</two></new>', tostring(newNode))
+        self.assertEquals(['first second'], newNode.xpath("/dst:new/dst:two/text()", namespaces={'dst':'CrosswalkTest'}))
 
     def testXPathNodeTest(self):
         x = """
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/xml_generic/lxml_based/xmlxpathtest.py version_0-lxml-upgrade/test/xml_generic/lxml_based/xmlxpathtest.py
--- version_0/test/xml_generic/lxml_based/xmlxpathtest.py	2010-08-25 14:27:31.000000000 +0200
+++ version_0-lxml-upgrade/test/xml_generic/lxml_based/xmlxpathtest.py	2010-08-25 14:26:38.000000000 +0200
@@ -45,9 +45,7 @@
             (Observable(),
                 (XmlParseLxml(),
                     (XmlXPath(xpathList, nsMap),
-                        (XmlPrintLxml(),
-                            (self.observer, ),
-                        )
+                        (self.observer, ),
                     )
                 )
             )
@@ -62,7 +60,7 @@
         self.assertEquals('test', method.name)
         self.assertEquals(2, len(method.args))
         self.assertEquals('een tekst', method.args[0])
-        self.assertEqualsWS('<path><to>me</to></path>', method.args[1])
+        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.args[1]))
 
     def testElementInKwargs(self):
         self.createXmlXPath(['/root/path'], {})
@@ -74,7 +72,7 @@
         self.assertEquals('aMethod', method.name)
         self.assertEquals(1, len(method.args))
         self.assertEquals(set(['aKeyword', 'otherKeyword']), set(method.kwargs.keys()))
-        self.assertEqualsWS('<path><to>me</to></path>', method.kwargs['aKeyword'])
+        self.assertEqualsWS('<path><to>me</to></path>', tostring(method.kwargs['aKeyword']))
 
     def testNoElementInArgumentsPassesOn(self):
         self.createXmlXPath(['/root/path'], {})
@@ -91,7 +89,7 @@
             <two:path><findme xmlns="ns3">Found</findme></two:path></root>""")
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        self.assertEqualsWS('<findme xmlns="ns3">Found</findme>', self.observer.calledMethods[0].args[0])
+        self.assertEquals('Found', self.observer.calledMethods[0].args[0].xpath('text()')[0])
 
 
     def testXPathWithConditions(self):
@@ -109,7 +107,7 @@
 </root>""")
 
         self.assertEquals(1, len(self.observer.calledMethods))
-        self.assertEqualsWS('<data>This data</data>', self.observer.calledMethods[0].args[0])
+        self.assertEqualsWS('<data>This data</data>', tostring(self.observer.calledMethods[0].args[0]))
 
     def testXPathWithMultipleResults(self):
         self.createXmlXPath(['/root/element/data'], {})
@@ -123,8 +121,8 @@
     </element>
 </root>""")
         self.assertEquals(2, len(self.observer.calledMethods))
-        self.assertEqualsWS('<data>one</data>', self.observer.calledMethods[0].args[0])
-        self.assertEqualsWS('<data>two</data>', self.observer.calledMethods[1].args[0])
+        self.assertEqualsWS('<data>one</data>', tostring(self.observer.calledMethods[0].args[0]))
+        self.assertEqualsWS('<data>two</data>', tostring(self.observer.calledMethods[1].args[0]))
 
     def testXPathWithNoResults(self):
         self.createXmlXPath(['/does/not/exist'], {})
@@ -161,8 +159,8 @@
         newNode = message.args[0]
         self.assertEqualsWS('<bNode xmlns="bNamespace">ccc</bNode>', tostring(newNode))
 
-        newNamespaces = findNamespaces(newNode)
-        nameSpacesAfterParsing = findNamespaces(parse(StringIO(tostring(newNode))))
+        newNamespaces = newNode.getroot().nsmap
+        nameSpacesAfterParsing = parse(StringIO(tostring(newNode))).getroot().nsmap
         self.assertEquals(nameSpacesAfterParsing, newNamespaces)
 
     def testFindUsingMultipleXPaths(self):
@@ -174,9 +172,9 @@
         allResults = []
         for method in self.observer.calledMethods:
             allResults.append(method.args[0])
-        self.assertEqualsWS('<b><c>one</c></b>', allResults[0])
-        self.assertEqualsWS('<b><d>two</d></b>', allResults[1])
-        self.assertEqualsWS('<c>one</c>', allResults[2])
+        self.assertEqualsWS('<b><c>one</c></b>', tostring(allResults[0]))
+        self.assertEqualsWS('<b><d>two</d></b>', tostring(allResults[1]))
+        self.assertEqualsWS('<c>one</c>', tostring(allResults[2]))
 
     def testTestWithCondition(self):
         self.createXmlXPath(['/a/*[not(self::b) and not(self::c)]'], {})
@@ -187,7 +185,7 @@
         allResults = []
         for method in self.observer.calledMethods:
             allResults.append(method.args[0])
-        self.assertEqualsWS('<d>two</d>', allResults[0])
+        self.assertEqualsWS('<d>two</d>', tostring(allResults[0]))
 
     def testTestWithConditionAndNS(self):
         self.createXmlXPath(['/a:a/*[not(self::a:b) and not(self::a:c)]'], {"a":"aSpace"})
@@ -198,7 +196,7 @@
         allResults = []
         for method in self.observer.calledMethods:
             allResults.append(method.args[0])
-        self.assertEqualsWS('<d>two</d>', allResults[0])
+        self.assertEqualsWS('two', allResults[0].xpath("text()")[0])
 
     def testXPathReturnsString(self):
         xpath = XmlXPath(['/a/t/text()'])
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/xml_generic/validatetest.py version_0-lxml-upgrade/test/xml_generic/validatetest.py
--- version_0/test/xml_generic/validatetest.py	2010-08-25 14:27:31.000000000 +0200
+++ version_0-lxml-upgrade/test/xml_generic/validatetest.py	2010-08-25 14:26:38.000000000 +0200
@@ -62,7 +62,7 @@
             self.fail('must raise exception')
         except ValidateException:
             pass
-        self.assertEquals("<string>:1:ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root.", str(self.exception))
+        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element '{http://ltsc.ieee.org/xsd/LOM_this_should_not_work}lom': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
 
     def testAssertInvalidString(self):
         invalid = '<OAI-PMH/>'
@@ -71,4 +71,4 @@
             self.fail('must raise exception')
         except ValidateException, e:
             pass
-        self.assertEquals("<string>:1:ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root.", str(self.exception))
+        self.assertTrue("ERROR:SCHEMASV:SCHEMAV_CVC_ELT_1: Element 'OAI-PMH': No matching global declaration available for the validation root." in str(self.exception), str(self.exception))
diff --unidirectional-new-file '--exclude=*.so' '--exclude=*.o' '--exclude=.svn' '--exclude=*.pyc' '--exclude=deps.d' '--exclude=applied' --recursive --unified version_0/test/xmlpumptest.py version_0-lxml-upgrade/test/xmlpumptest.py
--- version_0/test/xmlpumptest.py	2010-08-25 14:27:32.000000000 +0200
+++ version_0-lxml-upgrade/test/xmlpumptest.py	2010-08-25 14:26:38.000000000 +0200
@@ -28,11 +28,11 @@
 #
 ## end license ##
 
-from cStringIO import StringIO
+from StringIO import StringIO
 from meresco.core.observable import Observable, be
 from cq2utils import CallTrace, CQ2TestCase
 from amara import binderytools
-from lxml.etree import _ElementTree, tostring, parse
+from lxml.etree import _ElementTree, tostring, parse, _ElementStringResult
 
 from meresco.components import XmlParseAmara, XmlPrintAmara, Amara2Lxml, Lxml2Amara, XmlPrintLxml, XmlParseLxml, FileParseLxml
 
@@ -55,6 +55,18 @@
         self.observable.do.add("id", "partName", xmlString)
 
         self.assertEquals(1, len(self.observer.calledMethods))
+        self.assertEquals("add", self.observer.calledMethods[0].name)
+        self.assertEquals(("id", "partName"), self.observer.calledMethods[0].args[:2])
+
+        xmlNode = self.observer.calledMethods[0].args[2]
+        self.assertEquals('tag', xmlNode.localName)
+        self.assertEquals('content', xmlNode.content.localName)
+
+    def testInflateWithElementStringResult(self):
+        xmlString = _ElementStringResult("""<tag><content>contents</content></tag>""")
+        self.observable.do.add("id", "partName", xmlString)
+
+        self.assertEquals(1, len(self.observer.calledMethods))
         self.assertEquals("add", self.observer.calledMethods[0].name)
         self.assertEquals(("id", "partName"), self.observer.calledMethods[0].args[:2])
 
